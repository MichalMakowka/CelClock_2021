
CelClock_2021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  2000001c  08002e0c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08002e0c  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063ee  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e2d  00000000  00000000  00026432  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00027260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00027458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fd8e  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003588  00000000  00000000  00037366  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000535d9  00000000  00000000  0003a8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008dec7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a0  00000000  00000000  0008df44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d4c 	.word	0x08002d4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002d4c 	.word	0x08002d4c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <menuInputService>:
	char display[4];
} TINPUT;



void menuInputService (TINPUT * in_wsk) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	// Display which variable is being configured
	DisplayLEDStr(in_wsk->display);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3307      	adds	r3, #7
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 f952 	bl	80016a6 <DisplayLEDStr>
	displayChar(((in_wsk->idx_default_ten + 48)), 4);	// Display initial values in line with the current idx
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	78db      	ldrb	r3, [r3, #3]
 8000406:	3330      	adds	r3, #48	; 0x30
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2104      	movs	r1, #4
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fa93 	bl	8001938 <displayChar>
	displayChar(((in_wsk->idx_default_units + 48)), 5);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	3330      	adds	r3, #48	; 0x30
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2105      	movs	r1, #5
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fa8b 	bl	8001938 <displayChar>

	in_wsk->temp_val_ten = in_wsk->idx_default_ten;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	78da      	ldrb	r2, [r3, #3]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	701a      	strb	r2, [r3, #0]
	in_wsk->temp_val_units = in_wsk->idx_default_units;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791a      	ldrb	r2, [r3, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	705a      	strb	r2, [r3, #1]
	in_wsk->idx = (in_wsk->idx_default_ten * 10) + in_wsk->idx_default_units;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	78db      	ldrb	r3, [r3, #3]
 8000436:	1c1a      	adds	r2, r3, #0
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	18db      	adds	r3, r3, r3
 800043e:	b2da      	uxtb	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	18d3      	adds	r3, r2, r3
 8000446:	b2da      	uxtb	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	709a      	strb	r2, [r3, #2]

	while(!button_flag[B_SET]) {
 800044c:	e082      	b.n	8000554 <menuInputService+0x164>
		if (button_flag[B_UP]) {
 800044e:	4b48      	ldr	r3, [pc, #288]	; (8000570 <menuInputService+0x180>)
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	2b00      	cmp	r3, #0
 8000456:	d038      	beq.n	80004ca <menuInputService+0xda>
			button_flag[B_UP]=0;
 8000458:	4b45      	ldr	r3, [pc, #276]	; (8000570 <menuInputService+0x180>)
 800045a:	2200      	movs	r2, #0
 800045c:	709a      	strb	r2, [r3, #2]
			(in_wsk->idx)++;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	789b      	ldrb	r3, [r3, #2]
 8000462:	3301      	adds	r3, #1
 8000464:	b2da      	uxtb	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	709a      	strb	r2, [r3, #2]
			if (in_wsk->idx > (in_wsk->idx_max)) in_wsk->idx = in_wsk->idx_min;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	789a      	ldrb	r2, [r3, #2]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	429a      	cmp	r2, r3
 8000474:	d903      	bls.n	800047e <menuInputService+0x8e>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	799a      	ldrb	r2, [r3, #6]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	709a      	strb	r2, [r3, #2]
			in_wsk->temp_val_ten = (decToBcd(in_wsk->idx)>>4);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fab4 	bl	80009f0 <decToBcd>
 8000488:	0003      	movs	r3, r0
 800048a:	091b      	lsrs	r3, r3, #4
 800048c:	b2da      	uxtb	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	701a      	strb	r2, [r3, #0]
			in_wsk->temp_val_units = (decToBcd(in_wsk->idx) & 0x0F);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	789b      	ldrb	r3, [r3, #2]
 8000496:	0018      	movs	r0, r3
 8000498:	f000 faaa 	bl	80009f0 <decToBcd>
 800049c:	0003      	movs	r3, r0
 800049e:	001a      	movs	r2, r3
 80004a0:	230f      	movs	r3, #15
 80004a2:	4013      	ands	r3, r2
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	705a      	strb	r2, [r3, #1]
			displayChar(((in_wsk->temp_val_ten)+48), 4);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	3330      	adds	r3, #48	; 0x30
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fa3f 	bl	8001938 <displayChar>
			displayChar(((in_wsk->temp_val_units)+48), 5);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	785b      	ldrb	r3, [r3, #1]
 80004be:	3330      	adds	r3, #48	; 0x30
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2105      	movs	r1, #5
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fa37 	bl	8001938 <displayChar>
		}
		if (button_flag[B_DOWN]) {
 80004ca:	4b29      	ldr	r3, [pc, #164]	; (8000570 <menuInputService+0x180>)
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d03c      	beq.n	800054e <menuInputService+0x15e>
			button_flag[B_DOWN]=0;
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <menuInputService+0x180>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	705a      	strb	r2, [r3, #1]
			(in_wsk->idx)--;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	789b      	ldrb	r3, [r3, #2]
 80004de:	3b01      	subs	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	709a      	strb	r2, [r3, #2]
			if (in_wsk->idx > 250 || in_wsk->idx < in_wsk->idx_min) in_wsk->idx = in_wsk->idx_max;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	2bfa      	cmp	r3, #250	; 0xfa
 80004ec:	d805      	bhi.n	80004fa <menuInputService+0x10a>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	789a      	ldrb	r2, [r3, #2]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	799b      	ldrb	r3, [r3, #6]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d203      	bcs.n	8000502 <menuInputService+0x112>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	795a      	ldrb	r2, [r3, #5]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	709a      	strb	r2, [r3, #2]
			in_wsk->temp_val_ten=(decToBcd(in_wsk->idx)>>4);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fa72 	bl	80009f0 <decToBcd>
 800050c:	0003      	movs	r3, r0
 800050e:	091b      	lsrs	r3, r3, #4
 8000510:	b2da      	uxtb	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	701a      	strb	r2, [r3, #0]
			in_wsk->temp_val_units = (decToBcd(in_wsk->idx) & 0x0F);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fa68 	bl	80009f0 <decToBcd>
 8000520:	0003      	movs	r3, r0
 8000522:	001a      	movs	r2, r3
 8000524:	230f      	movs	r3, #15
 8000526:	4013      	ands	r3, r2
 8000528:	b2da      	uxtb	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	705a      	strb	r2, [r3, #1]
			displayChar(((in_wsk->temp_val_ten)+48), 4);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3330      	adds	r3, #48	; 0x30
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2104      	movs	r1, #4
 8000538:	0018      	movs	r0, r3
 800053a:	f001 f9fd 	bl	8001938 <displayChar>
			displayChar(((in_wsk->temp_val_units)+48), 5);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	785b      	ldrb	r3, [r3, #1]
 8000542:	3330      	adds	r3, #48	; 0x30
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2105      	movs	r1, #5
 8000548:	0018      	movs	r0, r3
 800054a:	f001 f9f5 	bl	8001938 <displayChar>
		}

		delay_ms(250);
 800054e:	20fa      	movs	r0, #250	; 0xfa
 8000550:	f000 fea6 	bl	80012a0 <delay_ms>
	while(!button_flag[B_SET]) {
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <menuInputService+0x180>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d100      	bne.n	8000560 <menuInputService+0x170>
 800055e:	e776      	b.n	800044e <menuInputService+0x5e>
	}
	button_flag[B_SET]=0;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <menuInputService+0x180>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000050 	.word	0x20000050

08000574 <selectTime>:




void selectTime(void) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af02      	add	r7, sp, #8


	TINPUT input;

	// Input hour
	input.display[0]='h'; input.display[1]='r';
 800057a:	003b      	movs	r3, r7
 800057c:	2268      	movs	r2, #104	; 0x68
 800057e:	71da      	strb	r2, [r3, #7]
 8000580:	003b      	movs	r3, r7
 8000582:	2272      	movs	r2, #114	; 0x72
 8000584:	721a      	strb	r2, [r3, #8]
	input.idx_max=23;
 8000586:	003b      	movs	r3, r7
 8000588:	2217      	movs	r2, #23
 800058a:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 800058c:	003b      	movs	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = 0;
 8000592:	003b      	movs	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = 0;
 8000598:	003b      	movs	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff ff25 	bl	80003f0 <menuInputService>
	temp_t_hour = input.temp_val_ten;
 80005a6:	2517      	movs	r5, #23
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	003a      	movs	r2, r7
 80005ac:	7812      	ldrb	r2, [r2, #0]
 80005ae:	701a      	strb	r2, [r3, #0]
	temp_u_hour = input.temp_val_units;
 80005b0:	2616      	movs	r6, #22
 80005b2:	19bb      	adds	r3, r7, r6
 80005b4:	003a      	movs	r2, r7
 80005b6:	7852      	ldrb	r2, [r2, #1]
 80005b8:	701a      	strb	r2, [r3, #0]

	// Input minute
	input.display[0]='m'; input.display[1]='i'; input.display[2]='n';
 80005ba:	003b      	movs	r3, r7
 80005bc:	226d      	movs	r2, #109	; 0x6d
 80005be:	71da      	strb	r2, [r3, #7]
 80005c0:	003b      	movs	r3, r7
 80005c2:	2269      	movs	r2, #105	; 0x69
 80005c4:	721a      	strb	r2, [r3, #8]
 80005c6:	003b      	movs	r3, r7
 80005c8:	226e      	movs	r2, #110	; 0x6e
 80005ca:	725a      	strb	r2, [r3, #9]
	input.idx_max=59;
 80005cc:	003b      	movs	r3, r7
 80005ce:	223b      	movs	r2, #59	; 0x3b
 80005d0:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 80005d2:	003b      	movs	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = 0;
 80005d8:	003b      	movs	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = 0;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 80005e4:	003b      	movs	r3, r7
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ff02 	bl	80003f0 <menuInputService>
	temp_t_minute = input.temp_val_ten;
 80005ec:	2115      	movs	r1, #21
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	003a      	movs	r2, r7
 80005f2:	7812      	ldrb	r2, [r2, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	temp_u_minute = input.temp_val_units;
 80005f6:	2014      	movs	r0, #20
 80005f8:	183b      	adds	r3, r7, r0
 80005fa:	003a      	movs	r2, r7
 80005fc:	7852      	ldrb	r2, [r2, #1]
 80005fe:	701a      	strb	r2, [r3, #0]

	setTime(temp_t_hour, temp_u_hour, temp_t_minute, temp_u_minute);
 8000600:	183b      	adds	r3, r7, r0
 8000602:	781c      	ldrb	r4, [r3, #0]
 8000604:	187b      	adds	r3, r7, r1
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	19bb      	adds	r3, r7, r6
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	197b      	adds	r3, r7, r5
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	0023      	movs	r3, r4
 8000612:	f000 fa0b 	bl	8000a2c <setTime>

	// Input day
	input.display[0]='d'; input.display[1]='a'; input.display[2]='y';
 8000616:	003b      	movs	r3, r7
 8000618:	2264      	movs	r2, #100	; 0x64
 800061a:	71da      	strb	r2, [r3, #7]
 800061c:	003b      	movs	r3, r7
 800061e:	2261      	movs	r2, #97	; 0x61
 8000620:	721a      	strb	r2, [r3, #8]
 8000622:	003b      	movs	r3, r7
 8000624:	2279      	movs	r2, #121	; 0x79
 8000626:	725a      	strb	r2, [r3, #9]
	input.idx_max=31;
 8000628:	003b      	movs	r3, r7
 800062a:	221f      	movs	r2, #31
 800062c:	715a      	strb	r2, [r3, #5]
	input.idx_min=1;
 800062e:	003b      	movs	r3, r7
 8000630:	2201      	movs	r2, #1
 8000632:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = 0;
 8000634:	003b      	movs	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = 1;
 800063a:	003b      	movs	r3, r7
 800063c:	2201      	movs	r2, #1
 800063e:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 8000640:	003b      	movs	r3, r7
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff fed4 	bl	80003f0 <menuInputService>
	temp_t_day = input.temp_val_ten;
 8000648:	2513      	movs	r5, #19
 800064a:	197b      	adds	r3, r7, r5
 800064c:	003a      	movs	r2, r7
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	701a      	strb	r2, [r3, #0]
	temp_u_day = input.temp_val_units;
 8000652:	2612      	movs	r6, #18
 8000654:	19bb      	adds	r3, r7, r6
 8000656:	003a      	movs	r2, r7
 8000658:	7852      	ldrb	r2, [r2, #1]
 800065a:	701a      	strb	r2, [r3, #0]

	// Input month
	input.display[0]='m'; input.display[1]='o'; input.display[2]='n';
 800065c:	003b      	movs	r3, r7
 800065e:	226d      	movs	r2, #109	; 0x6d
 8000660:	71da      	strb	r2, [r3, #7]
 8000662:	003b      	movs	r3, r7
 8000664:	226f      	movs	r2, #111	; 0x6f
 8000666:	721a      	strb	r2, [r3, #8]
 8000668:	003b      	movs	r3, r7
 800066a:	226e      	movs	r2, #110	; 0x6e
 800066c:	725a      	strb	r2, [r3, #9]
	input.idx_max=12;
 800066e:	003b      	movs	r3, r7
 8000670:	220c      	movs	r2, #12
 8000672:	715a      	strb	r2, [r3, #5]
	input.idx_min=1;
 8000674:	003b      	movs	r3, r7
 8000676:	2201      	movs	r2, #1
 8000678:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = 0;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = 1;
 8000680:	003b      	movs	r3, r7
 8000682:	2201      	movs	r2, #1
 8000684:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff feb1 	bl	80003f0 <menuInputService>
	temp_t_month = input.temp_val_ten;
 800068e:	2311      	movs	r3, #17
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	003a      	movs	r2, r7
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	701a      	strb	r2, [r3, #0]
	temp_u_month = input.temp_val_units;
 8000698:	2410      	movs	r4, #16
 800069a:	193b      	adds	r3, r7, r4
 800069c:	003a      	movs	r2, r7
 800069e:	7852      	ldrb	r2, [r2, #1]
 80006a0:	701a      	strb	r2, [r3, #0]

	// Input year
	input.display[0]='y'; input.display[1]='e'; input.display[2]='a'; input.display[3]='r';
 80006a2:	003b      	movs	r3, r7
 80006a4:	2279      	movs	r2, #121	; 0x79
 80006a6:	71da      	strb	r2, [r3, #7]
 80006a8:	003b      	movs	r3, r7
 80006aa:	2265      	movs	r2, #101	; 0x65
 80006ac:	721a      	strb	r2, [r3, #8]
 80006ae:	003b      	movs	r3, r7
 80006b0:	2261      	movs	r2, #97	; 0x61
 80006b2:	725a      	strb	r2, [r3, #9]
 80006b4:	003b      	movs	r3, r7
 80006b6:	2272      	movs	r2, #114	; 0x72
 80006b8:	729a      	strb	r2, [r3, #10]
	input.idx_max=99;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2263      	movs	r2, #99	; 0x63
 80006be:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = 1;
 80006c6:	003b      	movs	r3, r7
 80006c8:	2201      	movs	r2, #1
 80006ca:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = 8;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2208      	movs	r2, #8
 80006d0:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fe8b 	bl	80003f0 <menuInputService>
	temp_t_year = input.temp_val_ten;
 80006da:	220f      	movs	r2, #15
 80006dc:	18bb      	adds	r3, r7, r2
 80006de:	003a      	movs	r2, r7
 80006e0:	7812      	ldrb	r2, [r2, #0]
 80006e2:	701a      	strb	r2, [r3, #0]
	temp_u_year = input.temp_val_units;
 80006e4:	210e      	movs	r1, #14
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	003a      	movs	r2, r7
 80006ea:	7852      	ldrb	r2, [r2, #1]
 80006ec:	701a      	strb	r2, [r3, #0]

	setDate(temp_t_day, temp_u_day, temp_t_month, temp_u_month, temp_t_year, temp_u_year);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	781c      	ldrb	r4, [r3, #0]
 80006f2:	2311      	movs	r3, #17
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	781a      	ldrb	r2, [r3, #0]
 80006f8:	19bb      	adds	r3, r7, r6
 80006fa:	7819      	ldrb	r1, [r3, #0]
 80006fc:	197b      	adds	r3, r7, r5
 80006fe:	7818      	ldrb	r0, [r3, #0]
 8000700:	250e      	movs	r5, #14
 8000702:	197b      	adds	r3, r7, r5
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	230f      	movs	r3, #15
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	0023      	movs	r3, r4
 8000712:	f000 f9f3 	bl	8000afc <setDate>

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b007      	add	sp, #28
 800071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000720 <displayMenu>:




void displayMenu (TMENU * str_wsk) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	LEDClr();
 8000728:	f001 fb9a 	bl	8001e60 <LEDClr>

	FillLEDArray(LED_buf, 0, 0, 0);
 800072c:	4851      	ldr	r0, [pc, #324]	; (8000874 <displayMenu+0x154>)
 800072e:	2300      	movs	r3, #0
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	f001 fe94 	bl	8002460 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 8000738:	23a2      	movs	r3, #162	; 0xa2
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4b4d      	ldr	r3, [pc, #308]	; (8000874 <displayMenu+0x154>)
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f002 f837 	bl	80027b4 <SPI_SEND_WSBUF>

	button_flag[B_UP]=0;
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <displayMenu+0x158>)
 8000748:	2200      	movs	r2, #0
 800074a:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <displayMenu+0x158>)
 800074e:	2200      	movs	r2, #0
 8000750:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <displayMenu+0x158>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]

	str_wsk->nxt_level = 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	705a      	strb	r2, [r3, #1]
	str_wsk->menu_pos = 0;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	str_wsk->nxt_level = 0;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	705a      	strb	r2, [r3, #1]
	str_wsk->back = 0;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	709a      	strb	r2, [r3, #2]

	uint8_t temp_pos;

	while(!str_wsk->back) {
 8000770:	e077      	b.n	8000862 <displayMenu+0x142>

	if (button_flag[B_UP]) {
 8000772:	4b41      	ldr	r3, [pc, #260]	; (8000878 <displayMenu+0x158>)
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00f      	beq.n	800079c <displayMenu+0x7c>
		button_flag[B_UP]=0;
 800077c:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <displayMenu+0x158>)
 800077e:	2200      	movs	r2, #0
 8000780:	709a      	strb	r2, [r3, #2]
		str_wsk->menu_pos++;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	701a      	strb	r2, [r3, #0]
		if(str_wsk->menu_pos>3) str_wsk->menu_pos=0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d902      	bls.n	800079c <displayMenu+0x7c>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
	}

	if (button_flag[B_DOWN]) {
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <displayMenu+0x158>)
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00f      	beq.n	80007c6 <displayMenu+0xa6>
		button_flag[B_DOWN]=0;
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <displayMenu+0x158>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
		str_wsk->menu_pos--;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	701a      	strb	r2, [r3, #0]
		if(str_wsk->menu_pos>250) str_wsk->menu_pos=3;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2bfa      	cmp	r3, #250	; 0xfa
 80007be:	d902      	bls.n	80007c6 <displayMenu+0xa6>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2203      	movs	r2, #3
 80007c4:	701a      	strb	r2, [r3, #0]
	}


	if (button_flag[B_SET]) {
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <displayMenu+0x158>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <displayMenu+0xbc>
		button_flag[B_SET]=0;
 80007d0:	4b29      	ldr	r3, [pc, #164]	; (8000878 <displayMenu+0x158>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		str_wsk->nxt_level=1;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	705a      	strb	r2, [r3, #1]
	}

	if (temp_pos != str_wsk->menu_pos) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	220f      	movs	r2, #15
 80007e2:	18ba      	adds	r2, r7, r2
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d00d      	beq.n	8000806 <displayMenu+0xe6>
		DisplayLEDStr(main_options[str_wsk->menu_pos]);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	001a      	movs	r2, r3
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <displayMenu+0x15c>)
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	58d3      	ldr	r3, [r2, r3]
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 ff55 	bl	80016a6 <DisplayLEDStr>
		temp_pos = str_wsk->menu_pos;
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	701a      	strb	r2, [r3, #0]
	}


		if(str_wsk->nxt_level) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d026      	beq.n	800085c <displayMenu+0x13c>
			if (str_wsk->menu_pos == p_main_back) return;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d02a      	beq.n	800086c <displayMenu+0x14c>
			if ((str_wsk->configuration) && (str_wsk->menu_pos == p_main_config)) str_wsk->configuration(str_wsk);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <displayMenu+0x110>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <displayMenu+0x110>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	0010      	movs	r0, r2
 800082e:	4798      	blx	r3
			if ((str_wsk->alarm) && (str_wsk->menu_pos == p_main_alarm)) str_wsk->alarm();
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <displayMenu+0x126>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d102      	bne.n	8000846 <displayMenu+0x126>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4798      	blx	r3
			if ((str_wsk->study) && (str_wsk->menu_pos == p_main_study)) str_wsk->study();
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d006      	beq.n	800085c <displayMenu+0x13c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d102      	bne.n	800085c <displayMenu+0x13c>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	4798      	blx	r3
		}
	delay_ms(250);
 800085c:	20fa      	movs	r0, #250	; 0xfa
 800085e:	f000 fd1f 	bl	80012a0 <delay_ms>
	while(!str_wsk->back) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d083      	beq.n	8000772 <displayMenu+0x52>
 800086a:	e000      	b.n	800086e <displayMenu+0x14e>
			if (str_wsk->menu_pos == p_main_back) return;
 800086c:	46c0      	nop			; (mov r8, r8)
	}
}
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000058 	.word	0x20000058
 8000878:	20000050 	.word	0x20000050
 800087c:	20000000 	.word	0x20000000

08000880 <displayConfig>:


void displayConfig (TMENU * str_wsk) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	LEDClr();
 8000888:	f001 faea 	bl	8001e60 <LEDClr>

	FillLEDArray(LED_buf, 0, 0, 0);
 800088c:	484d      	ldr	r0, [pc, #308]	; (80009c4 <displayConfig+0x144>)
 800088e:	2300      	movs	r3, #0
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	f001 fde4 	bl	8002460 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 8000898:	23a2      	movs	r3, #162	; 0xa2
 800089a:	00da      	lsls	r2, r3, #3
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <displayConfig+0x144>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 ff87 	bl	80027b4 <SPI_SEND_WSBUF>

	DisplayLEDStr(config_options[str_wsk->menu_pos]);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	001a      	movs	r2, r3
 80008ac:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <displayConfig+0x148>)
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	58d3      	ldr	r3, [r2, r3]
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fef7 	bl	80016a6 <DisplayLEDStr>

	button_flag[B_UP]=0;
 80008b8:	4b44      	ldr	r3, [pc, #272]	; (80009cc <displayConfig+0x14c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <displayConfig+0x14c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 80008c4:	4b41      	ldr	r3, [pc, #260]	; (80009cc <displayConfig+0x14c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]

	str_wsk->nxt_level = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	705a      	strb	r2, [r3, #1]
	str_wsk->menu_pos = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	str_wsk->nxt_level = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	705a      	strb	r2, [r3, #1]
	str_wsk->back = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	709a      	strb	r2, [r3, #2]

	uint8_t temp_pos;

	while(!str_wsk->back) {
 80008e2:	e066      	b.n	80009b2 <displayConfig+0x132>

		if (button_flag[B_UP]) {
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <displayConfig+0x14c>)
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d012      	beq.n	8000914 <displayConfig+0x94>
			delay_ms(80);
 80008ee:	2050      	movs	r0, #80	; 0x50
 80008f0:	f000 fcd6 	bl	80012a0 <delay_ms>
			button_flag[B_UP]=0;
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <displayConfig+0x14c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	709a      	strb	r2, [r3, #2]
			str_wsk->menu_pos++;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	701a      	strb	r2, [r3, #0]
			if(str_wsk->menu_pos>1) str_wsk->menu_pos=0;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d902      	bls.n	8000914 <displayConfig+0x94>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
		}

		if (button_flag[B_DOWN]) {
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <displayConfig+0x14c>)
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d012      	beq.n	8000944 <displayConfig+0xc4>
			delay_ms(80);
 800091e:	2050      	movs	r0, #80	; 0x50
 8000920:	f000 fcbe 	bl	80012a0 <delay_ms>
			button_flag[B_DOWN]=0;
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <displayConfig+0x14c>)
 8000926:	2200      	movs	r2, #0
 8000928:	705a      	strb	r2, [r3, #1]
			str_wsk->menu_pos--;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	701a      	strb	r2, [r3, #0]
			if(str_wsk->menu_pos>250) str_wsk->menu_pos=1;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2bfa      	cmp	r3, #250	; 0xfa
 800093c:	d902      	bls.n	8000944 <displayConfig+0xc4>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
		}


		if (button_flag[B_SET]) {
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <displayConfig+0x14c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d008      	beq.n	8000960 <displayConfig+0xe0>
			delay_ms(80);
 800094e:	2050      	movs	r0, #80	; 0x50
 8000950:	f000 fca6 	bl	80012a0 <delay_ms>
			button_flag[B_SET]=0;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <displayConfig+0x14c>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
			str_wsk->nxt_level=1;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	705a      	strb	r2, [r3, #1]
		}

		if (temp_pos != str_wsk->menu_pos) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	220f      	movs	r2, #15
 8000966:	18ba      	adds	r2, r7, r2
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d00d      	beq.n	800098a <displayConfig+0x10a>
			DisplayLEDStr(config_options[str_wsk->menu_pos]);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	001a      	movs	r2, r3
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <displayConfig+0x148>)
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	58d3      	ldr	r3, [r2, r3]
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fe93 	bl	80016a6 <DisplayLEDStr>
			temp_pos = str_wsk->menu_pos;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	701a      	strb	r2, [r3, #0]
		}


			if(str_wsk->nxt_level) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	785b      	ldrb	r3, [r3, #1]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00c      	beq.n	80009ac <displayConfig+0x12c>
				if (str_wsk->menu_pos == p_conf_back) return;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d010      	beq.n	80009bc <displayConfig+0x13c>
				if (str_wsk->menu_pos == p_conf_time) {selectTime(); str_wsk->back=1;}
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <displayConfig+0x12c>
 80009a2:	f7ff fde7 	bl	8000574 <selectTime>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	709a      	strb	r2, [r3, #2]

			}
			delay_ms(250);
 80009ac:	20fa      	movs	r0, #250	; 0xfa
 80009ae:	f000 fc77 	bl	80012a0 <delay_ms>
	while(!str_wsk->back) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	789b      	ldrb	r3, [r3, #2]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d094      	beq.n	80008e4 <displayConfig+0x64>
 80009ba:	e000      	b.n	80009be <displayConfig+0x13e>
				if (str_wsk->menu_pos == p_conf_back) return;
 80009bc:	46c0      	nop			; (mov r8, r8)
		}
}
 80009be:	46bd      	mov	sp, r7
 80009c0:	b004      	add	sp, #16
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000058 	.word	0x20000058
 80009c8:	20000010 	.word	0x20000010
 80009cc:	20000050 	.word	0x20000050

080009d0 <displayAlarm>:




void displayAlarm (TMENU * str_wsk) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	// To be done

}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <displayStudy>:

void displayStudy (TMENU * str_wsk) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	// To be done

}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <decToBcd>:


uint8_t decToBcd(uint8_t val) {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
  return ((val/10*16) + (val%10));
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	210a      	movs	r1, #10
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fb7e 	bl	8000104 <__udivsi3>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	b2dc      	uxtb	r4, r3
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	210a      	movs	r1, #10
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff fbfa 	bl	8000210 <__aeabi_uidivmod>
 8000a1c:	000b      	movs	r3, r1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	18e3      	adds	r3, r4, r3
 8000a22:	b2db      	uxtb	r3, r3
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b003      	add	sp, #12
 8000a2a:	bd90      	pop	{r4, r7, pc}

08000a2c <setTime>:

#define TEMP_TR_MASK 0x7f7f7f
#define TEMP_DR_MASK 0xffff3f


void setTime(uint8_t t_hour, uint8_t u_hour, uint8_t t_minute, uint8_t u_minute) {
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0005      	movs	r5, r0
 8000a34:	000c      	movs	r4, r1
 8000a36:	0010      	movs	r0, r2
 8000a38:	0019      	movs	r1, r3
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	1c2a      	adds	r2, r5, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	1c22      	adds	r2, r4, #0
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	1d7b      	adds	r3, r7, #5
 8000a48:	1c02      	adds	r2, r0, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	1c0a      	adds	r2, r1, #0
 8000a50:	701a      	strb	r2, [r3, #0]
	if(t_hour > 2 || u_hour > 9 || t_minute > 5 || u_minute > 9) return;	// Verify the input
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d847      	bhi.n	8000aea <setTime+0xbe>
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b09      	cmp	r3, #9
 8000a60:	d843      	bhi.n	8000aea <setTime+0xbe>
 8000a62:	1d7b      	adds	r3, r7, #5
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	d83f      	bhi.n	8000aea <setTime+0xbe>
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	d83b      	bhi.n	8000aea <setTime+0xbe>

	uint32_t TR_TEMP = 0;	// Temporary RTC TR register
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]


	// Load appropriate values to the temporary time register (TR)
	TR_TEMP |= (t_hour<<20);
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	051b      	lsls	r3, r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
	TR_TEMP |= (u_hour<<16);
 8000a84:	1dbb      	adds	r3, r7, #6
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	041b      	lsls	r3, r3, #16
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
	TR_TEMP |= (t_minute<<12);
 8000a92:	1d7b      	adds	r3, r7, #5
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	031b      	lsls	r3, r3, #12
 8000a98:	001a      	movs	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
	TR_TEMP |= (u_minute<<8);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]

	// RTC write protection keyes
	RTC->WPR = 0xca;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <setTime+0xc8>)
 8000ab0:	22ca      	movs	r2, #202	; 0xca
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <setTime+0xc8>)
 8000ab6:	2253      	movs	r2, #83	; 0x53
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24

	// Enter clock init mode
	RTC->ICSR |= RTC_ICSR_INIT;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <setTime+0xc8>)
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <setTime+0xc8>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	60da      	str	r2, [r3, #12]
	while ((RTC->ICSR & RTC_ICSR_INITF) == 0);	// Wait until ready to update
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <setTime+0xc8>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	2240      	movs	r2, #64	; 0x40
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d0fa      	beq.n	8000ac8 <setTime+0x9c>

	RTC->TR = (TR_TEMP & TEMP_TR_MASK);		// Update clock registers
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <setTime+0xc8>)
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <setTime+0xcc>)
 8000ad8:	400a      	ands	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]

	RTC->ICSR &= ~RTC_ICSR_INIT;	// Disable RTC init mode
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <setTime+0xc8>)
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <setTime+0xc8>)
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	e000      	b.n	8000aec <setTime+0xc0>
	if(t_hour > 2 || u_hour > 9 || t_minute > 5 || u_minute > 9) return;	// Verify the input
 8000aea:	46c0      	nop			; (mov r8, r8)

}
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bdb0      	pop	{r4, r5, r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40002800 	.word	0x40002800
 8000af8:	007f7f7f 	.word	0x007f7f7f

08000afc <setDate>:




void setDate(uint8_t t_day, uint8_t u_day, uint8_t t_month, uint8_t u_month, uint8_t t_year, uint8_t u_year) {
 8000afc:	b5b0      	push	{r4, r5, r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0005      	movs	r5, r0
 8000b04:	000c      	movs	r4, r1
 8000b06:	0010      	movs	r0, r2
 8000b08:	0019      	movs	r1, r3
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	1c2a      	adds	r2, r5, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	1c22      	adds	r2, r4, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1d7b      	adds	r3, r7, #5
 8000b18:	1c02      	adds	r2, r0, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	1c0a      	adds	r2, r1, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	if(t_day > 3 || u_day > 9 || t_month > 1 || u_month > 9 || t_year>9 || u_year>9) return;	// Verify input
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d85f      	bhi.n	8000bea <setDate+0xee>
 8000b2a:	1dbb      	adds	r3, r7, #6
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b09      	cmp	r3, #9
 8000b30:	d85b      	bhi.n	8000bea <setDate+0xee>
 8000b32:	1d7b      	adds	r3, r7, #5
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d857      	bhi.n	8000bea <setDate+0xee>
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b09      	cmp	r3, #9
 8000b40:	d853      	bhi.n	8000bea <setDate+0xee>
 8000b42:	2320      	movs	r3, #32
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b09      	cmp	r3, #9
 8000b4a:	d84e      	bhi.n	8000bea <setDate+0xee>
 8000b4c:	2324      	movs	r3, #36	; 0x24
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b09      	cmp	r3, #9
 8000b54:	d849      	bhi.n	8000bea <setDate+0xee>

	uint32_t DR_TEMP = 0;	// Temporary RTC DR register
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]

	// Load appropriate values to the temporary data register (DR)
	DR_TEMP |= (t_day<<4);
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	001a      	movs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (u_day<<0);
 8000b68:	1dbb      	adds	r3, r7, #6
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (t_month<<12);
 8000b72:	1d7b      	adds	r3, r7, #5
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	031b      	lsls	r3, r3, #12
 8000b78:	001a      	movs	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (u_month<<8);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	001a      	movs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (t_year<<20);
 8000b8e:	2320      	movs	r3, #32
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	051b      	lsls	r3, r3, #20
 8000b96:	001a      	movs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (u_year<<16);
 8000b9e:	2324      	movs	r3, #36	; 0x24
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	041b      	lsls	r3, r3, #16
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]

	// RTC write protection keyes
	RTC->WPR = 0xca;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <setDate+0xf8>)
 8000bb0:	22ca      	movs	r2, #202	; 0xca
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <setDate+0xf8>)
 8000bb6:	2253      	movs	r2, #83	; 0x53
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24

	// Enter clock init mode
	RTC->ICSR |= RTC_ICSR_INIT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <setDate+0xf8>)
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <setDate+0xf8>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	60da      	str	r2, [r3, #12]
	while ((RTC->ICSR & RTC_ICSR_INITF) == 0);	// Wait until ready to update
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <setDate+0xf8>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d0fa      	beq.n	8000bc8 <setDate+0xcc>

	RTC->DR = (DR_TEMP & TEMP_DR_MASK);		// Update clock registers
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <setDate+0xf8>)
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <setDate+0xfc>)
 8000bd8:	400a      	ands	r2, r1
 8000bda:	605a      	str	r2, [r3, #4]

	RTC->ICSR &= ~RTC_ICSR_INIT;	// Disable RTC init mode
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <setDate+0xf8>)
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <setDate+0xf8>)
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	438a      	bics	r2, r1
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	e000      	b.n	8000bec <setDate+0xf0>
	if(t_day > 3 || u_day > 9 || t_month > 1 || u_month > 9 || t_year>9 || u_year>9) return;	// Verify input
 8000bea:	46c0      	nop			; (mov r8, r8)

}
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b004      	add	sp, #16
 8000bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40002800 	.word	0x40002800
 8000bf8:	00ffff3f 	.word	0x00ffff3f

08000bfc <TIM16_IRQHandler>:




__attribute__((interrupt)) void TIM16_IRQHandler(void)	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	if (TIM16->SR & TIM_SR_CC1IF)	{
 8000c00:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <TIM16_IRQHandler+0xf8>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	2202      	movs	r2, #2
 8000c06:	4013      	ands	r3, r2
 8000c08:	d070      	beq.n	8000cec <TIM16_IRQHandler+0xf0>
		TIM16->SR &= ~TIM_SR_CC1IF;	// Clear flag
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <TIM16_IRQHandler+0xf8>)
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <TIM16_IRQHandler+0xf8>)
 8000c10:	2102      	movs	r1, #2
 8000c12:	438a      	bics	r2, r1
 8000c14:	611a      	str	r2, [r3, #16]
		TIM16->EGR |= TIM_EGR_UG;	// Reinitialise the counter
 8000c16:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <TIM16_IRQHandler+0xf8>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <TIM16_IRQHandler+0xf8>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	615a      	str	r2, [r3, #20]

		while((RTC->ICSR & RTC_ICSR_RSF)==0);	// See if the data was updated by the RTC
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2220      	movs	r2, #32
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d0fa      	beq.n	8000c24 <TIM16_IRQHandler+0x28>
		hour_t = ((RTC->TR & RTC_TR_HT)>>20);
 8000c2e:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0d1b      	lsrs	r3, r3, #20
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2203      	movs	r2, #3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <TIM16_IRQHandler+0x100>)
 8000c3e:	701a      	strb	r2, [r3, #0]
		hour_u = ((RTC->TR & RTC_TR_HU)>>16);
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0c1b      	lsrs	r3, r3, #16
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	220f      	movs	r2, #15
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <TIM16_IRQHandler+0x104>)
 8000c50:	701a      	strb	r2, [r3, #0]
		minute_t = ((RTC->TR & RTC_TR_MNT)>>12);
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	0b1b      	lsrs	r3, r3, #12
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <TIM16_IRQHandler+0x108>)
 8000c62:	701a      	strb	r2, [r3, #0]
		minute_u = ((RTC->TR & RTC_TR_MNU)>>8);
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	4013      	ands	r3, r2
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <TIM16_IRQHandler+0x10c>)
 8000c74:	701a      	strb	r2, [r3, #0]


		year_t = ((RTC->DR & RTC_DR_YT)>>20);
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	0d1b      	lsrs	r3, r3, #20
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	220f      	movs	r2, #15
 8000c80:	4013      	ands	r3, r2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <TIM16_IRQHandler+0x110>)
 8000c86:	701a      	strb	r2, [r3, #0]
		year_u = ((RTC->DR & RTC_DR_YU)>>16);
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	220f      	movs	r2, #15
 8000c92:	4013      	ands	r3, r2
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <TIM16_IRQHandler+0x114>)
 8000c98:	701a      	strb	r2, [r3, #0]
		month_t = ((RTC->DR & RTC_DR_MT)>>12);
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	0b1b      	lsrs	r3, r3, #12
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <TIM16_IRQHandler+0x118>)
 8000caa:	701a      	strb	r2, [r3, #0]
		month_u = ((RTC->DR & RTC_DR_MU)>>8);
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <TIM16_IRQHandler+0x11c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
		day_t = ((RTC->DR & RTC_DR_DT)>>4);
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	4013      	ands	r3, r2
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <TIM16_IRQHandler+0x120>)
 8000cce:	701a      	strb	r2, [r3, #0]
		day_u = ((RTC->DR & RTC_DR_DU)>>0);
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <TIM16_IRQHandler+0x124>)
 8000cde:	701a      	strb	r2, [r3, #0]

		RTC->ICSR &= ~RTC_ICSR_RSF;		// Clear the SR update bit
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <TIM16_IRQHandler+0xfc>)
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	438a      	bics	r2, r1
 8000cea:	60da      	str	r2, [r3, #12]


	}
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40014400 	.word	0x40014400
 8000cf8:	40002800 	.word	0x40002800
 8000cfc:	20000568 	.word	0x20000568
 8000d00:	2000004f 	.word	0x2000004f
 8000d04:	2000004e 	.word	0x2000004e
 8000d08:	20000054 	.word	0x20000054
 8000d0c:	20000056 	.word	0x20000056
 8000d10:	2000004d 	.word	0x2000004d
 8000d14:	20000569 	.word	0x20000569
 8000d18:	20000057 	.word	0x20000057
 8000d1c:	2000004c 	.word	0x2000004c
 8000d20:	20000053 	.word	0x20000053

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <SystemCFG>:





void SystemCFG (void)	{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

	// *** Configure System Clock (48MHz for each system BUS) ***
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_4;	// Clear (as it's 1 by default)
 8000d5e:	4bf7      	ldr	r3, [pc, #988]	; (800113c <SystemCFG+0x3e4>)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4bf6      	ldr	r3, [pc, #984]	; (800113c <SystemCFG+0x3e4>)
 8000d64:	49f6      	ldr	r1, [pc, #984]	; (8001140 <SystemCFG+0x3e8>)
 8000d66:	400a      	ands	r2, r1
 8000d68:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_2 | RCC_PLLCFGR_PLLN_3;	// Set PLLN Mult. for 12 (0000 1100)
 8000d6a:	4bf4      	ldr	r3, [pc, #976]	; (800113c <SystemCFG+0x3e4>)
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	4bf3      	ldr	r3, [pc, #972]	; (800113c <SystemCFG+0x3e4>)
 8000d70:	21c0      	movs	r1, #192	; 0xc0
 8000d72:	0109      	lsls	r1, r1, #4
 8000d74:	430a      	orrs	r2, r1
 8000d76:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_0;	// Set PLLR Div. for 2 (001)
 8000d78:	4bf0      	ldr	r3, [pc, #960]	; (800113c <SystemCFG+0x3e4>)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	4bef      	ldr	r3, [pc, #956]	; (800113c <SystemCFG+0x3e4>)
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	0589      	lsls	r1, r1, #22
 8000d82:	430a      	orrs	r2, r1
 8000d84:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_0 | RCC_PLLCFGR_PLLSRC_1;	// Fpllin = HSE
 8000d86:	4bed      	ldr	r3, [pc, #948]	; (800113c <SystemCFG+0x3e4>)
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	4bec      	ldr	r3, [pc, #944]	; (800113c <SystemCFG+0x3e4>)
 8000d8c:	2103      	movs	r1, #3
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;	// Enable output of the PLL
 8000d92:	4bea      	ldr	r3, [pc, #936]	; (800113c <SystemCFG+0x3e4>)
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	4be9      	ldr	r3, [pc, #932]	; (800113c <SystemCFG+0x3e4>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0549      	lsls	r1, r1, #21
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_SW_1;	// PLLRCLK for SYSCLK
 8000da0:	4be6      	ldr	r3, [pc, #920]	; (800113c <SystemCFG+0x3e4>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	4be5      	ldr	r3, [pc, #916]	; (800113c <SystemCFG+0x3e4>)
 8000da6:	2102      	movs	r1, #2
 8000da8:	430a      	orrs	r2, r1
 8000daa:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN;
 8000dac:	4be3      	ldr	r3, [pc, #908]	; (800113c <SystemCFG+0x3e4>)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	4be2      	ldr	r3, [pc, #904]	; (800113c <SystemCFG+0x3e4>)
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	0249      	lsls	r1, r1, #9
 8000db6:	430a      	orrs	r2, r1
 8000db8:	60da      	str	r2, [r3, #12]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8000dba:	4be2      	ldr	r3, [pc, #904]	; (8001144 <SystemCFG+0x3ec>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4be1      	ldr	r3, [pc, #900]	; (8001144 <SystemCFG+0x3ec>)
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 8000dc6:	4bdd      	ldr	r3, [pc, #884]	; (800113c <SystemCFG+0x3e4>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4bdc      	ldr	r3, [pc, #880]	; (800113c <SystemCFG+0x3e4>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0249      	lsls	r1, r1, #9
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	4bd9      	ldr	r3, [pc, #868]	; (800113c <SystemCFG+0x3e4>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	029b      	lsls	r3, r3, #10
 8000dde:	4013      	ands	r3, r2
 8000de0:	d0f9      	beq.n	8000dd6 <SystemCFG+0x7e>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 8000de2:	4bd6      	ldr	r3, [pc, #856]	; (800113c <SystemCFG+0x3e4>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4bd5      	ldr	r3, [pc, #852]	; (800113c <SystemCFG+0x3e4>)
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0449      	lsls	r1, r1, #17
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	4bd2      	ldr	r3, [pc, #840]	; (800113c <SystemCFG+0x3e4>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	049b      	lsls	r3, r3, #18
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d1f9      	bne.n	8000df2 <SystemCFG+0x9a>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	4bce      	ldr	r3, [pc, #824]	; (800113c <SystemCFG+0x3e4>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2238      	movs	r2, #56	; 0x38
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d1f9      	bne.n	8000e00 <SystemCFG+0xa8>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 8000e0c:	4bcb      	ldr	r3, [pc, #812]	; (800113c <SystemCFG+0x3e4>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4bca      	ldr	r3, [pc, #808]	; (800113c <SystemCFG+0x3e4>)
 8000e12:	49cd      	ldr	r1, [pc, #820]	; (8001148 <SystemCFG+0x3f0>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure GPIO: Techled, LED Display, BUZZ ***
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN | RCC_IOPENR_GPIOCEN | RCC_IOPENR_GPIODEN | RCC_IOPENR_GPIOFEN;	// GPIO: ABCDF
 8000e18:	4bc8      	ldr	r3, [pc, #800]	; (800113c <SystemCFG+0x3e4>)
 8000e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1c:	4bc7      	ldr	r3, [pc, #796]	; (800113c <SystemCFG+0x3e4>)
 8000e1e:	212f      	movs	r1, #47	; 0x2f
 8000e20:	430a      	orrs	r2, r1
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34

	GPIOB->MODER = GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
 8000e24:	4bc9      	ldr	r3, [pc, #804]	; (800114c <SystemCFG+0x3f4>)
 8000e26:	4aca      	ldr	r2, [pc, #808]	; (8001150 <SystemCFG+0x3f8>)
 8000e28:	601a      	str	r2, [r3, #0]
					GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 |
					GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
					GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0;	// PB0-PB14: Output

	// LED Cathodes
	GPIOC->ODR |= (GPIO_ODR_OD6 | GPIO_ODR_OD7);
 8000e2a:	4bca      	ldr	r3, [pc, #808]	; (8001154 <SystemCFG+0x3fc>)
 8000e2c:	695a      	ldr	r2, [r3, #20]
 8000e2e:	4bc9      	ldr	r3, [pc, #804]	; (8001154 <SystemCFG+0x3fc>)
 8000e30:	21c0      	movs	r1, #192	; 0xc0
 8000e32:	430a      	orrs	r2, r1
 8000e34:	615a      	str	r2, [r3, #20]
	GPIOC->MODER &= ~(GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);	// PC6-PC7: Output
 8000e36:	4bc7      	ldr	r3, [pc, #796]	; (8001154 <SystemCFG+0x3fc>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4bc6      	ldr	r3, [pc, #792]	; (8001154 <SystemCFG+0x3fc>)
 8000e3c:	49c6      	ldr	r1, [pc, #792]	; (8001158 <SystemCFG+0x400>)
 8000e3e:	400a      	ands	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
	GPIOD->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 8000e42:	4bc6      	ldr	r3, [pc, #792]	; (800115c <SystemCFG+0x404>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	4bc5      	ldr	r3, [pc, #788]	; (800115c <SystemCFG+0x404>)
 8000e48:	210f      	movs	r1, #15
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	615a      	str	r2, [r3, #20]
	GPIOD->MODER &= ~(GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1 | GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);	// PD0-PD3: Output
 8000e4e:	4bc3      	ldr	r3, [pc, #780]	; (800115c <SystemCFG+0x404>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4bc2      	ldr	r3, [pc, #776]	; (800115c <SystemCFG+0x404>)
 8000e54:	21aa      	movs	r1, #170	; 0xaa
 8000e56:	438a      	bics	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
	// Techled, BUZZ
	GPIOA->MODER &= ~(GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);	// PA6-PA7: Output
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	23a0      	movs	r3, #160	; 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	49bc      	ldr	r1, [pc, #752]	; (8001158 <SystemCFG+0x400>)
 8000e66:	400a      	ands	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure DMA ***
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000e6a:	4bb4      	ldr	r3, [pc, #720]	; (800113c <SystemCFG+0x3e4>)
 8000e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e6e:	4bb3      	ldr	r3, [pc, #716]	; (800113c <SystemCFG+0x3e4>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APBENR2 |= RCC_APBENR2_SPI1EN;
 8000e76:	4bb1      	ldr	r3, [pc, #708]	; (800113c <SystemCFG+0x3e4>)
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	4bb0      	ldr	r3, [pc, #704]	; (800113c <SystemCFG+0x3e4>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0149      	lsls	r1, r1, #5
 8000e80:	430a      	orrs	r2, r1
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e84:	2009      	movs	r0, #9
 8000e86:	f7ff ff4d 	bl	8000d24 <__NVIC_EnableIRQ>

	// Channel 1 config. (SPI1_TX)
	SPI1->CR2 |= SPI_CR2_TXDMAEN;	// Enable Tx in DMA mode
 8000e8a:	4bb5      	ldr	r3, [pc, #724]	; (8001160 <SystemCFG+0x408>)
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4bb4      	ldr	r3, [pc, #720]	; (8001160 <SystemCFG+0x408>)
 8000e90:	2102      	movs	r1, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CNDTR = (WS_NUMBER * 24);	// WS_NUMBER * 3 colours * 8 bits/colour
 8000e96:	4bb3      	ldr	r3, [pc, #716]	; (8001164 <SystemCFG+0x40c>)
 8000e98:	22a2      	movs	r2, #162	; 0xa2
 8000e9a:	00d2      	lsls	r2, r2, #3
 8000e9c:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR |= DMA_CCR_PL_0 | DMA_CCR_PL_1;	// Channel 1 priority level: Very High (no time break allowed when WS data is being sent)
 8000e9e:	4bb1      	ldr	r3, [pc, #708]	; (8001164 <SystemCFG+0x40c>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4bb0      	ldr	r3, [pc, #704]	; (8001164 <SystemCFG+0x40c>)
 8000ea4:	21c0      	movs	r1, #192	; 0xc0
 8000ea6:	0189      	lsls	r1, r1, #6
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
	//	DMA1_Channel1->CCR |= DMA_CCR_MSIZE;	// Memory Size: 8-bit	LEAVE THE COMMENT
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;	// Peripheral Size: 16-bit (16-bit SPI data register)
 8000eac:	4bad      	ldr	r3, [pc, #692]	; (8001164 <SystemCFG+0x40c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4bac      	ldr	r3, [pc, #688]	; (8001164 <SystemCFG+0x40c>)
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	0049      	lsls	r1, r1, #1
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;		// Memory increment mode	(increments the LED data array)
 8000eba:	4baa      	ldr	r3, [pc, #680]	; (8001164 <SystemCFG+0x40c>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4ba9      	ldr	r3, [pc, #676]	; (8001164 <SystemCFG+0x40c>)
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_DIR;		// Read from Memory to Peripheral (DIR=1)
 8000ec6:	4ba7      	ldr	r3, [pc, #668]	; (8001164 <SystemCFG+0x40c>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4ba6      	ldr	r3, [pc, #664]	; (8001164 <SystemCFG+0x40c>)
 8000ecc:	2110      	movs	r1, #16
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
//	DMA1_Channel1->CCR |= DMA_CCR_TCIE | DMA_CCR_TEIE;		// Transfer complete interrupt, transfer error enabled
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;		// Circular mode ON
 8000ed2:	4ba4      	ldr	r3, [pc, #656]	; (8001164 <SystemCFG+0x40c>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4ba3      	ldr	r3, [pc, #652]	; (8001164 <SystemCFG+0x40c>)
 8000ed8:	2120      	movs	r1, #32
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
//	DMA1_Channel1->CMAR = (uint32_t)DMA_LED_buf;	// Memory address is the LED array
	DMA1_Channel1->CPAR = (uint32_t)&SPI1->DR;	// Peripheral address is the SPI data register
 8000ede:	4ba1      	ldr	r3, [pc, #644]	; (8001164 <SystemCFG+0x40c>)
 8000ee0:	4aa1      	ldr	r2, [pc, #644]	; (8001168 <SystemCFG+0x410>)
 8000ee2:	609a      	str	r2, [r3, #8]
	// *********************************

	// *** Configure DMAMUX ***
	DMAMUX1_Channel1->CCR |= DMAMUX_CxCR_DMAREQ_ID_0 | DMAMUX_CxCR_DMAREQ_ID_4;			// DMA request identification: SPI1_TX (17)
 8000ee4:	4ba1      	ldr	r3, [pc, #644]	; (800116c <SystemCFG+0x414>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4ba0      	ldr	r3, [pc, #640]	; (800116c <SystemCFG+0x414>)
 8000eea:	2111      	movs	r1, #17
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
	// *********************************

	// *** Configure TIM14 for delay subroutine ***
	NVIC_EnableIRQ(TIM14_IRQn);
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff ff17 	bl	8000d24 <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_TIM14EN;	// Enable TIM14 clock
 8000ef6:	4b91      	ldr	r3, [pc, #580]	; (800113c <SystemCFG+0x3e4>)
 8000ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efa:	4b90      	ldr	r3, [pc, #576]	; (800113c <SystemCFG+0x3e4>)
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0209      	lsls	r1, r1, #8
 8000f00:	430a      	orrs	r2, r1
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
	TIM14->CCMR1 |= TIM_CCMR1_OC2M_0;	// Set channel 1 to active level on match
 8000f04:	4b9a      	ldr	r3, [pc, #616]	; (8001170 <SystemCFG+0x418>)
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	4b99      	ldr	r3, [pc, #612]	; (8001170 <SystemCFG+0x418>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	0149      	lsls	r1, r1, #5
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	619a      	str	r2, [r3, #24]
	TIM14->DIER |= TIM_DIER_CC1IE;
 8000f12:	4b97      	ldr	r3, [pc, #604]	; (8001170 <SystemCFG+0x418>)
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	4b96      	ldr	r3, [pc, #600]	; (8001170 <SystemCFG+0x418>)
 8000f18:	2102      	movs	r1, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	60da      	str	r2, [r3, #12]
	TIM14->PSC = 47999;	/// 1000 Hz	(psc = 47999), F_CPU = 48MHz
 8000f1e:	4b94      	ldr	r3, [pc, #592]	; (8001170 <SystemCFG+0x418>)
 8000f20:	4a94      	ldr	r2, [pc, #592]	; (8001174 <SystemCFG+0x41c>)
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
	// *********************************


	// *** Configure TIM15 for Segment Multiplexing ***
	NVIC_EnableIRQ(TIM15_IRQn);
 8000f24:	2014      	movs	r0, #20
 8000f26:	f7ff fefd 	bl	8000d24 <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_TIM15EN;	// Enable TIM15 clock
 8000f2a:	4b84      	ldr	r3, [pc, #528]	; (800113c <SystemCFG+0x3e4>)
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2e:	4b83      	ldr	r3, [pc, #524]	; (800113c <SystemCFG+0x3e4>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	0249      	lsls	r1, r1, #9
 8000f34:	430a      	orrs	r2, r1
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
	TIM15->CCMR1 |= TIM_CCMR1_OC2M_0;	// Set channel 1 to active level on match
 8000f38:	4b8f      	ldr	r3, [pc, #572]	; (8001178 <SystemCFG+0x420>)
 8000f3a:	699a      	ldr	r2, [r3, #24]
 8000f3c:	4b8e      	ldr	r3, [pc, #568]	; (8001178 <SystemCFG+0x420>)
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	0149      	lsls	r1, r1, #5
 8000f42:	430a      	orrs	r2, r1
 8000f44:	619a      	str	r2, [r3, #24]
	TIM15->DIER |= TIM_DIER_CC1IE;
 8000f46:	4b8c      	ldr	r3, [pc, #560]	; (8001178 <SystemCFG+0x420>)
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	4b8b      	ldr	r3, [pc, #556]	; (8001178 <SystemCFG+0x420>)
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	60da      	str	r2, [r3, #12]
	TIM15->PSC = 1;	/// 1000 Hz	(psc = 47999), F_CPU = 48MHz
 8000f52:	4b89      	ldr	r3, [pc, #548]	; (8001178 <SystemCFG+0x420>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
	TIM15->CR1 |= TIM_CR1_CEN;	// Counter enable
 8000f58:	4b87      	ldr	r3, [pc, #540]	; (8001178 <SystemCFG+0x420>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b86      	ldr	r3, [pc, #536]	; (8001178 <SystemCFG+0x420>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure RTC Clock ***
	RCC->APBENR1 |= RCC_APBENR1_RTCAPBEN | RCC_APBENR1_PWREN;
 8000f64:	4b75      	ldr	r3, [pc, #468]	; (800113c <SystemCFG+0x3e4>)
 8000f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f68:	4b74      	ldr	r3, [pc, #464]	; (800113c <SystemCFG+0x3e4>)
 8000f6a:	4984      	ldr	r1, [pc, #528]	; (800117c <SystemCFG+0x424>)
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
	PWR->CR1 |= PWR_CR1_DBP;	// Disable RTC write protection
 8000f70:	4b83      	ldr	r3, [pc, #524]	; (8001180 <SystemCFG+0x428>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b82      	ldr	r3, [pc, #520]	; (8001180 <SystemCFG+0x428>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	0049      	lsls	r1, r1, #1
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
	RCC->BDCR |= RCC_BDCR_LSEON;	// LSE eabled
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	; (800113c <SystemCFG+0x3e4>)
 8000f80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <SystemCFG+0x3e4>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
	while(!(RCC->BDCR & RCC_BDCR_LSERDY));	// Wait for LSE ready
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	; (800113c <SystemCFG+0x3e4>)
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	2202      	movs	r2, #2
 8000f92:	4013      	ands	r3, r2
 8000f94:	d0fa      	beq.n	8000f8c <SystemCFG+0x234>
	RCC->BDCR |= RCC_BDCR_RTCSEL_0 | RCC_BDCR_RTCEN;	// LSE for the RTC, RTC enable
 8000f96:	4b69      	ldr	r3, [pc, #420]	; (800113c <SystemCFG+0x3e4>)
 8000f98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f9a:	4b68      	ldr	r3, [pc, #416]	; (800113c <SystemCFG+0x3e4>)
 8000f9c:	2181      	movs	r1, #129	; 0x81
 8000f9e:	0209      	lsls	r1, r1, #8
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	65da      	str	r2, [r3, #92]	; 0x5c


	// RTC CALIBRATION PROCESS
	// Update RTC_PRER register
	uint32_t tmp_prer = RTC->PRER;
 8000fa4:	4b77      	ldr	r3, [pc, #476]	; (8001184 <SystemCFG+0x42c>)
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	607b      	str	r3, [r7, #4]
	tmp_prer &= ~(0x7f7fff);		// Set zeros to the tmp_pres Prediv_A and Prediv_S register
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a76      	ldr	r2, [pc, #472]	; (8001188 <SystemCFG+0x430>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	607b      	str	r3, [r7, #4]
	tmp_prer |= (PREDIV_A<<16);		// SET PREDIV_A [val: 0-127]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	22fe      	movs	r2, #254	; 0xfe
 8000fb6:	03d2      	lsls	r2, r2, #15
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	607b      	str	r3, [r7, #4]
	tmp_prer |= PREDIV_S;		// SET PREDIV_S [val: 0-32767]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	22fb      	movs	r2, #251	; 0xfb
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	607b      	str	r3, [r7, #4]
	RTC->WPR = 0xca;
 8000fc4:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <SystemCFG+0x42c>)
 8000fc6:	22ca      	movs	r2, #202	; 0xca
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;	// Write protection disabled
 8000fca:	4b6e      	ldr	r3, [pc, #440]	; (8001184 <SystemCFG+0x42c>)
 8000fcc:	2253      	movs	r2, #83	; 0x53
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
	// Enter clock init mode
	RTC->ICSR |= RTC_ICSR_INIT;
 8000fd0:	4b6c      	ldr	r3, [pc, #432]	; (8001184 <SystemCFG+0x42c>)
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <SystemCFG+0x42c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]
	while ((RTC->ICSR & RTC_ICSR_INITF) == 0);	// Wait until ready to update
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	4b69      	ldr	r3, [pc, #420]	; (8001184 <SystemCFG+0x42c>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d0fa      	beq.n	8000fde <SystemCFG+0x286>
	RTC->PRER = tmp_prer;		// Update PRER register
 8000fe8:	4b66      	ldr	r3, [pc, #408]	; (8001184 <SystemCFG+0x42c>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	611a      	str	r2, [r3, #16]
	RTC->ICSR &= ~RTC_ICSR_INIT;	// Disable RTC init mode
 8000fee:	4b65      	ldr	r3, [pc, #404]	; (8001184 <SystemCFG+0x42c>)
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	4b64      	ldr	r3, [pc, #400]	; (8001184 <SystemCFG+0x42c>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	60da      	str	r2, [r3, #12]

	// Update RTC_CALR register
	uint32_t tmp_calr = RTC->CALR;
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <SystemCFG+0x42c>)
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	603b      	str	r3, [r7, #0]
	tmp_calr &= ~(0x81ff);	// CALP and CALM mask (setting to zero)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4a62      	ldr	r2, [pc, #392]	; (800118c <SystemCFG+0x434>)
 8001004:	4013      	ands	r3, r2
 8001006:	603b      	str	r3, [r7, #0]
	tmp_calr |= (CALP<<15);	// SET CALP [val: 0-1]
	tmp_calr |= (CALM);		// SET CALM [val: 0-511]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	4a61      	ldr	r2, [pc, #388]	; (8001190 <SystemCFG+0x438>)
 800100c:	4313      	orrs	r3, r2
 800100e:	603b      	str	r3, [r7, #0]
	RTC->WPR = 0xca;
 8001010:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <SystemCFG+0x42c>)
 8001012:	22ca      	movs	r2, #202	; 0xca
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;	// Write protection disabled
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <SystemCFG+0x42c>)
 8001018:	2253      	movs	r2, #83	; 0x53
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->CALR = tmp_calr;	// Update CALR resgister
 800101c:	4b59      	ldr	r3, [pc, #356]	; (8001184 <SystemCFG+0x42c>)
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
	RTC->CR |= RTC_CR_COSEL;	// F_calibration = 1Hz
	GPIOA->MODER &= ~GPIO_MODER_MODE4_1;
	RTC->CR |= RTC_CR_OUT2EN;	// RTC clock available on PA4 - RTC_OUT2
	#endif
	#if (!RTC_OSC_CALIB_OUTPUT_EN)
	RTC->CR &= ~RTC_CR_COE;	// Calibration output disbled
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <SystemCFG+0x42c>)
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	4b57      	ldr	r3, [pc, #348]	; (8001184 <SystemCFG+0x42c>)
 8001028:	495a      	ldr	r1, [pc, #360]	; (8001194 <SystemCFG+0x43c>)
 800102a:	400a      	ands	r2, r1
 800102c:	619a      	str	r2, [r3, #24]
	RTC->CR &= ~RTC_CR_COSEL;	// F_calibration 1Hz disabled
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <SystemCFG+0x42c>)
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	4b54      	ldr	r3, [pc, #336]	; (8001184 <SystemCFG+0x42c>)
 8001034:	4958      	ldr	r1, [pc, #352]	; (8001198 <SystemCFG+0x440>)
 8001036:	400a      	ands	r2, r1
 8001038:	619a      	str	r2, [r3, #24]
	GPIOA->MODER |= GPIO_MODER_MODE4_1;
 800103a:	23a0      	movs	r3, #160	; 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	23a0      	movs	r3, #160	; 0xa0
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	0089      	lsls	r1, r1, #2
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
	RTC->CR &= ~RTC_CR_OUT2EN;	// RTC clock disabled on PA4 - RTC_OUT2
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <SystemCFG+0x42c>)
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <SystemCFG+0x42c>)
 8001052:	0052      	lsls	r2, r2, #1
 8001054:	0852      	lsrs	r2, r2, #1
 8001056:	619a      	str	r2, [r3, #24]
	// END OF RTC CALIBRATION PROCESS
	// *********************************


	// *** Configure TIM16 for RTC clock data update ***
	NVIC_EnableIRQ(TIM16_IRQn);
 8001058:	2015      	movs	r0, #21
 800105a:	f7ff fe63 	bl	8000d24 <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_TIM16EN;	// Enable TIM16 clock
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <SystemCFG+0x3e4>)
 8001060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <SystemCFG+0x3e4>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0289      	lsls	r1, r1, #10
 8001068:	430a      	orrs	r2, r1
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->PSC = 47999;
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <SystemCFG+0x444>)
 800106e:	4a41      	ldr	r2, [pc, #260]	; (8001174 <SystemCFG+0x41c>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->CCR1 = 250;
 8001072:	4b4a      	ldr	r3, [pc, #296]	; (800119c <SystemCFG+0x444>)
 8001074:	22fa      	movs	r2, #250	; 0xfa
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->DIER |= TIM_DIER_CC1IE;	// CaptureCompare1 Interrupt Enable	(2Hz)
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <SystemCFG+0x444>)
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	4b47      	ldr	r3, [pc, #284]	; (800119c <SystemCFG+0x444>)
 800107e:	2102      	movs	r1, #2
 8001080:	430a      	orrs	r2, r1
 8001082:	60da      	str	r2, [r3, #12]
	TIM16->CR1 |= TIM_CR1_CEN;	// Counter enable
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <SystemCFG+0x444>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b44      	ldr	r3, [pc, #272]	; (800119c <SystemCFG+0x444>)
 800108a:	2101      	movs	r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure SPI ***
	NVIC_EnableIRQ(SPI1_IRQn);
 8001090:	2019      	movs	r0, #25
 8001092:	f7ff fe47 	bl	8000d24 <__NVIC_EnableIRQ>
	GPIOA->MODER &= ~GPIO_MODER_MODE2_0;	// MODER: 10 - Alternative function
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	2110      	movs	r1, #16
 80010a2:	438a      	bics	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
	// GPIOA->AFR[0] 	// AFDEL set to 0000 automatically (SPI1_MOSI)
	SPI1->CR1 |= SPI_CR1_BR_1;	// SPI psc (010) : (8), 48/8 = 6Mhz set
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <SystemCFG+0x408>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <SystemCFG+0x408>)
 80010ac:	2110      	movs	r1, #16
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI);	// Set as Master (also, enable software slave management)
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemCFG+0x408>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <SystemCFG+0x408>)
 80010b8:	21c1      	movs	r1, #193	; 0xc1
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_CPHA;	// The second clock transition is the first data capture edge (as a result, first LED will always be active)
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <SystemCFG+0x408>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <SystemCFG+0x408>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
	// 8-bit data length set initially by the hardware
	SPI1->CR1 |= SPI_CR1_SPE;	// SPI enable
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <SystemCFG+0x408>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <SystemCFG+0x408>)
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure ADC ***
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f7ff fe23 	bl	8000d24 <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <SystemCFG+0x3e4>)
 80010e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <SystemCFG+0x3e4>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0349      	lsls	r1, r1, #13
 80010e8:	430a      	orrs	r2, r1
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
	ADC1->IER |= ADC_IER_EOCIE;		// End of conversion interrupt enable
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <SystemCFG+0x448>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <SystemCFG+0x448>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
	ADC1->CR |= ADC_CR_ADVREGEN;	// ADC voltage regulator enable
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <SystemCFG+0x448>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <SystemCFG+0x448>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0549      	lsls	r1, r1, #21
 8001102:	430a      	orrs	r2, r1
 8001104:	609a      	str	r2, [r3, #8]
	ADC1->CFGR1 |= ADC_CFGR1_DISCEN;	// ADC discontinuous mode enabled
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <SystemCFG+0x448>)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <SystemCFG+0x448>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0249      	lsls	r1, r1, #9
 8001110:	430a      	orrs	r2, r1
 8001112:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;	// Overwire with the last conversion result
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <SystemCFG+0x448>)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <SystemCFG+0x448>)
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	0149      	lsls	r1, r1, #5
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
	ADC1->CHSELR |= ADC_CHSELR_CHSEL5;	// Channel 5 selected for conversion
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <SystemCFG+0x448>)
 8001124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <SystemCFG+0x448>)
 8001128:	2120      	movs	r1, #32
 800112a:	430a      	orrs	r2, r1
 800112c:	629a      	str	r2, [r3, #40]	; 0x28

	ADC1->CR |= ADC_CR_ADEN;	// Start ADC
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <SystemCFG+0x448>)
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SystemCFG+0x448>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	e033      	b.n	80011a4 <SystemCFG+0x44c>
 800113c:	40021000 	.word	0x40021000
 8001140:	ffffefff 	.word	0xffffefff
 8001144:	40022000 	.word	0x40022000
 8001148:	fffffeff 	.word	0xfffffeff
 800114c:	50000400 	.word	0x50000400
 8001150:	15555555 	.word	0x15555555
 8001154:	50000800 	.word	0x50000800
 8001158:	ffff5fff 	.word	0xffff5fff
 800115c:	50000c00 	.word	0x50000c00
 8001160:	40013000 	.word	0x40013000
 8001164:	40020008 	.word	0x40020008
 8001168:	4001300c 	.word	0x4001300c
 800116c:	40020804 	.word	0x40020804
 8001170:	40002000 	.word	0x40002000
 8001174:	0000bb7f 	.word	0x0000bb7f
 8001178:	40014000 	.word	0x40014000
 800117c:	10000400 	.word	0x10000400
 8001180:	40007000 	.word	0x40007000
 8001184:	40002800 	.word	0x40002800
 8001188:	ff808000 	.word	0xff808000
 800118c:	ffff7e00 	.word	0xffff7e00
 8001190:	000001ff 	.word	0x000001ff
 8001194:	ff7fffff 	.word	0xff7fffff
 8001198:	fff7ffff 	.word	0xfff7ffff
 800119c:	40014400 	.word	0x40014400
 80011a0:	40012400 	.word	0x40012400
	while((ADC1->ISR & ADC_ISR_ADRDY) == 0);
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	4b37      	ldr	r3, [pc, #220]	; (8001284 <SystemCFG+0x52c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	d0fa      	beq.n	80011a6 <SystemCFG+0x44e>
	ADC1->ISR |= ADC_ISR_ADRDY;		// Clear flag
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <SystemCFG+0x52c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <SystemCFG+0x52c>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
	// *********************************

	// *** Configure USART1 ***
	GPIOA->MODER &= ~(GPIO_MODER_MODE9_1 | GPIO_MODER_MODE10_1);	// GPIO Output mode
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	4930      	ldr	r1, [pc, #192]	; (8001288 <SystemCFG+0x530>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
	// *********************************

	// *** Configure EXTI (switches) ***
	// SW2 (SET) - PA11 | SW3 (DOWN) - PA12 | SW4 (UP) - PB15
	GPIOA->MODER &= ~(GPIO_MODER_MODE11_0 | GPIO_MODER_MODE11_1);
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	492d      	ldr	r1, [pc, #180]	; (800128c <SystemCFG+0x534>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE12_0 | GPIO_MODER_MODE12_1);
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	492a      	ldr	r1, [pc, #168]	; (8001290 <SystemCFG+0x538>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE15_0 | GPIO_MODER_MODE15_1);
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <SystemCFG+0x53c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <SystemCFG+0x53c>)
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	0892      	lsrs	r2, r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD11_0;
 80011f8:	23a0      	movs	r3, #160	; 0xa0
 80011fa:	05db      	lsls	r3, r3, #23
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	03c9      	lsls	r1, r1, #15
 8001206:	430a      	orrs	r2, r1
 8001208:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD12_0;
 800120a:	23a0      	movs	r3, #160	; 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0449      	lsls	r1, r1, #17
 8001218:	430a      	orrs	r2, r1
 800121a:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD15_0;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <SystemCFG+0x53c>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <SystemCFG+0x53c>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	05c9      	lsls	r1, r1, #23
 8001226:	430a      	orrs	r2, r1
 8001228:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(EXTI4_15_IRQn);
 800122a:	2007      	movs	r0, #7
 800122c:	f7ff fd7a 	bl	8000d24 <__NVIC_EnableIRQ>
	EXTI->EXTICR[2] |= ((0x00)<<24);	// Set PA11
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <SystemCFG+0x540>)
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <SystemCFG+0x540>)
 8001234:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001236:	669a      	str	r2, [r3, #104]	; 0x68
	EXTI->EXTICR[3] |= ((0x00)<<0);		// Set PA12
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <SystemCFG+0x540>)
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <SystemCFG+0x540>)
 800123c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800123e:	66da      	str	r2, [r3, #108]	; 0x6c
	EXTI->EXTICR[3] |= ((0x01)<<24);	// Set PB15
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <SystemCFG+0x540>)
 8001242:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <SystemCFG+0x540>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	0449      	lsls	r1, r1, #17
 800124a:	430a      	orrs	r2, r1
 800124c:	66da      	str	r2, [r3, #108]	; 0x6c
	EXTI->FTSR1 |= EXTI_FTSR1_FT11 | EXTI_FTSR1_FT12 | EXTI_FTSR1_FT15;		// Falling edge event
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <SystemCFG+0x540>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <SystemCFG+0x540>)
 8001254:	2198      	movs	r1, #152	; 0x98
 8001256:	0209      	lsls	r1, r1, #8
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]
	EXTI->IMR1 |= EXTI_IMR1_IM11 | EXTI_IMR1_IM12 | EXTI_IMR1_IM15;
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <SystemCFG+0x540>)
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	58d3      	ldr	r3, [r2, r3]
 8001262:	490d      	ldr	r1, [pc, #52]	; (8001298 <SystemCFG+0x540>)
 8001264:	2298      	movs	r2, #152	; 0x98
 8001266:	0212      	lsls	r2, r2, #8
 8001268:	4313      	orrs	r3, r2
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	508b      	str	r3, [r1, r2]
	// *********************************

	// *** Enable DMA Channel ***
	DMA1_Channel1->CCR |= DMA_CCR_EN;	// Channel 1 enable (SPI1_TX)
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SystemCFG+0x544>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <SystemCFG+0x544>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
	// *********************************

}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40012400 	.word	0x40012400
 8001288:	ffd7ffff 	.word	0xffd7ffff
 800128c:	ff3fffff 	.word	0xff3fffff
 8001290:	fcffffff 	.word	0xfcffffff
 8001294:	50000400 	.word	0x50000400
 8001298:	40021800 	.word	0x40021800
 800129c:	40020008 	.word	0x40020008

080012a0 <delay_ms>:


void delay_ms (uint16_t ms)	{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	801a      	strh	r2, [r3, #0]
	d_flag = 0;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <delay_ms+0x38>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	TIM14->CCR1 = ms;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <delay_ms+0x3c>)
 80012b4:	1dba      	adds	r2, r7, #6
 80012b6:	8812      	ldrh	r2, [r2, #0]
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CR1 |= TIM_CR1_CEN;	// Counter enable
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <delay_ms+0x3c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <delay_ms+0x3c>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
	while(!d_flag);
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <delay_ms+0x38>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0fb      	beq.n	80012c8 <delay_ms+0x28>
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000055 	.word	0x20000055
 80012dc:	40002000 	.word	0x40002000

080012e0 <DMA1_Channel1_IRQHandler>:



__attribute__((interrupt)) void DMA1_Channel1_IRQHandler(void)	{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	if (DMA1->ISR & DMA_ISR_TCIF1){
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <DMA1_Channel1_IRQHandler+0x3c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d002      	beq.n	80012f4 <DMA1_Channel1_IRQHandler+0x14>
		DMA1->IFCR = DMA_IFCR_CTCIF1;	// Clear DMA Channel 1 transfer complete flag
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <DMA1_Channel1_IRQHandler+0x3c>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	605a      	str	r2, [r3, #4]
//		DMA1_Channel1->CCR &= ~DMA_CCR_EN;		// Channel 1 Disabled (SPI1_TX)
	}

	if (DMA1->ISR & DMA_ISR_TEIF1){
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <DMA1_Channel1_IRQHandler+0x3c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2208      	movs	r2, #8
 80012fa:	4013      	ands	r3, r2
 80012fc:	d00a      	beq.n	8001314 <DMA1_Channel1_IRQHandler+0x34>
		DMA1->IFCR = DMA_IFCR_CTEIF1;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <DMA1_Channel1_IRQHandler+0x3c>)
 8001300:	2208      	movs	r2, #8
 8001302:	605a      	str	r2, [r3, #4]
		GPIOA->ODR |= GPIO_ODR_OD6;
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
	}
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40020000 	.word	0x40020000

08001320 <TIM14_IRQHandler>:


__attribute__((interrupt)) void TIM14_IRQHandler(void)	{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	if (TIM14->SR & TIM_SR_CC1IF)	{
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <TIM14_IRQHandler+0x40>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d014      	beq.n	8001358 <TIM14_IRQHandler+0x38>
		TIM14->SR &= ~TIM_SR_CC1IF;	// Clear flag
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <TIM14_IRQHandler+0x40>)
 8001330:	691a      	ldr	r2, [r3, #16]
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <TIM14_IRQHandler+0x40>)
 8001334:	2102      	movs	r1, #2
 8001336:	438a      	bics	r2, r1
 8001338:	611a      	str	r2, [r3, #16]
		TIM14->CR1 &= ~TIM_CR1_CEN;	// Counter disabled
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <TIM14_IRQHandler+0x40>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <TIM14_IRQHandler+0x40>)
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
		TIM14->EGR |= TIM_EGR_UG;	// Reinitialise the counter
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <TIM14_IRQHandler+0x40>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <TIM14_IRQHandler+0x40>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	615a      	str	r2, [r3, #20]
		d_flag = 1;
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <TIM14_IRQHandler+0x44>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
	}
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40002000 	.word	0x40002000
 8001364:	20000055 	.word	0x20000055

08001368 <EXTI4_15_IRQHandler>:


__attribute__((interrupt)) void EXTI4_15_IRQHandler(void)	{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if ((EXTI->FPR1 & EXTI_FPR1_FPIF11))	{	// SET button
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4013      	ands	r3, r2
 8001376:	d009      	beq.n	800138c <EXTI4_15_IRQHandler+0x24>
		EXTI->FPR1 |= EXTI_FPR1_FPIF11;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	0109      	lsls	r1, r1, #4
 8001382:	430a      	orrs	r2, r1
 8001384:	611a      	str	r2, [r3, #16]
		button_flag[B_SET] = 1;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <EXTI4_15_IRQHandler+0x70>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
		}

	if ((EXTI->FPR1 & EXTI_FPR1_FPIF12))	{	// DOWN button
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	4013      	ands	r3, r2
 8001396:	d009      	beq.n	80013ac <EXTI4_15_IRQHandler+0x44>
		EXTI->FPR1 |= EXTI_FPR1_FPIF12;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0149      	lsls	r1, r1, #5
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]
		button_flag[B_DOWN] = 1;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <EXTI4_15_IRQHandler+0x70>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	705a      	strb	r2, [r3, #1]
		}

	if ((EXTI->FPR1 & EXTI_FPR1_FPIF15))	{	// UP button
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4013      	ands	r3, r2
 80013b6:	d009      	beq.n	80013cc <EXTI4_15_IRQHandler+0x64>
		EXTI->FPR1 |= EXTI_FPR1_FPIF15;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <EXTI4_15_IRQHandler+0x6c>)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	0209      	lsls	r1, r1, #8
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
		button_flag[B_UP] = 1;
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <EXTI4_15_IRQHandler+0x70>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	709a      	strb	r2, [r3, #2]
		}
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	40021800 	.word	0x40021800
 80013d8:	20000050 	.word	0x20000050

080013dc <main>:
#include "segment_dsp.h"
#include "clock.h"
#include "clk_menu.h"


int main(void) {
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af02      	add	r7, sp, #8

	uint8_t red, green, blue;	// Digit colour channel values

	TMENU menu_strct;

	SystemCFG();	// Configure uC registers
 80013e2:	f7ff fcb9 	bl	8000d58 <SystemCFG>



	// Clear LCD Display (display SPACEs)
	LEDClr();
 80013e6:	f000 fd3b 	bl	8001e60 <LEDClr>

	// Clear WS2812B Display
	FillLEDArray(LED_buf, 0, 0, 0);
 80013ea:	4877      	ldr	r0, [pc, #476]	; (80015c8 <main+0x1ec>)
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	f001 f835 	bl	8002460 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 80013f6:	23a2      	movs	r3, #162	; 0xa2
 80013f8:	00da      	lsls	r2, r3, #3
 80013fa:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <main+0x1ec>)
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f001 f9d8 	bl	80027b4 <SPI_SEND_WSBUF>

	// Scroll welcome message
	ScrollLed("hi celine", medium, sizeof("hi celine"));
 8001404:	4b71      	ldr	r3, [pc, #452]	; (80015cc <main+0x1f0>)
 8001406:	220a      	movs	r2, #10
 8001408:	21c8      	movs	r1, #200	; 0xc8
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f972 	bl	80016f4 <ScrollLed>


	// Register menu executive functions
	menu_strct.configuration = (void*)displayConfig;
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4a6f      	ldr	r2, [pc, #444]	; (80015d0 <main+0x1f4>)
 8001414:	605a      	str	r2, [r3, #4]
	menu_strct.alarm = (void*)displayAlarm;
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4a6e      	ldr	r2, [pc, #440]	; (80015d4 <main+0x1f8>)
 800141a:	60da      	str	r2, [r3, #12]
	menu_strct.study = (void*)displayStudy;
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <main+0x1fc>)
 8001420:	609a      	str	r2, [r3, #8]

	button_flag[B_UP]=0;
 8001422:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <main+0x200>)
 8001424:	2200      	movs	r2, #0
 8001426:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 8001428:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <main+0x200>)
 800142a:	2200      	movs	r2, #0
 800142c:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 800142e:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <main+0x200>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]


	dot_enable[1]++; dot_enable[3]++;	// Enable LED dots (for displaying the date)
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <main+0x204>)
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3301      	adds	r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <main+0x204>)
 8001440:	705a      	strb	r2, [r3, #1]
 8001442:	4b67      	ldr	r3, [pc, #412]	; (80015e0 <main+0x204>)
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <main+0x204>)
 800144e:	70da      	strb	r2, [r3, #3]


	while (1) {

		// IF ADC idle, start conversion
		if ((ADC1->CR & ADC_CR_ADSTART) == 0) {
 8001450:	4b64      	ldr	r3, [pc, #400]	; (80015e4 <main+0x208>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2204      	movs	r2, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d105      	bne.n	8001466 <main+0x8a>
			ADC1->CR |= ADC_CR_ADSTART;		// Start ADC conversion
 800145a:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <main+0x208>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <main+0x208>)
 8001460:	2104      	movs	r1, #4
 8001462:	430a      	orrs	r2, r1
 8001464:	609a      	str	r2, [r3, #8]
		}


		// Display current date
		DisplayNumberSet(day_t, day_u, month_t, month_u, year_t, year_u);
 8001466:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <main+0x20c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2d8      	uxtb	r0, r3
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <main+0x210>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2d9      	uxtb	r1, r3
 8001472:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <main+0x214>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2dc      	uxtb	r4, r3
 8001478:	4b5e      	ldr	r3, [pc, #376]	; (80015f4 <main+0x218>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2dd      	uxtb	r5, r3
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <main+0x21c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4a5d      	ldr	r2, [pc, #372]	; (80015fc <main+0x220>)
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	9201      	str	r2, [sp, #4]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	002b      	movs	r3, r5
 8001490:	0022      	movs	r2, r4
 8001492:	f000 f8bf 	bl	8001614 <DisplayNumberSet>

		// Assign current color values
		assignColour(hour_t, hour_u, &red, &green, &blue);
 8001496:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <main+0x224>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2d8      	uxtb	r0, r3
 800149c:	4b59      	ldr	r3, [pc, #356]	; (8001604 <main+0x228>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2d9      	uxtb	r1, r3
 80014a2:	2516      	movs	r5, #22
 80014a4:	197c      	adds	r4, r7, r5
 80014a6:	2617      	movs	r6, #23
 80014a8:	19ba      	adds	r2, r7, r6
 80014aa:	2315      	movs	r3, #21
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	0023      	movs	r3, r4
 80014b2:	f001 f9bd 	bl	8002830 <assignColour>
		// Display the current date


		// Display the current time
		FillLEDArray(LED_buf, 0, 0, 0);
 80014b6:	4844      	ldr	r0, [pc, #272]	; (80015c8 <main+0x1ec>)
 80014b8:	2300      	movs	r3, #0
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	f000 ffcf 	bl	8002460 <FillLEDArray>
		FillLEDNumber(LED_buf, 0, hour_t, red, green, blue);
 80014c2:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <main+0x224>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	19bb      	adds	r3, r7, r6
 80014ca:	781c      	ldrb	r4, [r3, #0]
 80014cc:	197b      	adds	r3, r7, r5
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2215      	movs	r2, #21
 80014d2:	18ba      	adds	r2, r7, r2
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	483c      	ldr	r0, [pc, #240]	; (80015c8 <main+0x1ec>)
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	0023      	movs	r3, r4
 80014de:	000a      	movs	r2, r1
 80014e0:	2100      	movs	r1, #0
 80014e2:	f000 fd53 	bl	8001f8c <FillLEDNumber>
		FillLEDNumber(LED_buf, 1, hour_u, red, green, blue);
 80014e6:	4b47      	ldr	r3, [pc, #284]	; (8001604 <main+0x228>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2d9      	uxtb	r1, r3
 80014ec:	19bb      	adds	r3, r7, r6
 80014ee:	781c      	ldrb	r4, [r3, #0]
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2215      	movs	r2, #21
 80014f6:	18ba      	adds	r2, r7, r2
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4833      	ldr	r0, [pc, #204]	; (80015c8 <main+0x1ec>)
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	0023      	movs	r3, r4
 8001502:	000a      	movs	r2, r1
 8001504:	2101      	movs	r1, #1
 8001506:	f000 fd41 	bl	8001f8c <FillLEDNumber>
		FillLEDNumber(LED_buf, 2, minute_t, red, green, blue);
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <main+0x22c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2d9      	uxtb	r1, r3
 8001510:	19bb      	adds	r3, r7, r6
 8001512:	781c      	ldrb	r4, [r3, #0]
 8001514:	197b      	adds	r3, r7, r5
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2215      	movs	r2, #21
 800151a:	18ba      	adds	r2, r7, r2
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	482a      	ldr	r0, [pc, #168]	; (80015c8 <main+0x1ec>)
 8001520:	9201      	str	r2, [sp, #4]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	0023      	movs	r3, r4
 8001526:	000a      	movs	r2, r1
 8001528:	2102      	movs	r1, #2
 800152a:	f000 fd2f 	bl	8001f8c <FillLEDNumber>
		FillLEDNumber(LED_buf, 3, minute_u, red, green, blue);
 800152e:	4b37      	ldr	r3, [pc, #220]	; (800160c <main+0x230>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2d9      	uxtb	r1, r3
 8001534:	19bb      	adds	r3, r7, r6
 8001536:	781c      	ldrb	r4, [r3, #0]
 8001538:	197b      	adds	r3, r7, r5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2215      	movs	r2, #21
 800153e:	18ba      	adds	r2, r7, r2
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	4821      	ldr	r0, [pc, #132]	; (80015c8 <main+0x1ec>)
 8001544:	9201      	str	r2, [sp, #4]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	0023      	movs	r3, r4
 800154a:	000a      	movs	r2, r1
 800154c:	2103      	movs	r1, #3
 800154e:	f000 fd1d 	bl	8001f8c <FillLEDNumber>
		SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 8001552:	23a2      	movs	r3, #162	; 0xa2
 8001554:	00da      	lsls	r2, r3, #3
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <main+0x1ec>)
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f001 f92a 	bl	80027b4 <SPI_SEND_WSBUF>
		delay_ms(990);
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <main+0x234>)
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff fe9c 	bl	80012a0 <delay_ms>
		FillLEDSegment(LED_buf, 26, 27, 0x0f, 0x03, 0);
 8001568:	4817      	ldr	r0, [pc, #92]	; (80015c8 <main+0x1ec>)
 800156a:	2300      	movs	r3, #0
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	2303      	movs	r3, #3
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	230f      	movs	r3, #15
 8001574:	221b      	movs	r2, #27
 8001576:	211a      	movs	r1, #26
 8001578:	f000 ffe0 	bl	800253c <FillLEDSegment>
		SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 800157c:	23a2      	movs	r3, #162	; 0xa2
 800157e:	00da      	lsls	r2, r3, #3
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <main+0x1ec>)
 8001582:	0011      	movs	r1, r2
 8001584:	0018      	movs	r0, r3
 8001586:	f001 f915 	bl	80027b4 <SPI_SEND_WSBUF>
		delay_ms(990);
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <main+0x234>)
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff fe87 	bl	80012a0 <delay_ms>

		if (button_flag[B_SET]) {
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <main+0x200>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d100      	bne.n	800159e <main+0x1c2>
 800159c:	e758      	b.n	8001450 <main+0x74>
			button_flag[B_SET]=0;
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <main+0x200>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
			dot_enable[1]=0; dot_enable[3]=0;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <main+0x204>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	705a      	strb	r2, [r3, #1]
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <main+0x204>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	70da      	strb	r2, [r3, #3]
			displayMenu(&menu_strct);
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff f8b4 	bl	8000720 <displayMenu>
			dot_enable[1]=1; dot_enable[3]=1;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <main+0x204>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	705a      	strb	r2, [r3, #1]
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <main+0x204>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	70da      	strb	r2, [r3, #3]
		if ((ADC1->CR & ADC_CR_ADSTART) == 0) {
 80015c4:	e744      	b.n	8001450 <main+0x74>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000058 	.word	0x20000058
 80015cc:	08002d9c 	.word	0x08002d9c
 80015d0:	08000881 	.word	0x08000881
 80015d4:	080009d1 	.word	0x080009d1
 80015d8:	080009e1 	.word	0x080009e1
 80015dc:	20000050 	.word	0x20000050
 80015e0:	20000038 	.word	0x20000038
 80015e4:	40012400 	.word	0x40012400
 80015e8:	2000004c 	.word	0x2000004c
 80015ec:	20000053 	.word	0x20000053
 80015f0:	20000569 	.word	0x20000569
 80015f4:	20000057 	.word	0x20000057
 80015f8:	20000056 	.word	0x20000056
 80015fc:	2000004d 	.word	0x2000004d
 8001600:	20000568 	.word	0x20000568
 8001604:	2000004f 	.word	0x2000004f
 8001608:	2000004e 	.word	0x2000004e
 800160c:	20000054 	.word	0x20000054
 8001610:	000003de 	.word	0x000003de

08001614 <DisplayNumberSet>:

// Select for which DOT should be enabled
volatile uint8_t dot_enable[6] = {OFF, OFF, OFF, OFF, OFF, OFF};


void DisplayNumberSet(uint8_t n0, uint8_t n1, uint8_t n2, uint8_t n3, uint8_t n4, uint8_t n5) {
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	0005      	movs	r5, r0
 800161c:	000c      	movs	r4, r1
 800161e:	0010      	movs	r0, r2
 8001620:	0019      	movs	r1, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	1c2a      	adds	r2, r5, #0
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	1c22      	adds	r2, r4, #0
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	1d7b      	adds	r3, r7, #5
 8001630:	1c02      	adds	r2, r0, #0
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	1c0a      	adds	r2, r1, #0
 8001638:	701a      	strb	r2, [r3, #0]
	displayChar((n0+48), 0);
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3330      	adds	r3, #48	; 0x30
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2100      	movs	r1, #0
 8001644:	0018      	movs	r0, r3
 8001646:	f000 f977 	bl	8001938 <displayChar>
	displayChar((n1+48), 1);
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3330      	adds	r3, #48	; 0x30
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2101      	movs	r1, #1
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f96f 	bl	8001938 <displayChar>
	displayChar((n2+48), 2);
 800165a:	1d7b      	adds	r3, r7, #5
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3330      	adds	r3, #48	; 0x30
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2102      	movs	r1, #2
 8001664:	0018      	movs	r0, r3
 8001666:	f000 f967 	bl	8001938 <displayChar>
	displayChar((n3+48), 3);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2103      	movs	r1, #3
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f95f 	bl	8001938 <displayChar>
	displayChar((n4+48), 4);
 800167a:	2318      	movs	r3, #24
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	3330      	adds	r3, #48	; 0x30
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2104      	movs	r1, #4
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f956 	bl	8001938 <displayChar>
	displayChar((n5+48), 5);
 800168c:	231c      	movs	r3, #28
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	3330      	adds	r3, #48	; 0x30
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2105      	movs	r1, #5
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f94d 	bl	8001938 <displayChar>
	// 48 must be added to reach the number char value from the ASCII table
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}

080016a6 <DisplayLEDStr>:

void DisplayLEDStr(char * str) {
 80016a6:	b590      	push	{r4, r7, lr}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	uint8_t i;
	LEDClr();
 80016ae:	f000 fbd7 	bl	8001e60 <LEDClr>
	for (i=0; i<6; i++) {
 80016b2:	230f      	movs	r3, #15
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e012      	b.n	80016e2 <DisplayLEDStr+0x3c>
		displayChar(str[i], i);
 80016bc:	210f      	movs	r1, #15
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	000c      	movs	r4, r1
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	0019      	movs	r1, r3
 80016d0:	0010      	movs	r0, r2
 80016d2:	f000 f931 	bl	8001938 <displayChar>
	for (i=0; i<6; i++) {
 80016d6:	0021      	movs	r1, r4
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	781a      	ldrb	r2, [r3, #0]
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	3201      	adds	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	230f      	movs	r3, #15
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d9e7      	bls.n	80016bc <DisplayLEDStr+0x16>
	}
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b005      	add	sp, #20
 80016f2:	bd90      	pop	{r4, r7, pc}

080016f4 <ScrollLed>:

void ScrollLed(char * data, uint16_t speed, uint8_t len) {
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b08d      	sub	sp, #52	; 0x34
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	61f8      	str	r0, [r7, #28]
 80016fc:	0010      	movs	r0, r2
 80016fe:	221a      	movs	r2, #26
 8001700:	18ba      	adds	r2, r7, r2
 8001702:	8011      	strh	r1, [r2, #0]
 8001704:	2219      	movs	r2, #25
 8001706:	18ba      	adds	r2, r7, r2
 8001708:	1c01      	adds	r1, r0, #0
 800170a:	7011      	strb	r1, [r2, #0]
 800170c:	466a      	mov	r2, sp
 800170e:	607a      	str	r2, [r7, #4]
	uint8_t j=0;
 8001710:	2216      	movs	r2, #22
 8001712:	2118      	movs	r1, #24
 8001714:	468c      	mov	ip, r1
 8001716:	44bc      	add	ip, r7
 8001718:	4462      	add	r2, ip
 800171a:	2100      	movs	r1, #0
 800171c:	7011      	strb	r1, [r2, #0]
	uint8_t k=0;
 800171e:	2117      	movs	r1, #23
 8001720:	2018      	movs	r0, #24
 8001722:	1838      	adds	r0, r7, r0
 8001724:	1842      	adds	r2, r0, r1
 8001726:	2100      	movs	r1, #0
 8001728:	7011      	strb	r1, [r2, #0]
	char temp_buf[len+12];
 800172a:	2219      	movs	r2, #25
 800172c:	18ba      	adds	r2, r7, r2
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	320c      	adds	r2, #12
 8001732:	1e51      	subs	r1, r2, #1
 8001734:	62b9      	str	r1, [r7, #40]	; 0x28
 8001736:	0011      	movs	r1, r2
 8001738:	6139      	str	r1, [r7, #16]
 800173a:	2100      	movs	r1, #0
 800173c:	6179      	str	r1, [r7, #20]
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	0f49      	lsrs	r1, r1, #29
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	00c6      	lsls	r6, r0, #3
 8001746:	430e      	orrs	r6, r1
 8001748:	6939      	ldr	r1, [r7, #16]
 800174a:	00cd      	lsls	r5, r1, #3
 800174c:	0011      	movs	r1, r2
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	2100      	movs	r1, #0
 8001752:	60f9      	str	r1, [r7, #12]
 8001754:	68bd      	ldr	r5, [r7, #8]
 8001756:	68fe      	ldr	r6, [r7, #12]
 8001758:	0029      	movs	r1, r5
 800175a:	0f49      	lsrs	r1, r1, #29
 800175c:	0030      	movs	r0, r6
 800175e:	00c4      	lsls	r4, r0, #3
 8001760:	430c      	orrs	r4, r1
 8001762:	0029      	movs	r1, r5
 8001764:	00cb      	lsls	r3, r1, #3
 8001766:	0013      	movs	r3, r2
 8001768:	3307      	adds	r3, #7
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4669      	mov	r1, sp
 8001770:	1acb      	subs	r3, r1, r3
 8001772:	469d      	mov	sp, r3
 8001774:	466b      	mov	r3, sp
 8001776:	3300      	adds	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
	memset(temp_buf, 32, (len+12));
 800177a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800177c:	2319      	movs	r3, #25
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	330c      	adds	r3, #12
 8001784:	001a      	movs	r2, r3
 8001786:	2120      	movs	r1, #32
 8001788:	f001 fad8 	bl	8002d3c <memset>
	for (j=6; j<(5+len); j++) {
 800178c:	2216      	movs	r2, #22
 800178e:	2318      	movs	r3, #24
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	189b      	adds	r3, r3, r2
 8001794:	2206      	movs	r2, #6
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e01b      	b.n	80017d2 <ScrollLed+0xde>
		temp_buf[j] = data[k];
 800179a:	2017      	movs	r0, #23
 800179c:	2518      	movs	r5, #24
 800179e:	197b      	adds	r3, r7, r5
 80017a0:	181b      	adds	r3, r3, r0
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	18d2      	adds	r2, r2, r3
 80017a8:	2416      	movs	r4, #22
 80017aa:	197b      	adds	r3, r7, r5
 80017ac:	191b      	adds	r3, r3, r4
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	7811      	ldrb	r1, [r2, #0]
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	54d1      	strb	r1, [r2, r3]
		k++;
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	181b      	adds	r3, r3, r0
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	197b      	adds	r3, r7, r5
 80017be:	181b      	adds	r3, r3, r0
 80017c0:	3201      	adds	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
	for (j=6; j<(5+len); j++) {
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	191b      	adds	r3, r3, r4
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	191b      	adds	r3, r3, r4
 80017ce:	3201      	adds	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	2316      	movs	r3, #22
 80017d4:	2218      	movs	r2, #24
 80017d6:	4694      	mov	ip, r2
 80017d8:	44bc      	add	ip, r7
 80017da:	4463      	add	r3, ip
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	2319      	movs	r3, #25
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3305      	adds	r3, #5
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbd7      	blt.n	800179a <ScrollLed+0xa6>
	}
	k=0;
 80017ea:	2317      	movs	r3, #23
 80017ec:	2218      	movs	r2, #24
 80017ee:	4694      	mov	ip, r2
 80017f0:	44bc      	add	ip, r7
 80017f2:	4463      	add	r3, ip
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	for (j=0; j<=(6+len); j++) {
 80017f8:	2316      	movs	r3, #22
 80017fa:	2218      	movs	r2, #24
 80017fc:	4694      	mov	ip, r2
 80017fe:	44bc      	add	ip, r7
 8001800:	4463      	add	r3, ip
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e084      	b.n	8001912 <ScrollLed+0x21e>
		displayChar(temp_buf[k+j], 0); k++;
 8001808:	2417      	movs	r4, #23
 800180a:	2618      	movs	r6, #24
 800180c:	19bb      	adds	r3, r7, r6
 800180e:	191b      	adds	r3, r3, r4
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	2516      	movs	r5, #22
 8001814:	19bb      	adds	r3, r7, r6
 8001816:	195b      	adds	r3, r3, r5
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	2100      	movs	r1, #0
 8001822:	0018      	movs	r0, r3
 8001824:	f000 f888 	bl	8001938 <displayChar>
 8001828:	19bb      	adds	r3, r7, r6
 800182a:	191b      	adds	r3, r3, r4
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	19bb      	adds	r3, r7, r6
 8001830:	191b      	adds	r3, r3, r4
 8001832:	3201      	adds	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 1); k++;
 8001836:	19bb      	adds	r3, r7, r6
 8001838:	191b      	adds	r3, r3, r4
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	19bb      	adds	r3, r7, r6
 800183e:	195b      	adds	r3, r3, r5
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	18d3      	adds	r3, r2, r3
 8001844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	2101      	movs	r1, #1
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f874 	bl	8001938 <displayChar>
 8001850:	19bb      	adds	r3, r7, r6
 8001852:	191b      	adds	r3, r3, r4
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	19bb      	adds	r3, r7, r6
 8001858:	191b      	adds	r3, r3, r4
 800185a:	3201      	adds	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 2); k++;
 800185e:	19bb      	adds	r3, r7, r6
 8001860:	191b      	adds	r3, r3, r4
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	19bb      	adds	r3, r7, r6
 8001866:	195b      	adds	r3, r3, r5
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	18d3      	adds	r3, r2, r3
 800186c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	2102      	movs	r1, #2
 8001872:	0018      	movs	r0, r3
 8001874:	f000 f860 	bl	8001938 <displayChar>
 8001878:	19bb      	adds	r3, r7, r6
 800187a:	191b      	adds	r3, r3, r4
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	19bb      	adds	r3, r7, r6
 8001880:	191b      	adds	r3, r3, r4
 8001882:	3201      	adds	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 3); k++;
 8001886:	19bb      	adds	r3, r7, r6
 8001888:	191b      	adds	r3, r3, r4
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	19bb      	adds	r3, r7, r6
 800188e:	195b      	adds	r3, r3, r5
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	18d3      	adds	r3, r2, r3
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	2103      	movs	r1, #3
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f84c 	bl	8001938 <displayChar>
 80018a0:	19bb      	adds	r3, r7, r6
 80018a2:	191b      	adds	r3, r3, r4
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	19bb      	adds	r3, r7, r6
 80018a8:	191b      	adds	r3, r3, r4
 80018aa:	3201      	adds	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 4); k++;
 80018ae:	19bb      	adds	r3, r7, r6
 80018b0:	191b      	adds	r3, r3, r4
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	19bb      	adds	r3, r7, r6
 80018b6:	195b      	adds	r3, r3, r5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	18d3      	adds	r3, r2, r3
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	2104      	movs	r1, #4
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f838 	bl	8001938 <displayChar>
 80018c8:	19bb      	adds	r3, r7, r6
 80018ca:	191b      	adds	r3, r3, r4
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	19bb      	adds	r3, r7, r6
 80018d0:	191b      	adds	r3, r3, r4
 80018d2:	3201      	adds	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 5); k=0;
 80018d6:	19bb      	adds	r3, r7, r6
 80018d8:	191b      	adds	r3, r3, r4
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	19bb      	adds	r3, r7, r6
 80018de:	195b      	adds	r3, r3, r5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	18d3      	adds	r3, r2, r3
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	2105      	movs	r1, #5
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 f824 	bl	8001938 <displayChar>
 80018f0:	19bb      	adds	r3, r7, r6
 80018f2:	191b      	adds	r3, r3, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
		delay_ms(speed);
 80018f8:	231a      	movs	r3, #26
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff fcce 	bl	80012a0 <delay_ms>
	for (j=0; j<=(6+len); j++) {
 8001904:	19bb      	adds	r3, r7, r6
 8001906:	195b      	adds	r3, r3, r5
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	19bb      	adds	r3, r7, r6
 800190c:	195b      	adds	r3, r3, r5
 800190e:	3201      	adds	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	2316      	movs	r3, #22
 8001914:	2218      	movs	r2, #24
 8001916:	4694      	mov	ip, r2
 8001918:	44bc      	add	ip, r7
 800191a:	4463      	add	r3, ip
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	2319      	movs	r3, #25
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3306      	adds	r3, #6
 8001926:	429a      	cmp	r2, r3
 8001928:	dc00      	bgt.n	800192c <ScrollLed+0x238>
 800192a:	e76d      	b.n	8001808 <ScrollLed+0x114>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	469d      	mov	sp, r3
	}
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b00d      	add	sp, #52	; 0x34
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001938 <displayChar>:

void displayChar(char c, uint8_t pos) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	0002      	movs	r2, r0
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	1c0a      	adds	r2, r1, #0
 8001948:	701a      	strb	r2, [r3, #0]
	if (pos<0 && pos>5) return;
	if ((c>47 && c<58) || (c>96 && c<123) || (c==32)) {
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b2f      	cmp	r3, #47	; 0x2f
 8001950:	d903      	bls.n	800195a <displayChar+0x22>
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b39      	cmp	r3, #57	; 0x39
 8001958:	d90c      	bls.n	8001974 <displayChar+0x3c>
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b60      	cmp	r3, #96	; 0x60
 8001960:	d903      	bls.n	800196a <displayChar+0x32>
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b7a      	cmp	r3, #122	; 0x7a
 8001968:	d904      	bls.n	8001974 <displayChar+0x3c>
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d000      	beq.n	8001974 <displayChar+0x3c>
 8001972:	e1dc      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='0') {led_dsp[pos] = ZERO; return;}
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b30      	cmp	r3, #48	; 0x30
 800197a:	d106      	bne.n	800198a <displayChar+0x52>
 800197c:	1dbb      	adds	r3, r7, #6
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	49c2      	ldr	r1, [pc, #776]	; (8001c8c <displayChar+0x354>)
 8001982:	4bc3      	ldr	r3, [pc, #780]	; (8001c90 <displayChar+0x358>)
 8001984:	0052      	lsls	r2, r2, #1
 8001986:	52d1      	strh	r1, [r2, r3]
 8001988:	e1d1      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='1') {led_dsp[pos] = ONE; return;}
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b31      	cmp	r3, #49	; 0x31
 8001990:	d106      	bne.n	80019a0 <displayChar+0x68>
 8001992:	1dbb      	adds	r3, r7, #6
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	49bf      	ldr	r1, [pc, #764]	; (8001c94 <displayChar+0x35c>)
 8001998:	4bbd      	ldr	r3, [pc, #756]	; (8001c90 <displayChar+0x358>)
 800199a:	0052      	lsls	r2, r2, #1
 800199c:	52d1      	strh	r1, [r2, r3]
 800199e:	e1c6      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='2') {led_dsp[pos] = TWO; return;}
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b32      	cmp	r3, #50	; 0x32
 80019a6:	d106      	bne.n	80019b6 <displayChar+0x7e>
 80019a8:	1dbb      	adds	r3, r7, #6
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	49ba      	ldr	r1, [pc, #744]	; (8001c98 <displayChar+0x360>)
 80019ae:	4bb8      	ldr	r3, [pc, #736]	; (8001c90 <displayChar+0x358>)
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	52d1      	strh	r1, [r2, r3]
 80019b4:	e1bb      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='3') {led_dsp[pos] = THREE; return;}
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b33      	cmp	r3, #51	; 0x33
 80019bc:	d106      	bne.n	80019cc <displayChar+0x94>
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	49b6      	ldr	r1, [pc, #728]	; (8001c9c <displayChar+0x364>)
 80019c4:	4bb2      	ldr	r3, [pc, #712]	; (8001c90 <displayChar+0x358>)
 80019c6:	0052      	lsls	r2, r2, #1
 80019c8:	52d1      	strh	r1, [r2, r3]
 80019ca:	e1b0      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='4') {led_dsp[pos] = FOUR; return;}
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b34      	cmp	r3, #52	; 0x34
 80019d2:	d106      	bne.n	80019e2 <displayChar+0xaa>
 80019d4:	1dbb      	adds	r3, r7, #6
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	49b1      	ldr	r1, [pc, #708]	; (8001ca0 <displayChar+0x368>)
 80019da:	4bad      	ldr	r3, [pc, #692]	; (8001c90 <displayChar+0x358>)
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	52d1      	strh	r1, [r2, r3]
 80019e0:	e1a5      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='5') {led_dsp[pos] = FIVE; return;}
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b35      	cmp	r3, #53	; 0x35
 80019e8:	d106      	bne.n	80019f8 <displayChar+0xc0>
 80019ea:	1dbb      	adds	r3, r7, #6
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	49ad      	ldr	r1, [pc, #692]	; (8001ca4 <displayChar+0x36c>)
 80019f0:	4ba7      	ldr	r3, [pc, #668]	; (8001c90 <displayChar+0x358>)
 80019f2:	0052      	lsls	r2, r2, #1
 80019f4:	52d1      	strh	r1, [r2, r3]
 80019f6:	e19a      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='6') {led_dsp[pos] = SIX; return;}
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b36      	cmp	r3, #54	; 0x36
 80019fe:	d106      	bne.n	8001a0e <displayChar+0xd6>
 8001a00:	1dbb      	adds	r3, r7, #6
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	49a8      	ldr	r1, [pc, #672]	; (8001ca8 <displayChar+0x370>)
 8001a06:	4ba2      	ldr	r3, [pc, #648]	; (8001c90 <displayChar+0x358>)
 8001a08:	0052      	lsls	r2, r2, #1
 8001a0a:	52d1      	strh	r1, [r2, r3]
 8001a0c:	e18f      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='7') {led_dsp[pos] = SEVEN; return;}
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b37      	cmp	r3, #55	; 0x37
 8001a14:	d106      	bne.n	8001a24 <displayChar+0xec>
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	49a4      	ldr	r1, [pc, #656]	; (8001cac <displayChar+0x374>)
 8001a1c:	4b9c      	ldr	r3, [pc, #624]	; (8001c90 <displayChar+0x358>)
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	52d1      	strh	r1, [r2, r3]
 8001a22:	e184      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='8') {led_dsp[pos] = EIGHT; return;}
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b38      	cmp	r3, #56	; 0x38
 8001a2a:	d106      	bne.n	8001a3a <displayChar+0x102>
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	499f      	ldr	r1, [pc, #636]	; (8001cb0 <displayChar+0x378>)
 8001a32:	4b97      	ldr	r3, [pc, #604]	; (8001c90 <displayChar+0x358>)
 8001a34:	0052      	lsls	r2, r2, #1
 8001a36:	52d1      	strh	r1, [r2, r3]
 8001a38:	e179      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='9') {led_dsp[pos] = NINE; return;}
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b39      	cmp	r3, #57	; 0x39
 8001a40:	d106      	bne.n	8001a50 <displayChar+0x118>
 8001a42:	1dbb      	adds	r3, r7, #6
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	499b      	ldr	r1, [pc, #620]	; (8001cb4 <displayChar+0x37c>)
 8001a48:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <displayChar+0x358>)
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	52d1      	strh	r1, [r2, r3]
 8001a4e:	e16e      	b.n	8001d2e <displayChar+0x3f6>

		if (c==' ') {led_dsp[pos] = SPACE; return;}
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d106      	bne.n	8001a66 <displayChar+0x12e>
 8001a58:	1dbb      	adds	r3, r7, #6
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4996      	ldr	r1, [pc, #600]	; (8001cb8 <displayChar+0x380>)
 8001a5e:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <displayChar+0x358>)
 8001a60:	0052      	lsls	r2, r2, #1
 8001a62:	52d1      	strh	r1, [r2, r3]
 8001a64:	e163      	b.n	8001d2e <displayChar+0x3f6>

		if (c=='a') {led_dsp[pos] = A; return;}
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b61      	cmp	r3, #97	; 0x61
 8001a6c:	d106      	bne.n	8001a7c <displayChar+0x144>
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	4992      	ldr	r1, [pc, #584]	; (8001cbc <displayChar+0x384>)
 8001a74:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <displayChar+0x358>)
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	52d1      	strh	r1, [r2, r3]
 8001a7a:	e158      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='b') {led_dsp[pos] = B; return;}
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b62      	cmp	r3, #98	; 0x62
 8001a82:	d106      	bne.n	8001a92 <displayChar+0x15a>
 8001a84:	1dbb      	adds	r3, r7, #6
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	498d      	ldr	r1, [pc, #564]	; (8001cc0 <displayChar+0x388>)
 8001a8a:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <displayChar+0x358>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	52d1      	strh	r1, [r2, r3]
 8001a90:	e14d      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='c') {led_dsp[pos] = C; return;}
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b63      	cmp	r3, #99	; 0x63
 8001a98:	d106      	bne.n	8001aa8 <displayChar+0x170>
 8001a9a:	1dbb      	adds	r3, r7, #6
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	4989      	ldr	r1, [pc, #548]	; (8001cc4 <displayChar+0x38c>)
 8001aa0:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <displayChar+0x358>)
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	52d1      	strh	r1, [r2, r3]
 8001aa6:	e142      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='d') {led_dsp[pos] = D; return;}
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d106      	bne.n	8001abe <displayChar+0x186>
 8001ab0:	1dbb      	adds	r3, r7, #6
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4984      	ldr	r1, [pc, #528]	; (8001cc8 <displayChar+0x390>)
 8001ab6:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <displayChar+0x358>)
 8001ab8:	0052      	lsls	r2, r2, #1
 8001aba:	52d1      	strh	r1, [r2, r3]
 8001abc:	e137      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='e') {led_dsp[pos] = E; return;}
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b65      	cmp	r3, #101	; 0x65
 8001ac4:	d106      	bne.n	8001ad4 <displayChar+0x19c>
 8001ac6:	1dbb      	adds	r3, r7, #6
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	4980      	ldr	r1, [pc, #512]	; (8001ccc <displayChar+0x394>)
 8001acc:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <displayChar+0x358>)
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	52d1      	strh	r1, [r2, r3]
 8001ad2:	e12c      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='f') {led_dsp[pos] = F; return;}
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b66      	cmp	r3, #102	; 0x66
 8001ada:	d106      	bne.n	8001aea <displayChar+0x1b2>
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	497b      	ldr	r1, [pc, #492]	; (8001cd0 <displayChar+0x398>)
 8001ae2:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <displayChar+0x358>)
 8001ae4:	0052      	lsls	r2, r2, #1
 8001ae6:	52d1      	strh	r1, [r2, r3]
 8001ae8:	e121      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='g') {led_dsp[pos] = G; return;}
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b67      	cmp	r3, #103	; 0x67
 8001af0:	d106      	bne.n	8001b00 <displayChar+0x1c8>
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	4977      	ldr	r1, [pc, #476]	; (8001cd4 <displayChar+0x39c>)
 8001af8:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <displayChar+0x358>)
 8001afa:	0052      	lsls	r2, r2, #1
 8001afc:	52d1      	strh	r1, [r2, r3]
 8001afe:	e116      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='h') {led_dsp[pos] = H; return;}
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b68      	cmp	r3, #104	; 0x68
 8001b06:	d106      	bne.n	8001b16 <displayChar+0x1de>
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4972      	ldr	r1, [pc, #456]	; (8001cd8 <displayChar+0x3a0>)
 8001b0e:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <displayChar+0x358>)
 8001b10:	0052      	lsls	r2, r2, #1
 8001b12:	52d1      	strh	r1, [r2, r3]
 8001b14:	e10b      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='i') {led_dsp[pos] = I; return;}
 8001b16:	1dfb      	adds	r3, r7, #7
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b69      	cmp	r3, #105	; 0x69
 8001b1c:	d106      	bne.n	8001b2c <displayChar+0x1f4>
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	496e      	ldr	r1, [pc, #440]	; (8001cdc <displayChar+0x3a4>)
 8001b24:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <displayChar+0x358>)
 8001b26:	0052      	lsls	r2, r2, #1
 8001b28:	52d1      	strh	r1, [r2, r3]
 8001b2a:	e100      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='j') {led_dsp[pos] = J; return;}
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b6a      	cmp	r3, #106	; 0x6a
 8001b32:	d106      	bne.n	8001b42 <displayChar+0x20a>
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	4969      	ldr	r1, [pc, #420]	; (8001ce0 <displayChar+0x3a8>)
 8001b3a:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <displayChar+0x358>)
 8001b3c:	0052      	lsls	r2, r2, #1
 8001b3e:	52d1      	strh	r1, [r2, r3]
 8001b40:	e0f5      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='k') {led_dsp[pos] = K; return;}
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b6b      	cmp	r3, #107	; 0x6b
 8001b48:	d106      	bne.n	8001b58 <displayChar+0x220>
 8001b4a:	1dbb      	adds	r3, r7, #6
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4965      	ldr	r1, [pc, #404]	; (8001ce4 <displayChar+0x3ac>)
 8001b50:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <displayChar+0x358>)
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	52d1      	strh	r1, [r2, r3]
 8001b56:	e0ea      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='l') {led_dsp[pos] = L; return;}
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b6c      	cmp	r3, #108	; 0x6c
 8001b5e:	d106      	bne.n	8001b6e <displayChar+0x236>
 8001b60:	1dbb      	adds	r3, r7, #6
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	4960      	ldr	r1, [pc, #384]	; (8001ce8 <displayChar+0x3b0>)
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <displayChar+0x358>)
 8001b68:	0052      	lsls	r2, r2, #1
 8001b6a:	52d1      	strh	r1, [r2, r3]
 8001b6c:	e0df      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='m') {led_dsp[pos] = M; return;}
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b6d      	cmp	r3, #109	; 0x6d
 8001b74:	d106      	bne.n	8001b84 <displayChar+0x24c>
 8001b76:	1dbb      	adds	r3, r7, #6
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	495c      	ldr	r1, [pc, #368]	; (8001cec <displayChar+0x3b4>)
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <displayChar+0x358>)
 8001b7e:	0052      	lsls	r2, r2, #1
 8001b80:	52d1      	strh	r1, [r2, r3]
 8001b82:	e0d4      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='n') {led_dsp[pos] = N; return;}
 8001b84:	1dfb      	adds	r3, r7, #7
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b6e      	cmp	r3, #110	; 0x6e
 8001b8a:	d106      	bne.n	8001b9a <displayChar+0x262>
 8001b8c:	1dbb      	adds	r3, r7, #6
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4957      	ldr	r1, [pc, #348]	; (8001cf0 <displayChar+0x3b8>)
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <displayChar+0x358>)
 8001b94:	0052      	lsls	r2, r2, #1
 8001b96:	52d1      	strh	r1, [r2, r3]
 8001b98:	e0c9      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='o') {led_dsp[pos] = O; return;}
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b6f      	cmp	r3, #111	; 0x6f
 8001ba0:	d106      	bne.n	8001bb0 <displayChar+0x278>
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	4939      	ldr	r1, [pc, #228]	; (8001c8c <displayChar+0x354>)
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <displayChar+0x358>)
 8001baa:	0052      	lsls	r2, r2, #1
 8001bac:	52d1      	strh	r1, [r2, r3]
 8001bae:	e0be      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='p') {led_dsp[pos] = P; return;}
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b70      	cmp	r3, #112	; 0x70
 8001bb6:	d106      	bne.n	8001bc6 <displayChar+0x28e>
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	494d      	ldr	r1, [pc, #308]	; (8001cf4 <displayChar+0x3bc>)
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <displayChar+0x358>)
 8001bc0:	0052      	lsls	r2, r2, #1
 8001bc2:	52d1      	strh	r1, [r2, r3]
 8001bc4:	e0b3      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='q') {led_dsp[pos] = Q; return;}
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b71      	cmp	r3, #113	; 0x71
 8001bcc:	d106      	bne.n	8001bdc <displayChar+0x2a4>
 8001bce:	1dbb      	adds	r3, r7, #6
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	4949      	ldr	r1, [pc, #292]	; (8001cf8 <displayChar+0x3c0>)
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <displayChar+0x358>)
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	52d1      	strh	r1, [r2, r3]
 8001bda:	e0a8      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='r') {led_dsp[pos] = R; return;}
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b72      	cmp	r3, #114	; 0x72
 8001be2:	d106      	bne.n	8001bf2 <displayChar+0x2ba>
 8001be4:	1dbb      	adds	r3, r7, #6
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4944      	ldr	r1, [pc, #272]	; (8001cfc <displayChar+0x3c4>)
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <displayChar+0x358>)
 8001bec:	0052      	lsls	r2, r2, #1
 8001bee:	52d1      	strh	r1, [r2, r3]
 8001bf0:	e09d      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='s') {led_dsp[pos] = S; return;}
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b73      	cmp	r3, #115	; 0x73
 8001bf8:	d106      	bne.n	8001c08 <displayChar+0x2d0>
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	4929      	ldr	r1, [pc, #164]	; (8001ca4 <displayChar+0x36c>)
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <displayChar+0x358>)
 8001c02:	0052      	lsls	r2, r2, #1
 8001c04:	52d1      	strh	r1, [r2, r3]
 8001c06:	e092      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='t') {led_dsp[pos] = T; return;}
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b74      	cmp	r3, #116	; 0x74
 8001c0e:	d106      	bne.n	8001c1e <displayChar+0x2e6>
 8001c10:	1dbb      	adds	r3, r7, #6
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	493a      	ldr	r1, [pc, #232]	; (8001d00 <displayChar+0x3c8>)
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <displayChar+0x358>)
 8001c18:	0052      	lsls	r2, r2, #1
 8001c1a:	52d1      	strh	r1, [r2, r3]
 8001c1c:	e087      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='u') {led_dsp[pos] = U; return;}
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b75      	cmp	r3, #117	; 0x75
 8001c24:	d106      	bne.n	8001c34 <displayChar+0x2fc>
 8001c26:	1dbb      	adds	r3, r7, #6
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <displayChar+0x3cc>)
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <displayChar+0x358>)
 8001c2e:	0052      	lsls	r2, r2, #1
 8001c30:	52d1      	strh	r1, [r2, r3]
 8001c32:	e07c      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='w') {led_dsp[pos] = W; return;}
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b77      	cmp	r3, #119	; 0x77
 8001c3a:	d106      	bne.n	8001c4a <displayChar+0x312>
 8001c3c:	1dbb      	adds	r3, r7, #6
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4931      	ldr	r1, [pc, #196]	; (8001d08 <displayChar+0x3d0>)
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <displayChar+0x358>)
 8001c44:	0052      	lsls	r2, r2, #1
 8001c46:	52d1      	strh	r1, [r2, r3]
 8001c48:	e071      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='v') {led_dsp[pos] = V; return;}
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b76      	cmp	r3, #118	; 0x76
 8001c50:	d106      	bne.n	8001c60 <displayChar+0x328>
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	492d      	ldr	r1, [pc, #180]	; (8001d0c <displayChar+0x3d4>)
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <displayChar+0x358>)
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	52d1      	strh	r1, [r2, r3]
 8001c5e:	e066      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='x') {led_dsp[pos] = X; return;}
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b78      	cmp	r3, #120	; 0x78
 8001c66:	d106      	bne.n	8001c76 <displayChar+0x33e>
 8001c68:	1dbb      	adds	r3, r7, #6
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4928      	ldr	r1, [pc, #160]	; (8001d10 <displayChar+0x3d8>)
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <displayChar+0x358>)
 8001c70:	0052      	lsls	r2, r2, #1
 8001c72:	52d1      	strh	r1, [r2, r3]
 8001c74:	e05b      	b.n	8001d2e <displayChar+0x3f6>
		if (c=='y') {led_dsp[pos] = Y; return;}
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b79      	cmp	r3, #121	; 0x79
 8001c7c:	d14c      	bne.n	8001d18 <displayChar+0x3e0>
 8001c7e:	1dbb      	adds	r3, r7, #6
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	4924      	ldr	r1, [pc, #144]	; (8001d14 <displayChar+0x3dc>)
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <displayChar+0x358>)
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	52d1      	strh	r1, [r2, r3]
 8001c8a:	e050      	b.n	8001d2e <displayChar+0x3f6>
 8001c8c:	00007fc0 	.word	0x00007fc0
 8001c90:	20000040 	.word	0x20000040
 8001c94:	00007ff9 	.word	0x00007ff9
 8001c98:	00006ee4 	.word	0x00006ee4
 8001c9c:	00006ef0 	.word	0x00006ef0
 8001ca0:	00006ed9 	.word	0x00006ed9
 8001ca4:	00006ed2 	.word	0x00006ed2
 8001ca8:	00006ec2 	.word	0x00006ec2
 8001cac:	00007ff8 	.word	0x00007ff8
 8001cb0:	00006ec0 	.word	0x00006ec0
 8001cb4:	00006ed0 	.word	0x00006ed0
 8001cb8:	00007fff 	.word	0x00007fff
 8001cbc:	00006ec8 	.word	0x00006ec8
 8001cc0:	00007ab0 	.word	0x00007ab0
 8001cc4:	00007fc6 	.word	0x00007fc6
 8001cc8:	00007bb0 	.word	0x00007bb0
 8001ccc:	00006ec6 	.word	0x00006ec6
 8001cd0:	00006ece 	.word	0x00006ece
 8001cd4:	00007ec2 	.word	0x00007ec2
 8001cd8:	00006ec9 	.word	0x00006ec9
 8001cdc:	00007bbf 	.word	0x00007bbf
 8001ce0:	00007fe1 	.word	0x00007fe1
 8001ce4:	00006d4f 	.word	0x00006d4f
 8001ce8:	00007fc7 	.word	0x00007fc7
 8001cec:	00003f49 	.word	0x00003f49
 8001cf0:	00003dc9 	.word	0x00003dc9
 8001cf4:	00006ecc 	.word	0x00006ecc
 8001cf8:	00007dc0 	.word	0x00007dc0
 8001cfc:	00006ccc 	.word	0x00006ccc
 8001d00:	00007bbe 	.word	0x00007bbe
 8001d04:	00007fc1 	.word	0x00007fc1
 8001d08:	000075c9 	.word	0x000075c9
 8001d0c:	0000774f 	.word	0x0000774f
 8001d10:	0000357f 	.word	0x0000357f
 8001d14:	00003b7f 	.word	0x00003b7f
		if (c=='z') {led_dsp[pos] = Z; return;}
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b7a      	cmp	r3, #122	; 0x7a
 8001d1e:	d106      	bne.n	8001d2e <displayChar+0x3f6>
 8001d20:	1dbb      	adds	r3, r7, #6
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <displayChar+0x3fc>)
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <displayChar+0x400>)
 8001d28:	0052      	lsls	r2, r2, #1
 8001d2a:	52d1      	strh	r1, [r2, r3]
 8001d2c:	46c0      	nop			; (mov r8, r8)
	}
}
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	0000f776 	.word	0x0000f776
 8001d38:	20000040 	.word	0x20000040

08001d3c <setDigit>:


void setDigit(uint8_t digit) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	0002      	movs	r2, r0
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	701a      	strb	r2, [r3, #0]
	switch(digit) {
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d900      	bls.n	8001d52 <setDigit+0x16>
 8001d50:	e07c      	b.n	8001e4c <setDigit+0x110>
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <setDigit+0x118>)
 8001d56:	18d3      	adds	r3, r2, r3
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	469f      	mov	pc, r3
		case 0:
			D0_SET;
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <setDigit+0x11c>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	03d2      	lsls	r2, r2, #15
 8001d62:	619a      	str	r2, [r3, #24]
			D1_CLR;
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <setDigit+0x11c>)
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8001d6a:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <setDigit+0x120>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <setDigit+0x120>)
 8001d72:	2202      	movs	r2, #2
 8001d74:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <setDigit+0x120>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <setDigit+0x120>)
 8001d7e:	2208      	movs	r2, #8
 8001d80:	619a      	str	r2, [r3, #24]
			break;
 8001d82:	e063      	b.n	8001e4c <setDigit+0x110>
		case 1:
			D0_CLR;
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <setDigit+0x11c>)
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	619a      	str	r2, [r3, #24]
			D1_SET;
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <setDigit+0x11c>)
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	0412      	lsls	r2, r2, #16
 8001d90:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <setDigit+0x120>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <setDigit+0x120>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <setDigit+0x120>)
 8001da0:	2204      	movs	r2, #4
 8001da2:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8001da4:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <setDigit+0x120>)
 8001da6:	2208      	movs	r2, #8
 8001da8:	619a      	str	r2, [r3, #24]
			break;
 8001daa:	e04f      	b.n	8001e4c <setDigit+0x110>
		case 2:
			D0_CLR;
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <setDigit+0x11c>)
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	619a      	str	r2, [r3, #24]
			D1_CLR;
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <setDigit+0x11c>)
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	619a      	str	r2, [r3, #24]
			D2_SET;
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <setDigit+0x120>)
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0252      	lsls	r2, r2, #9
 8001dbe:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <setDigit+0x120>)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <setDigit+0x120>)
 8001dc8:	2204      	movs	r2, #4
 8001dca:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <setDigit+0x120>)
 8001dce:	2208      	movs	r2, #8
 8001dd0:	619a      	str	r2, [r3, #24]
			break;
 8001dd2:	e03b      	b.n	8001e4c <setDigit+0x110>
		case 3:
			D0_CLR;
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <setDigit+0x11c>)
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	619a      	str	r2, [r3, #24]
			D1_CLR;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <setDigit+0x11c>)
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <setDigit+0x120>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	619a      	str	r2, [r3, #24]
			D3_SET;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <setDigit+0x120>)
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0292      	lsls	r2, r2, #10
 8001dec:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <setDigit+0x120>)
 8001df0:	2204      	movs	r2, #4
 8001df2:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <setDigit+0x120>)
 8001df6:	2208      	movs	r2, #8
 8001df8:	619a      	str	r2, [r3, #24]
			break;
 8001dfa:	e027      	b.n	8001e4c <setDigit+0x110>
		case 4:
			D0_CLR;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <setDigit+0x11c>)
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	619a      	str	r2, [r3, #24]
			D1_CLR;
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <setDigit+0x11c>)
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <setDigit+0x120>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <setDigit+0x120>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	619a      	str	r2, [r3, #24]
			D4_SET;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <setDigit+0x120>)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	02d2      	lsls	r2, r2, #11
 8001e1a:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <setDigit+0x120>)
 8001e1e:	2208      	movs	r2, #8
 8001e20:	619a      	str	r2, [r3, #24]
			break;
 8001e22:	e013      	b.n	8001e4c <setDigit+0x110>
		case 5:
			D0_CLR;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <setDigit+0x11c>)
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	619a      	str	r2, [r3, #24]
			D1_CLR;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <setDigit+0x11c>)
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <setDigit+0x120>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <setDigit+0x120>)
 8001e38:	2202      	movs	r2, #2
 8001e3a:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <setDigit+0x120>)
 8001e3e:	2204      	movs	r2, #4
 8001e40:	619a      	str	r2, [r3, #24]
			D5_SET;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <setDigit+0x120>)
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	0312      	lsls	r2, r2, #12
 8001e48:	619a      	str	r2, [r3, #24]
			break;
 8001e4a:	46c0      	nop			; (mov r8, r8)
	}
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08002da8 	.word	0x08002da8
 8001e58:	50000800 	.word	0x50000800
 8001e5c:	50000c00 	.word	0x50000c00

08001e60 <LEDClr>:

void LEDClr(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	displayChar(' ', 0);
 8001e64:	2100      	movs	r1, #0
 8001e66:	2020      	movs	r0, #32
 8001e68:	f7ff fd66 	bl	8001938 <displayChar>
	displayChar(' ', 1);
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2020      	movs	r0, #32
 8001e70:	f7ff fd62 	bl	8001938 <displayChar>
	displayChar(' ', 2);
 8001e74:	2102      	movs	r1, #2
 8001e76:	2020      	movs	r0, #32
 8001e78:	f7ff fd5e 	bl	8001938 <displayChar>
	displayChar(' ', 3);
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	2020      	movs	r0, #32
 8001e80:	f7ff fd5a 	bl	8001938 <displayChar>
	displayChar(' ', 4);
 8001e84:	2104      	movs	r1, #4
 8001e86:	2020      	movs	r0, #32
 8001e88:	f7ff fd56 	bl	8001938 <displayChar>
	displayChar(' ', 5);
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	2020      	movs	r0, #32
 8001e90:	f7ff fd52 	bl	8001938 <displayChar>
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <TIM15_IRQHandler>:

// LED display multiplexing
__attribute__((interrupt)) void TIM15_IRQHandler(void)	{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	if (TIM15->SR & TIM_SR_CC1IF)	{
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <TIM15_IRQHandler+0xc0>)
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d054      	beq.n	8001f54 <TIM15_IRQHandler+0xb8>
		TIM15->SR &= ~TIM_SR_CC1IF;	// Clear flag
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <TIM15_IRQHandler+0xc0>)
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <TIM15_IRQHandler+0xc0>)
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	611a      	str	r2, [r3, #16]
			static uint8_t pos = 0;
			if (pos>5) pos = 0;
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d902      	bls.n	8001ec4 <TIM15_IRQHandler+0x28>
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
			if (dot_enable[pos] == 1) led_dsp[pos] -= 8192;		// Subtract (ENABLE) the bit value responsible for DOT display (note: active low)
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	001a      	movs	r2, r3
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <TIM15_IRQHandler+0xc8>)
 8001ecc:	5c9b      	ldrb	r3, [r3, r2]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10f      	bne.n	8001ef4 <TIM15_IRQHandler+0x58>
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	001a      	movs	r2, r3
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <TIM15_IRQHandler+0xcc>)
 8001edc:	0052      	lsls	r2, r2, #1
 8001ede:	5ad3      	ldrh	r3, [r2, r3]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	4921      	ldr	r1, [pc, #132]	; (8001f6c <TIM15_IRQHandler+0xd0>)
 8001ee8:	468c      	mov	ip, r1
 8001eea:	4463      	add	r3, ip
 8001eec:	b299      	uxth	r1, r3
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <TIM15_IRQHandler+0xcc>)
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	52d1      	strh	r1, [r2, r3]
			GPIOB->ODR = ((0x7FFF) & led_dsp[pos]);		// 0x7FFF masks the button value on PB15
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <TIM15_IRQHandler+0xcc>)
 8001efc:	0052      	lsls	r2, r2, #1
 8001efe:	5ad3      	ldrh	r3, [r2, r3]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	001a      	movs	r2, r3
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <TIM15_IRQHandler+0xd4>)
 8001f06:	0452      	lsls	r2, r2, #17
 8001f08:	0c52      	lsrs	r2, r2, #17
 8001f0a:	615a      	str	r2, [r3, #20]
			if (dot_enable[pos] == 1) led_dsp[pos] += 8192;		// Add (DISABLE) the bit value responsible for DOT display (note: active low)
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <TIM15_IRQHandler+0xc8>)
 8001f14:	5c9b      	ldrb	r3, [r3, r2]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d110      	bne.n	8001f3e <TIM15_IRQHandler+0xa2>
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	001a      	movs	r2, r3
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <TIM15_IRQHandler+0xcc>)
 8001f24:	0052      	lsls	r2, r2, #1
 8001f26:	5ad3      	ldrh	r3, [r2, r3]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001f2c:	7812      	ldrb	r2, [r2, #0]
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	0189      	lsls	r1, r1, #6
 8001f32:	468c      	mov	ip, r1
 8001f34:	4463      	add	r3, ip
 8001f36:	b299      	uxth	r1, r3
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <TIM15_IRQHandler+0xcc>)
 8001f3a:	0052      	lsls	r2, r2, #1
 8001f3c:	52d1      	strh	r1, [r2, r3]
			setDigit(pos);
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff fefa 	bl	8001d3c <setDigit>
			pos++;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <TIM15_IRQHandler+0xc4>)
 8001f52:	701a      	strb	r2, [r3, #0]

	}
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	2000003e 	.word	0x2000003e
 8001f64:	20000038 	.word	0x20000038
 8001f68:	20000040 	.word	0x20000040
 8001f6c:	ffffe000 	.word	0xffffe000
 8001f70:	50000400 	.word	0x50000400

08001f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <SystemInit+0x14>)
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0512      	lsls	r2, r2, #20
 8001f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <FillLEDNumber>:
volatile uint8_t brg_div = 18;

volatile uint16_t ADC_result;	// ADC result for the DEBUG purpose

// This function updates LED data array (first argument) with a number "nbr" on a given position 0 <= "pos" <= 3
void FillLEDNumber(volatile uint8_t * array, uint8_t pos, uint8_t nbr, uint8_t red, uint8_t green, uint8_t blue) {
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	46c6      	mov	lr, r8
 8001f90:	b500      	push	{lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	000c      	movs	r4, r1
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	1cfb      	adds	r3, r7, #3
 8001fa0:	1c22      	adds	r2, r4, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	1cbb      	adds	r3, r7, #2
 8001fa6:	1c02      	adds	r2, r0, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	1c7b      	adds	r3, r7, #1
 8001fac:	1c0a      	adds	r2, r1, #0
 8001fae:	701a      	strb	r2, [r3, #0]

	uint8_t shift;

	if (pos>1) shift = ((pos*13)+2);
 8001fb0:	1cfb      	adds	r3, r7, #3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d90c      	bls.n	8001fd2 <FillLEDNumber+0x46>
 8001fb8:	1cfb      	adds	r3, r7, #3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	1c1a      	adds	r2, r3, #0
 8001fbe:	1892      	adds	r2, r2, r2
 8001fc0:	18d2      	adds	r2, r2, r3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	230f      	movs	r3, #15
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	3202      	adds	r2, #2
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e009      	b.n	8001fe6 <FillLEDNumber+0x5a>
	else shift = (pos*13);
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	18f9      	adds	r1, r7, r3
 8001fd6:	1cfb      	adds	r3, r7, #3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	1c1a      	adds	r2, r3, #0
 8001fdc:	1892      	adds	r2, r2, r2
 8001fde:	18d2      	adds	r2, r2, r3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	18d3      	adds	r3, r2, r3
 8001fe4:	700b      	strb	r3, [r1, #0]

	switch(nbr) {
 8001fe6:	1cbb      	adds	r3, r7, #2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d900      	bls.n	8001ff0 <FillLEDNumber+0x64>
 8001fee:	e230      	b.n	8002452 <FillLEDNumber+0x4c6>
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	4bed      	ldr	r3, [pc, #948]	; (80023a8 <FillLEDNumber+0x41c>)
 8001ff4:	18d3      	adds	r3, r2, r3
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	469f      	mov	pc, r3
		case 0:
			FillLEDSegment(array, (0+shift), (11+shift), red, green, blue);
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	330b      	adds	r3, #11
 8002002:	b2da      	uxtb	r2, r3
 8002004:	1c7b      	adds	r3, r7, #1
 8002006:	781c      	ldrb	r4, [r3, #0]
 8002008:	187b      	adds	r3, r7, r1
 800200a:	7819      	ldrb	r1, [r3, #0]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	2324      	movs	r3, #36	; 0x24
 8002010:	2508      	movs	r5, #8
 8002012:	46ac      	mov	ip, r5
 8002014:	44bc      	add	ip, r7
 8002016:	4463      	add	r3, ip
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2320      	movs	r3, #32
 800201e:	2508      	movs	r5, #8
 8002020:	46ac      	mov	ip, r5
 8002022:	44bc      	add	ip, r7
 8002024:	4463      	add	r3, ip
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	0023      	movs	r3, r4
 800202c:	f000 fa86 	bl	800253c <FillLEDSegment>
			break;
 8002030:	e210      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 1:
			FillLEDSegment(array, (2+shift), (6+shift), red, green, blue);
 8002032:	220f      	movs	r2, #15
 8002034:	18bb      	adds	r3, r7, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3302      	adds	r3, #2
 800203a:	b2d9      	uxtb	r1, r3
 800203c:	18bb      	adds	r3, r7, r2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3306      	adds	r3, #6
 8002042:	b2da      	uxtb	r2, r3
 8002044:	1c7b      	adds	r3, r7, #1
 8002046:	781c      	ldrb	r4, [r3, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	2324      	movs	r3, #36	; 0x24
 800204c:	2508      	movs	r5, #8
 800204e:	46ac      	mov	ip, r5
 8002050:	44bc      	add	ip, r7
 8002052:	4463      	add	r3, ip
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2320      	movs	r3, #32
 800205a:	2508      	movs	r5, #8
 800205c:	46ac      	mov	ip, r5
 800205e:	44bc      	add	ip, r7
 8002060:	4463      	add	r3, ip
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	0023      	movs	r3, r4
 8002068:	f000 fa68 	bl	800253c <FillLEDSegment>
			break;
 800206c:	e1f2      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 2:
			FillLEDSegment(array, (0+shift), (4+shift), red, green, blue);
 800206e:	250f      	movs	r5, #15
 8002070:	197b      	adds	r3, r7, r5
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3304      	adds	r3, #4
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4698      	mov	r8, r3
 800207a:	1c7b      	adds	r3, r7, #1
 800207c:	781c      	ldrb	r4, [r3, #0]
 800207e:	197b      	adds	r3, r7, r5
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	2624      	movs	r6, #36	; 0x24
 8002086:	2308      	movs	r3, #8
 8002088:	18fa      	adds	r2, r7, r3
 800208a:	1993      	adds	r3, r2, r6
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2320      	movs	r3, #32
 8002092:	2208      	movs	r2, #8
 8002094:	4694      	mov	ip, r2
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	0023      	movs	r3, r4
 80020a0:	4642      	mov	r2, r8
 80020a2:	f000 fa4b 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (6+shift), (10+shift), red, green, blue);
 80020a6:	197b      	adds	r3, r7, r5
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3306      	adds	r3, #6
 80020ac:	b2d9      	uxtb	r1, r3
 80020ae:	197b      	adds	r3, r7, r5
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	330a      	adds	r3, #10
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4698      	mov	r8, r3
 80020b8:	1c7b      	adds	r3, r7, #1
 80020ba:	781c      	ldrb	r4, [r3, #0]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	2308      	movs	r3, #8
 80020c0:	18fa      	adds	r2, r7, r3
 80020c2:	1993      	adds	r3, r2, r6
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2320      	movs	r3, #32
 80020ca:	2208      	movs	r2, #8
 80020cc:	4694      	mov	ip, r2
 80020ce:	44bc      	add	ip, r7
 80020d0:	4463      	add	r3, ip
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	0023      	movs	r3, r4
 80020d8:	4642      	mov	r2, r8
 80020da:	f000 fa2f 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (12+shift), (12+shift), red, green, blue);
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	b2d9      	uxtb	r1, r3
 80020e6:	197b      	adds	r3, r7, r5
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	1c7b      	adds	r3, r7, #1
 80020f0:	781c      	ldrb	r4, [r3, #0]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	2308      	movs	r3, #8
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	199b      	adds	r3, r3, r6
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2320      	movs	r3, #32
 8002100:	2508      	movs	r5, #8
 8002102:	46ac      	mov	ip, r5
 8002104:	44bc      	add	ip, r7
 8002106:	4463      	add	r3, ip
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	0023      	movs	r3, r4
 800210e:	f000 fa15 	bl	800253c <FillLEDSegment>
			break;
 8002112:	e19f      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 3:
			FillLEDSegment(array, (0+shift), (8+shift), red, green, blue);
 8002114:	250f      	movs	r5, #15
 8002116:	197b      	adds	r3, r7, r5
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	3308      	adds	r3, #8
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4698      	mov	r8, r3
 8002120:	1c7b      	adds	r3, r7, #1
 8002122:	781c      	ldrb	r4, [r3, #0]
 8002124:	197b      	adds	r3, r7, r5
 8002126:	7819      	ldrb	r1, [r3, #0]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	2624      	movs	r6, #36	; 0x24
 800212c:	2308      	movs	r3, #8
 800212e:	18fa      	adds	r2, r7, r3
 8002130:	1993      	adds	r3, r2, r6
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2320      	movs	r3, #32
 8002138:	2208      	movs	r2, #8
 800213a:	4694      	mov	ip, r2
 800213c:	44bc      	add	ip, r7
 800213e:	4463      	add	r3, ip
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	0023      	movs	r3, r4
 8002146:	4642      	mov	r2, r8
 8002148:	f000 f9f8 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (10+shift), red, green, blue);
 800214c:	197b      	adds	r3, r7, r5
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	330a      	adds	r3, #10
 8002152:	b2d9      	uxtb	r1, r3
 8002154:	197b      	adds	r3, r7, r5
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	330a      	adds	r3, #10
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4698      	mov	r8, r3
 800215e:	1c7b      	adds	r3, r7, #1
 8002160:	781c      	ldrb	r4, [r3, #0]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	2308      	movs	r3, #8
 8002166:	18fa      	adds	r2, r7, r3
 8002168:	1993      	adds	r3, r2, r6
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2320      	movs	r3, #32
 8002170:	2208      	movs	r2, #8
 8002172:	4694      	mov	ip, r2
 8002174:	44bc      	add	ip, r7
 8002176:	4463      	add	r3, ip
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	0023      	movs	r3, r4
 800217e:	4642      	mov	r2, r8
 8002180:	f000 f9dc 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (12+shift), (12+shift), red, green, blue);
 8002184:	197b      	adds	r3, r7, r5
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	330c      	adds	r3, #12
 800218a:	b2d9      	uxtb	r1, r3
 800218c:	197b      	adds	r3, r7, r5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	330c      	adds	r3, #12
 8002192:	b2da      	uxtb	r2, r3
 8002194:	1c7b      	adds	r3, r7, #1
 8002196:	781c      	ldrb	r4, [r3, #0]
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	2308      	movs	r3, #8
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	199b      	adds	r3, r3, r6
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2320      	movs	r3, #32
 80021a6:	2508      	movs	r5, #8
 80021a8:	46ac      	mov	ip, r5
 80021aa:	44bc      	add	ip, r7
 80021ac:	4463      	add	r3, ip
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	0023      	movs	r3, r4
 80021b4:	f000 f9c2 	bl	800253c <FillLEDSegment>
			break;
 80021b8:	e14c      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 4:
			FillLEDSegment(array, (0+shift), (0+shift), red, green, blue);
 80021ba:	1c7b      	adds	r3, r7, #1
 80021bc:	781c      	ldrb	r4, [r3, #0]
 80021be:	250f      	movs	r5, #15
 80021c0:	197b      	adds	r3, r7, r5
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4698      	mov	r8, r3
 80021c6:	197b      	adds	r3, r7, r5
 80021c8:	7819      	ldrb	r1, [r3, #0]
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	2624      	movs	r6, #36	; 0x24
 80021ce:	2308      	movs	r3, #8
 80021d0:	18fa      	adds	r2, r7, r3
 80021d2:	1993      	adds	r3, r2, r6
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2320      	movs	r3, #32
 80021da:	2208      	movs	r2, #8
 80021dc:	4694      	mov	ip, r2
 80021de:	44bc      	add	ip, r7
 80021e0:	4463      	add	r3, ip
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	0023      	movs	r3, r4
 80021e8:	4642      	mov	r2, r8
 80021ea:	f000 f9a7 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (2+shift), (6+shift), red, green, blue);
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	3302      	adds	r3, #2
 80021f4:	b2d9      	uxtb	r1, r3
 80021f6:	197b      	adds	r3, r7, r5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	3306      	adds	r3, #6
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4698      	mov	r8, r3
 8002200:	1c7b      	adds	r3, r7, #1
 8002202:	781c      	ldrb	r4, [r3, #0]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	2308      	movs	r3, #8
 8002208:	18fa      	adds	r2, r7, r3
 800220a:	1993      	adds	r3, r2, r6
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2320      	movs	r3, #32
 8002212:	2208      	movs	r2, #8
 8002214:	4694      	mov	ip, r2
 8002216:	44bc      	add	ip, r7
 8002218:	4463      	add	r3, ip
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	0023      	movs	r3, r4
 8002220:	4642      	mov	r2, r8
 8002222:	f000 f98b 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (12+shift), red, green, blue);
 8002226:	197b      	adds	r3, r7, r5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	330a      	adds	r3, #10
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	197b      	adds	r3, r7, r5
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	b2da      	uxtb	r2, r3
 8002236:	1c7b      	adds	r3, r7, #1
 8002238:	781c      	ldrb	r4, [r3, #0]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	2308      	movs	r3, #8
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	199b      	adds	r3, r3, r6
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2320      	movs	r3, #32
 8002248:	2508      	movs	r5, #8
 800224a:	46ac      	mov	ip, r5
 800224c:	44bc      	add	ip, r7
 800224e:	4463      	add	r3, ip
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0023      	movs	r3, r4
 8002256:	f000 f971 	bl	800253c <FillLEDSegment>
			break;
 800225a:	e0fb      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 5:
			FillLEDSegment(array, (0+shift), (2+shift), red, green, blue);
 800225c:	250f      	movs	r5, #15
 800225e:	197b      	adds	r3, r7, r5
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	3302      	adds	r3, #2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4698      	mov	r8, r3
 8002268:	1c7b      	adds	r3, r7, #1
 800226a:	781c      	ldrb	r4, [r3, #0]
 800226c:	197b      	adds	r3, r7, r5
 800226e:	7819      	ldrb	r1, [r3, #0]
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	2624      	movs	r6, #36	; 0x24
 8002274:	2308      	movs	r3, #8
 8002276:	18fa      	adds	r2, r7, r3
 8002278:	1993      	adds	r3, r2, r6
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2320      	movs	r3, #32
 8002280:	2208      	movs	r2, #8
 8002282:	4694      	mov	ip, r2
 8002284:	44bc      	add	ip, r7
 8002286:	4463      	add	r3, ip
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	0023      	movs	r3, r4
 800228e:	4642      	mov	r2, r8
 8002290:	f000 f954 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (4+shift), (8+shift), red, green, blue);
 8002294:	197b      	adds	r3, r7, r5
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	3304      	adds	r3, #4
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	197b      	adds	r3, r7, r5
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3308      	adds	r3, #8
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4698      	mov	r8, r3
 80022a6:	1c7b      	adds	r3, r7, #1
 80022a8:	781c      	ldrb	r4, [r3, #0]
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	2308      	movs	r3, #8
 80022ae:	18fa      	adds	r2, r7, r3
 80022b0:	1993      	adds	r3, r2, r6
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2320      	movs	r3, #32
 80022b8:	2208      	movs	r2, #8
 80022ba:	4694      	mov	ip, r2
 80022bc:	44bc      	add	ip, r7
 80022be:	4463      	add	r3, ip
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	0023      	movs	r3, r4
 80022c6:	4642      	mov	r2, r8
 80022c8:	f000 f938 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (12+shift), red, green, blue);
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	330a      	adds	r3, #10
 80022d2:	b2d9      	uxtb	r1, r3
 80022d4:	197b      	adds	r3, r7, r5
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	1c7b      	adds	r3, r7, #1
 80022de:	781c      	ldrb	r4, [r3, #0]
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	2308      	movs	r3, #8
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	199b      	adds	r3, r3, r6
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2320      	movs	r3, #32
 80022ee:	2508      	movs	r5, #8
 80022f0:	46ac      	mov	ip, r5
 80022f2:	44bc      	add	ip, r7
 80022f4:	4463      	add	r3, ip
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	0023      	movs	r3, r4
 80022fc:	f000 f91e 	bl	800253c <FillLEDSegment>
			break;
 8002300:	e0a8      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 6:
			FillLEDSegment(array, (0+shift), (2+shift), red, green, blue);
 8002302:	250f      	movs	r5, #15
 8002304:	197b      	adds	r3, r7, r5
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	3302      	adds	r3, #2
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4698      	mov	r8, r3
 800230e:	1c7b      	adds	r3, r7, #1
 8002310:	781c      	ldrb	r4, [r3, #0]
 8002312:	197b      	adds	r3, r7, r5
 8002314:	7819      	ldrb	r1, [r3, #0]
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	2624      	movs	r6, #36	; 0x24
 800231a:	2308      	movs	r3, #8
 800231c:	18fa      	adds	r2, r7, r3
 800231e:	1993      	adds	r3, r2, r6
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2320      	movs	r3, #32
 8002326:	2208      	movs	r2, #8
 8002328:	4694      	mov	ip, r2
 800232a:	44bc      	add	ip, r7
 800232c:	4463      	add	r3, ip
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	0023      	movs	r3, r4
 8002334:	4642      	mov	r2, r8
 8002336:	f000 f901 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (4+shift), (12+shift), red, green, blue);
 800233a:	197b      	adds	r3, r7, r5
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3304      	adds	r3, #4
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	197b      	adds	r3, r7, r5
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	b2da      	uxtb	r2, r3
 800234a:	1c7b      	adds	r3, r7, #1
 800234c:	781c      	ldrb	r4, [r3, #0]
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	2308      	movs	r3, #8
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	199b      	adds	r3, r3, r6
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2320      	movs	r3, #32
 800235c:	2508      	movs	r5, #8
 800235e:	46ac      	mov	ip, r5
 8002360:	44bc      	add	ip, r7
 8002362:	4463      	add	r3, ip
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	0023      	movs	r3, r4
 800236a:	f000 f8e7 	bl	800253c <FillLEDSegment>
			break;
 800236e:	e071      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 7:
			FillLEDSegment(array, (0+shift), (6+shift), red, green, blue);
 8002370:	210f      	movs	r1, #15
 8002372:	187b      	adds	r3, r7, r1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3306      	adds	r3, #6
 8002378:	b2da      	uxtb	r2, r3
 800237a:	1c7b      	adds	r3, r7, #1
 800237c:	781c      	ldrb	r4, [r3, #0]
 800237e:	187b      	adds	r3, r7, r1
 8002380:	7819      	ldrb	r1, [r3, #0]
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	2324      	movs	r3, #36	; 0x24
 8002386:	2508      	movs	r5, #8
 8002388:	46ac      	mov	ip, r5
 800238a:	44bc      	add	ip, r7
 800238c:	4463      	add	r3, ip
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	2320      	movs	r3, #32
 8002394:	2508      	movs	r5, #8
 8002396:	46ac      	mov	ip, r5
 8002398:	44bc      	add	ip, r7
 800239a:	4463      	add	r3, ip
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	0023      	movs	r3, r4
 80023a2:	f000 f8cb 	bl	800253c <FillLEDSegment>
			break;
 80023a6:	e055      	b.n	8002454 <FillLEDNumber+0x4c8>
 80023a8:	08002dc0 	.word	0x08002dc0
		case 8:
			FillLEDSegment(array, (0+shift), (12+shift), red, green, blue);
 80023ac:	210f      	movs	r1, #15
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	1c7b      	adds	r3, r7, #1
 80023b8:	781c      	ldrb	r4, [r3, #0]
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	7819      	ldrb	r1, [r3, #0]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	2324      	movs	r3, #36	; 0x24
 80023c2:	2508      	movs	r5, #8
 80023c4:	46ac      	mov	ip, r5
 80023c6:	44bc      	add	ip, r7
 80023c8:	4463      	add	r3, ip
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2320      	movs	r3, #32
 80023d0:	2508      	movs	r5, #8
 80023d2:	46ac      	mov	ip, r5
 80023d4:	44bc      	add	ip, r7
 80023d6:	4463      	add	r3, ip
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	0023      	movs	r3, r4
 80023de:	f000 f8ad 	bl	800253c <FillLEDSegment>
			break;
 80023e2:	e037      	b.n	8002454 <FillLEDNumber+0x4c8>
		case 9:
			FillLEDSegment(array, (0+shift), (8+shift), red, green, blue);
 80023e4:	250f      	movs	r5, #15
 80023e6:	197b      	adds	r3, r7, r5
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	3308      	adds	r3, #8
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4698      	mov	r8, r3
 80023f0:	1c7b      	adds	r3, r7, #1
 80023f2:	781c      	ldrb	r4, [r3, #0]
 80023f4:	197b      	adds	r3, r7, r5
 80023f6:	7819      	ldrb	r1, [r3, #0]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	2624      	movs	r6, #36	; 0x24
 80023fc:	2308      	movs	r3, #8
 80023fe:	18fa      	adds	r2, r7, r3
 8002400:	1993      	adds	r3, r2, r6
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2320      	movs	r3, #32
 8002408:	2208      	movs	r2, #8
 800240a:	4694      	mov	ip, r2
 800240c:	44bc      	add	ip, r7
 800240e:	4463      	add	r3, ip
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	0023      	movs	r3, r4
 8002416:	4642      	mov	r2, r8
 8002418:	f000 f890 	bl	800253c <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (12+shift), red, green, blue);
 800241c:	197b      	adds	r3, r7, r5
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	330a      	adds	r3, #10
 8002422:	b2d9      	uxtb	r1, r3
 8002424:	197b      	adds	r3, r7, r5
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	b2da      	uxtb	r2, r3
 800242c:	1c7b      	adds	r3, r7, #1
 800242e:	781c      	ldrb	r4, [r3, #0]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	2308      	movs	r3, #8
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	199b      	adds	r3, r3, r6
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2320      	movs	r3, #32
 800243e:	2508      	movs	r5, #8
 8002440:	46ac      	mov	ip, r5
 8002442:	44bc      	add	ip, r7
 8002444:	4463      	add	r3, ip
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	0023      	movs	r3, r4
 800244c:	f000 f876 	bl	800253c <FillLEDSegment>
			break;
 8002450:	e000      	b.n	8002454 <FillLEDNumber+0x4c8>
		default:
			break;
 8002452:	46c0      	nop			; (mov r8, r8)
	}
}
 8002454:	46c0      	nop			; (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b004      	add	sp, #16
 800245a:	bc04      	pop	{r2}
 800245c:	4690      	mov	r8, r2
 800245e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002460 <FillLEDArray>:



// This function updates the entire LED data buffer (first argument)
void FillLEDArray(volatile uint8_t * array, uint8_t red, uint8_t green, uint8_t blue) {		// * array is the array to be entirely filled with LED data
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	000c      	movs	r4, r1
 800246a:	0010      	movs	r0, r2
 800246c:	0019      	movs	r1, r3
 800246e:	1cfb      	adds	r3, r7, #3
 8002470:	1c22      	adds	r2, r4, #0
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	1cbb      	adds	r3, r7, #2
 8002476:	1c02      	adds	r2, r0, #0
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	1c7b      	adds	r3, r7, #1
 800247c:	1c0a      	adds	r2, r1, #0
 800247e:	701a      	strb	r2, [r3, #0]
	uint16_t a, b, c;
	b=0;
 8002480:	230c      	movs	r3, #12
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]
	for (a=0; a<(WS_NUMBER*24); a++) {
 8002488:	230e      	movs	r3, #14
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2200      	movs	r2, #0
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	e045      	b.n	800251e <FillLEDArray+0xbe>
		getBaseLed(green, red, blue);
 8002492:	1c7b      	adds	r3, r7, #1
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	1cfb      	adds	r3, r7, #3
 8002498:	7819      	ldrb	r1, [r3, #0]
 800249a:	1cbb      	adds	r3, r7, #2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 f8c2 	bl	8002628 <getBaseLed>
		c=0;
 80024a4:	230a      	movs	r3, #10
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 80024ac:	e01a      	b.n	80024e4 <FillLEDArray+0x84>
			array[a] = b_led[b]; a++; b++;
 80024ae:	200c      	movs	r0, #12
 80024b0:	183b      	adds	r3, r7, r0
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	240e      	movs	r4, #14
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	18cb      	adds	r3, r1, r3
 80024be:	491d      	ldr	r1, [pc, #116]	; (8002534 <FillLEDArray+0xd4>)
 80024c0:	5c8a      	ldrb	r2, [r1, r2]
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	3201      	adds	r2, #1
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	183b      	adds	r3, r7, r0
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	183b      	adds	r3, r7, r0
 80024d4:	3201      	adds	r2, #1
 80024d6:	801a      	strh	r2, [r3, #0]
			c++;
 80024d8:	210a      	movs	r1, #10
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	881a      	ldrh	r2, [r3, #0]
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	3201      	adds	r2, #1
 80024e2:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 80024e4:	230a      	movs	r3, #10
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	2b16      	cmp	r3, #22
 80024ec:	d9df      	bls.n	80024ae <FillLEDArray+0x4e>
		}
		array[a] = b_led[b]; b++;
 80024ee:	200c      	movs	r0, #12
 80024f0:	183b      	adds	r3, r7, r0
 80024f2:	881a      	ldrh	r2, [r3, #0]
 80024f4:	240e      	movs	r4, #14
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	18cb      	adds	r3, r1, r3
 80024fe:	490d      	ldr	r1, [pc, #52]	; (8002534 <FillLEDArray+0xd4>)
 8002500:	5c8a      	ldrb	r2, [r1, r2]
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	183b      	adds	r3, r7, r0
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	183b      	adds	r3, r7, r0
 800250a:	3201      	adds	r2, #1
 800250c:	801a      	strh	r2, [r3, #0]
		b=0;
 800250e:	183b      	adds	r3, r7, r0
 8002510:	2200      	movs	r2, #0
 8002512:	801a      	strh	r2, [r3, #0]
	for (a=0; a<(WS_NUMBER*24); a++) {
 8002514:	193b      	adds	r3, r7, r4
 8002516:	881a      	ldrh	r2, [r3, #0]
 8002518:	193b      	adds	r3, r7, r4
 800251a:	3201      	adds	r2, #1
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	230e      	movs	r3, #14
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <FillLEDArray+0xd8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d9b3      	bls.n	8002492 <FillLEDArray+0x32>
	}
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b005      	add	sp, #20
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	20000570 	.word	0x20000570
 8002538:	0000050f 	.word	0x0000050f

0800253c <FillLEDSegment>:
// This function updates LED data array (first argument) within specified indexes: start_idx and end_idx
void FillLEDSegment(volatile uint8_t * array, uint8_t start_idx, uint8_t end_idx, uint8_t red, uint8_t green, uint8_t blue) {
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	000c      	movs	r4, r1
 8002546:	0010      	movs	r0, r2
 8002548:	0019      	movs	r1, r3
 800254a:	1cfb      	adds	r3, r7, #3
 800254c:	1c22      	adds	r2, r4, #0
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	1cbb      	adds	r3, r7, #2
 8002552:	1c02      	adds	r2, r0, #0
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	1c7b      	adds	r3, r7, #1
 8002558:	1c0a      	adds	r2, r1, #0
 800255a:	701a      	strb	r2, [r3, #0]
	uint16_t a, b, c;
	b=0;
 800255c:	230c      	movs	r3, #12
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2200      	movs	r2, #0
 8002562:	801a      	strh	r2, [r3, #0]
	for (a=(start_idx*24); a<=(end_idx*24); a++) {
 8002564:	1cfb      	adds	r3, r7, #3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b29a      	uxth	r2, r3
 800256a:	230e      	movs	r3, #14
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2118      	movs	r1, #24
 8002570:	434a      	muls	r2, r1
 8002572:	801a      	strh	r2, [r3, #0]
 8002574:	e047      	b.n	8002606 <FillLEDSegment+0xca>
		getBaseLed(green, red, blue);
 8002576:	2324      	movs	r3, #36	; 0x24
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	1c7b      	adds	r3, r7, #1
 800257e:	7819      	ldrb	r1, [r3, #0]
 8002580:	2320      	movs	r3, #32
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f84e 	bl	8002628 <getBaseLed>
		c=0;
 800258c:	230a      	movs	r3, #10
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 8002594:	e01a      	b.n	80025cc <FillLEDSegment+0x90>
			array[a] = b_led[b]; a++; b++;
 8002596:	200c      	movs	r0, #12
 8002598:	183b      	adds	r3, r7, r0
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	240e      	movs	r4, #14
 800259e:	193b      	adds	r3, r7, r4
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	18cb      	adds	r3, r1, r3
 80025a6:	491f      	ldr	r1, [pc, #124]	; (8002624 <FillLEDSegment+0xe8>)
 80025a8:	5c8a      	ldrb	r2, [r1, r2]
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	3201      	adds	r2, #1
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	183b      	adds	r3, r7, r0
 80025bc:	3201      	adds	r2, #1
 80025be:	801a      	strh	r2, [r3, #0]
			c++;
 80025c0:	210a      	movs	r1, #10
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	3201      	adds	r2, #1
 80025ca:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 80025cc:	230a      	movs	r3, #10
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	2b16      	cmp	r3, #22
 80025d4:	d9df      	bls.n	8002596 <FillLEDSegment+0x5a>
		}
		array[a] = b_led[b]; 	  b++;
 80025d6:	200c      	movs	r0, #12
 80025d8:	183b      	adds	r3, r7, r0
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	240e      	movs	r4, #14
 80025de:	193b      	adds	r3, r7, r4
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	18cb      	adds	r3, r1, r3
 80025e6:	490f      	ldr	r1, [pc, #60]	; (8002624 <FillLEDSegment+0xe8>)
 80025e8:	5c8a      	ldrb	r2, [r1, r2]
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	183b      	adds	r3, r7, r0
 80025f2:	3201      	adds	r2, #1
 80025f4:	801a      	strh	r2, [r3, #0]
		b=0;
 80025f6:	183b      	adds	r3, r7, r0
 80025f8:	2200      	movs	r2, #0
 80025fa:	801a      	strh	r2, [r3, #0]
	for (a=(start_idx*24); a<=(end_idx*24); a++) {
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	193b      	adds	r3, r7, r4
 8002602:	3201      	adds	r2, #1
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	230e      	movs	r3, #14
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	8819      	ldrh	r1, [r3, #0]
 800260c:	1cbb      	adds	r3, r7, #2
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	0013      	movs	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	189b      	adds	r3, r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4299      	cmp	r1, r3
 800261a:	ddac      	ble.n	8002576 <FillLEDSegment+0x3a>
	}
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b005      	add	sp, #20
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	20000570 	.word	0x20000570

08002628 <getBaseLed>:

// This function updates b_led[24] array
void getBaseLed(uint8_t green, uint8_t red, uint8_t blue) {		// *bld is the array to be updated
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	0004      	movs	r4, r0
 8002630:	0008      	movs	r0, r1
 8002632:	0011      	movs	r1, r2
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	1c22      	adds	r2, r4, #0
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	1dbb      	adds	r3, r7, #6
 800263c:	1c02      	adds	r2, r0, #0
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	1d7b      	adds	r3, r7, #5
 8002642:	1c0a      	adds	r2, r1, #0
 8002644:	701a      	strb	r2, [r3, #0]
	uint8_t k, i;

	getBaseColour(green);
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f878 	bl	8002740 <getBaseColour>
	i=7;
 8002650:	230e      	movs	r3, #14
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2207      	movs	r2, #7
 8002656:	701a      	strb	r2, [r3, #0]
	for (k=0; k<8; k++) {
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e013      	b.n	800268a <getBaseLed+0x62>
		b_led[k] = b_colour[i];
 8002662:	200e      	movs	r0, #14
 8002664:	183b      	adds	r3, r7, r0
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	240f      	movs	r4, #15
 800266a:	193b      	adds	r3, r7, r4
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4932      	ldr	r1, [pc, #200]	; (8002738 <getBaseLed+0x110>)
 8002670:	5c89      	ldrb	r1, [r1, r2]
 8002672:	4a32      	ldr	r2, [pc, #200]	; (800273c <getBaseLed+0x114>)
 8002674:	54d1      	strb	r1, [r2, r3]
		i--;
 8002676:	183b      	adds	r3, r7, r0
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	183b      	adds	r3, r7, r0
 800267c:	3a01      	subs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
	for (k=0; k<8; k++) {
 8002680:	193b      	adds	r3, r7, r4
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	193b      	adds	r3, r7, r4
 8002686:	3201      	adds	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b07      	cmp	r3, #7
 8002692:	d9e6      	bls.n	8002662 <getBaseLed+0x3a>
	}
	getBaseColour(red);
 8002694:	1dbb      	adds	r3, r7, #6
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f851 	bl	8002740 <getBaseColour>
	i=7;
 800269e:	230e      	movs	r3, #14
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2207      	movs	r2, #7
 80026a4:	701a      	strb	r2, [r3, #0]
	for (k=8; k<16; k++) {
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2208      	movs	r2, #8
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e013      	b.n	80026d8 <getBaseLed+0xb0>
		b_led[k] = b_colour[i];
 80026b0:	200e      	movs	r0, #14
 80026b2:	183b      	adds	r3, r7, r0
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	240f      	movs	r4, #15
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	491e      	ldr	r1, [pc, #120]	; (8002738 <getBaseLed+0x110>)
 80026be:	5c89      	ldrb	r1, [r1, r2]
 80026c0:	4a1e      	ldr	r2, [pc, #120]	; (800273c <getBaseLed+0x114>)
 80026c2:	54d1      	strb	r1, [r2, r3]
		i--;
 80026c4:	183b      	adds	r3, r7, r0
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	183b      	adds	r3, r7, r0
 80026ca:	3a01      	subs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
	for (k=8; k<16; k++) {
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	3201      	adds	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	230f      	movs	r3, #15
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	d9e6      	bls.n	80026b0 <getBaseLed+0x88>
	}
	getBaseColour(blue);
 80026e2:	1d7b      	adds	r3, r7, #5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f82a 	bl	8002740 <getBaseColour>
	i=7;
 80026ec:	230e      	movs	r3, #14
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2207      	movs	r2, #7
 80026f2:	701a      	strb	r2, [r3, #0]
	for (k=16; k<24; k++) {
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2210      	movs	r2, #16
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e013      	b.n	8002726 <getBaseLed+0xfe>
		b_led[k] = b_colour[i];
 80026fe:	200e      	movs	r0, #14
 8002700:	183b      	adds	r3, r7, r0
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	240f      	movs	r4, #15
 8002706:	193b      	adds	r3, r7, r4
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	490b      	ldr	r1, [pc, #44]	; (8002738 <getBaseLed+0x110>)
 800270c:	5c89      	ldrb	r1, [r1, r2]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <getBaseLed+0x114>)
 8002710:	54d1      	strb	r1, [r2, r3]
		i--;
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	183b      	adds	r3, r7, r0
 8002718:	3a01      	subs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
	for (k=16; k<24; k++) {
 800271c:	193b      	adds	r3, r7, r4
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	193b      	adds	r3, r7, r4
 8002722:	3201      	adds	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	230f      	movs	r3, #15
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b17      	cmp	r3, #23
 800272e:	d9e6      	bls.n	80026fe <getBaseLed+0xd6>
	}
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b005      	add	sp, #20
 8002736:	bd90      	pop	{r4, r7, pc}
 8002738:	20000588 	.word	0x20000588
 800273c:	20000570 	.word	0x20000570

08002740 <getBaseColour>:

// This function updates b_colour[8] array (one colour out of three/led)
void getBaseColour(uint8_t col_val) {	// *bcl is the array to be updated
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	0002      	movs	r2, r0
 8002748:	1dfb      	adds	r3, r7, #7
 800274a:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	for (uint8_t j=0; j<8; j++) {
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e022      	b.n	800279c <getBaseColour+0x5c>
		temp = (col_val>>j);
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	230f      	movs	r3, #15
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	411a      	asrs	r2, r3
 8002762:	210e      	movs	r1, #14
 8002764:	187b      	adds	r3, r7, r1
 8002766:	701a      	strb	r2, [r3, #0]
		if ((temp%2) == 0) b_colour[j] = SPI_zero;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <getBaseColour+0x44>
 8002776:	230f      	movs	r3, #15
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <getBaseColour+0x70>)
 800277e:	21c0      	movs	r1, #192	; 0xc0
 8002780:	54d1      	strb	r1, [r2, r3]
 8002782:	e005      	b.n	8002790 <getBaseColour+0x50>
		else b_colour[j] = SPI_one;
 8002784:	230f      	movs	r3, #15
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <getBaseColour+0x70>)
 800278c:	21f8      	movs	r1, #248	; 0xf8
 800278e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j=0; j<8; j++) {
 8002790:	210f      	movs	r1, #15
 8002792:	187b      	adds	r3, r7, r1
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	187b      	adds	r3, r7, r1
 8002798:	3201      	adds	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	230f      	movs	r3, #15
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b07      	cmp	r3, #7
 80027a4:	d9d7      	bls.n	8002756 <getBaseColour+0x16>
	}
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	20000588 	.word	0x20000588

080027b4 <SPI_SEND_WSBUF>:

void SPI_SEND_WSBUF(uint8_t * buf, uint16_t size) {
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	000a      	movs	r2, r1
 80027be:	1cbb      	adds	r3, r7, #2
 80027c0:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<(WS_NUMBER*24); i++) {
 80027c2:	230e      	movs	r3, #14
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2200      	movs	r2, #0
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e00c      	b.n	80027e6 <SPI_SEND_WSBUF+0x32>
		SpiLed_Send(LED_buf[i]);
 80027cc:	240e      	movs	r4, #14
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SPI_SEND_WSBUF+0x48>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f814 	bl	8002804 <SpiLed_Send>
	for(uint16_t i = 0; i<(WS_NUMBER*24); i++) {
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	3201      	adds	r2, #1
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	230e      	movs	r3, #14
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <SPI_SEND_WSBUF+0x4c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d9ec      	bls.n	80027cc <SPI_SEND_WSBUF+0x18>
	}
}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b005      	add	sp, #20
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000058 	.word	0x20000058
 8002800:	0000050f 	.word	0x0000050f

08002804 <SpiLed_Send>:

void SpiLed_Send(uint8_t data) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	0002      	movs	r2, r0
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	701a      	strb	r2, [r3, #0]
	while( !(SPI1->SR & SPI_SR_TXE) );
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <SpiLed_Send+0x28>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d0fa      	beq.n	8002812 <SpiLed_Send+0xe>
	SPI1->DR = data;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <SpiLed_Send+0x28>)
 800281e:	1dfa      	adds	r2, r7, #7
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40013000 	.word	0x40013000

08002830 <assignColour>:

// Update colour variable passed depending on a time (#define in clock.h file)
void assignColour(uint8_t ht, uint8_t hu, uint8_t * r, uint8_t * g, uint8_t * b) {
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60ba      	str	r2, [r7, #8]
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	240f      	movs	r4, #15
 800283c:	193b      	adds	r3, r7, r4
 800283e:	1c02      	adds	r2, r0, #0
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	200e      	movs	r0, #14
 8002844:	183b      	adds	r3, r7, r0
 8002846:	1c0a      	adds	r2, r1, #0
 8002848:	701a      	strb	r2, [r3, #0]
	uint8_t hr = 10*(ht) + hu;	// Hour in decimal format
 800284a:	193b      	adds	r3, r7, r4
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	1c1a      	adds	r2, r3, #0
 8002850:	0092      	lsls	r2, r2, #2
 8002852:	18d3      	adds	r3, r2, r3
 8002854:	18db      	adds	r3, r3, r3
 8002856:	b2d9      	uxtb	r1, r3
 8002858:	2417      	movs	r4, #23
 800285a:	193b      	adds	r3, r7, r4
 800285c:	183a      	adds	r2, r7, r0
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	188a      	adds	r2, r1, r2
 8002862:	701a      	strb	r2, [r3, #0]
	*r=0; *g=0; *b=0;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
	if (hr >= 6 && hr < 12) *r = (R_T1/brg_div);
 8002876:	193b      	adds	r3, r7, r4
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d910      	bls.n	80028a0 <assignColour+0x70>
 800287e:	2317      	movs	r3, #23
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b0b      	cmp	r3, #11
 8002886:	d80b      	bhi.n	80028a0 <assignColour+0x70>
 8002888:	4bac      	ldr	r3, [pc, #688]	; (8002b3c <assignColour+0x30c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	0019      	movs	r1, r3
 8002890:	20a0      	movs	r0, #160	; 0xa0
 8002892:	f7fd fcc1 	bl	8000218 <__divsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e060      	b.n	8002962 <assignColour+0x132>
	else if (hr >= 12 && hr < 18) *r = (R_T2/brg_div);
 80028a0:	2317      	movs	r3, #23
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b0b      	cmp	r3, #11
 80028a8:	d910      	bls.n	80028cc <assignColour+0x9c>
 80028aa:	2317      	movs	r3, #23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b11      	cmp	r3, #17
 80028b2:	d80b      	bhi.n	80028cc <assignColour+0x9c>
 80028b4:	4ba1      	ldr	r3, [pc, #644]	; (8002b3c <assignColour+0x30c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	0019      	movs	r1, r3
 80028bc:	2064      	movs	r0, #100	; 0x64
 80028be:	f7fd fcab 	bl	8000218 <__divsi3>
 80028c2:	0003      	movs	r3, r0
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e04a      	b.n	8002962 <assignColour+0x132>
	else if (hr >= 18 && hr < 21) *r = (R_T3/brg_div);
 80028cc:	2317      	movs	r3, #23
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b11      	cmp	r3, #17
 80028d4:	d910      	bls.n	80028f8 <assignColour+0xc8>
 80028d6:	2317      	movs	r3, #23
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b14      	cmp	r3, #20
 80028de:	d80b      	bhi.n	80028f8 <assignColour+0xc8>
 80028e0:	4b96      	ldr	r3, [pc, #600]	; (8002b3c <assignColour+0x30c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	0019      	movs	r1, r3
 80028e8:	20aa      	movs	r0, #170	; 0xaa
 80028ea:	f7fd fc95 	bl	8000218 <__divsi3>
 80028ee:	0003      	movs	r3, r0
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e034      	b.n	8002962 <assignColour+0x132>
	else if (hr >= 21 && hr < 23) *r = (R_T4/brg_div);
 80028f8:	2317      	movs	r3, #23
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b14      	cmp	r3, #20
 8002900:	d910      	bls.n	8002924 <assignColour+0xf4>
 8002902:	2317      	movs	r3, #23
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b16      	cmp	r3, #22
 800290a:	d80b      	bhi.n	8002924 <assignColour+0xf4>
 800290c:	4b8b      	ldr	r3, [pc, #556]	; (8002b3c <assignColour+0x30c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	0019      	movs	r1, r3
 8002914:	209b      	movs	r0, #155	; 0x9b
 8002916:	f7fd fc7f 	bl	8000218 <__divsi3>
 800291a:	0003      	movs	r3, r0
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e01e      	b.n	8002962 <assignColour+0x132>
	else if (hr >= 23 && hr < 5) *r = (R_T5/brg_div);
 8002924:	2317      	movs	r3, #23
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b16      	cmp	r3, #22
 800292c:	d90a      	bls.n	8002944 <assignColour+0x114>
 800292e:	2317      	movs	r3, #23
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d805      	bhi.n	8002944 <assignColour+0x114>
 8002938:	4b80      	ldr	r3, [pc, #512]	; (8002b3c <assignColour+0x30c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e00e      	b.n	8002962 <assignColour+0x132>
	else if (hr >= 5 && hr < 6) *r = (R_T6/brg_div);
 8002944:	2317      	movs	r3, #23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d909      	bls.n	8002962 <assignColour+0x132>
 800294e:	2317      	movs	r3, #23
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d804      	bhi.n	8002962 <assignColour+0x132>
 8002958:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <assignColour+0x30c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]

	if (hr >= 6 && hr < 12) *g = (G_T1/brg_div);
 8002962:	2317      	movs	r3, #23
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d910      	bls.n	800298e <assignColour+0x15e>
 800296c:	2317      	movs	r3, #23
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b0b      	cmp	r3, #11
 8002974:	d80b      	bhi.n	800298e <assignColour+0x15e>
 8002976:	4b71      	ldr	r3, [pc, #452]	; (8002b3c <assignColour+0x30c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	0019      	movs	r1, r3
 800297e:	205f      	movs	r0, #95	; 0x5f
 8002980:	f7fd fc4a 	bl	8000218 <__divsi3>
 8002984:	0003      	movs	r3, r0
 8002986:	b2da      	uxtb	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e05a      	b.n	8002a44 <assignColour+0x214>
	else if (hr >= 12 && hr < 18) *g = (G_T2/brg_div);
 800298e:	2317      	movs	r3, #23
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b0b      	cmp	r3, #11
 8002996:	d910      	bls.n	80029ba <assignColour+0x18a>
 8002998:	2317      	movs	r3, #23
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b11      	cmp	r3, #17
 80029a0:	d80b      	bhi.n	80029ba <assignColour+0x18a>
 80029a2:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <assignColour+0x30c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	0019      	movs	r1, r3
 80029aa:	209b      	movs	r0, #155	; 0x9b
 80029ac:	f7fd fc34 	bl	8000218 <__divsi3>
 80029b0:	0003      	movs	r3, r0
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e044      	b.n	8002a44 <assignColour+0x214>
	else if (hr >= 18 && hr < 21) *g = (G_T3/brg_div);
 80029ba:	2317      	movs	r3, #23
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b11      	cmp	r3, #17
 80029c2:	d910      	bls.n	80029e6 <assignColour+0x1b6>
 80029c4:	2317      	movs	r3, #23
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b14      	cmp	r3, #20
 80029cc:	d80b      	bhi.n	80029e6 <assignColour+0x1b6>
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <assignColour+0x30c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	0019      	movs	r1, r3
 80029d6:	2032      	movs	r0, #50	; 0x32
 80029d8:	f7fd fc1e 	bl	8000218 <__divsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e02e      	b.n	8002a44 <assignColour+0x214>
	else if (hr >= 21 && hr < 23) *g = (G_T4/brg_div);
 80029e6:	2317      	movs	r3, #23
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b14      	cmp	r3, #20
 80029ee:	d90a      	bls.n	8002a06 <assignColour+0x1d6>
 80029f0:	2317      	movs	r3, #23
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b16      	cmp	r3, #22
 80029f8:	d805      	bhi.n	8002a06 <assignColour+0x1d6>
 80029fa:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <assignColour+0x30c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e01e      	b.n	8002a44 <assignColour+0x214>
	else if (hr >= 23 && hr < 5) *g = (G_T5/brg_div);
 8002a06:	2317      	movs	r3, #23
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b16      	cmp	r3, #22
 8002a0e:	d90a      	bls.n	8002a26 <assignColour+0x1f6>
 8002a10:	2317      	movs	r3, #23
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d805      	bhi.n	8002a26 <assignColour+0x1f6>
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <assignColour+0x30c>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e00e      	b.n	8002a44 <assignColour+0x214>
	else if (hr >= 5 && hr < 6) *g = (G_T6/brg_div);
 8002a26:	2317      	movs	r3, #23
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d909      	bls.n	8002a44 <assignColour+0x214>
 8002a30:	2317      	movs	r3, #23
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d804      	bhi.n	8002a44 <assignColour+0x214>
 8002a3a:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <assignColour+0x30c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]

	if (hr >= 6 && hr < 12) *b = (B_T1/brg_div);
 8002a44:	2317      	movs	r3, #23
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d90a      	bls.n	8002a64 <assignColour+0x234>
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b0b      	cmp	r3, #11
 8002a56:	d805      	bhi.n	8002a64 <assignColour+0x234>
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <assignColour+0x30c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e067      	b.n	8002b34 <assignColour+0x304>
	else if (hr >= 12 && hr < 18) *b = (B_T2/brg_div);
 8002a64:	2317      	movs	r3, #23
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b0b      	cmp	r3, #11
 8002a6c:	d90a      	bls.n	8002a84 <assignColour+0x254>
 8002a6e:	2317      	movs	r3, #23
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b11      	cmp	r3, #17
 8002a76:	d805      	bhi.n	8002a84 <assignColour+0x254>
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <assignColour+0x30c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e057      	b.n	8002b34 <assignColour+0x304>
	else if (hr >= 18 && hr < 21) *b = (B_T3/brg_div);
 8002a84:	2317      	movs	r3, #23
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b11      	cmp	r3, #17
 8002a8c:	d910      	bls.n	8002ab0 <assignColour+0x280>
 8002a8e:	2317      	movs	r3, #23
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b14      	cmp	r3, #20
 8002a96:	d80b      	bhi.n	8002ab0 <assignColour+0x280>
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <assignColour+0x30c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	2023      	movs	r0, #35	; 0x23
 8002aa2:	f7fd fbb9 	bl	8000218 <__divsi3>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e041      	b.n	8002b34 <assignColour+0x304>
	else if (hr >= 21 && hr < 23) *b = (B_T4/brg_div);
 8002ab0:	2317      	movs	r3, #23
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b14      	cmp	r3, #20
 8002ab8:	d910      	bls.n	8002adc <assignColour+0x2ac>
 8002aba:	2317      	movs	r3, #23
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b16      	cmp	r3, #22
 8002ac2:	d80b      	bhi.n	8002adc <assignColour+0x2ac>
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <assignColour+0x30c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	0019      	movs	r1, r3
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	f7fd fba3 	bl	8000218 <__divsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e02b      	b.n	8002b34 <assignColour+0x304>
	else if (hr >= 23 || hr < 5) *b = (B_T5/brg_div);
 8002adc:	2317      	movs	r3, #23
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b16      	cmp	r3, #22
 8002ae4:	d804      	bhi.n	8002af0 <assignColour+0x2c0>
 8002ae6:	2317      	movs	r3, #23
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d80b      	bhi.n	8002b08 <assignColour+0x2d8>
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <assignColour+0x30c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	0019      	movs	r1, r3
 8002af8:	20dc      	movs	r0, #220	; 0xdc
 8002afa:	f7fd fb8d 	bl	8000218 <__divsi3>
 8002afe:	0003      	movs	r3, r0
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e015      	b.n	8002b34 <assignColour+0x304>
	else if (hr >= 5 && hr < 6) *b = (B_T6/brg_div);
 8002b08:	2317      	movs	r3, #23
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d910      	bls.n	8002b34 <assignColour+0x304>
 8002b12:	2317      	movs	r3, #23
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d80b      	bhi.n	8002b34 <assignColour+0x304>
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <assignColour+0x30c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	0019      	movs	r1, r3
 8002b24:	20dc      	movs	r0, #220	; 0xdc
 8002b26:	f7fd fb77 	bl	8000218 <__divsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	e7ff      	b.n	8002b34 <assignColour+0x304>
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b007      	add	sp, #28
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	20000018 	.word	0x20000018

08002b40 <ADCCompress>:

uint8_t ADCCompress (uint16_t adc) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	0002      	movs	r2, r0
 8002b48:	1dbb      	adds	r3, r7, #6
 8002b4a:	801a      	strh	r2, [r3, #0]

	if (adc > 0 && adc < 1801) return 2;		// Much light
 8002b4c:	1dbb      	adds	r3, r7, #6
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <ADCCompress+0x24>
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	23e1      	movs	r3, #225	; 0xe1
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d801      	bhi.n	8002b64 <ADCCompress+0x24>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e06c      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 1800 && adc < 2101) return 3;
 8002b64:	1dbb      	adds	r3, r7, #6
 8002b66:	881a      	ldrh	r2, [r3, #0]
 8002b68:	23e1      	movs	r3, #225	; 0xe1
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d906      	bls.n	8002b7e <ADCCompress+0x3e>
 8002b70:	1dbb      	adds	r3, r7, #6
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <ADCCompress+0x108>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d801      	bhi.n	8002b7e <ADCCompress+0x3e>
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e05f      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 2100 && adc < 2401) return 5;
 8002b7e:	1dbb      	adds	r3, r7, #6
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <ADCCompress+0x108>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d907      	bls.n	8002b98 <ADCCompress+0x58>
 8002b88:	1dbb      	adds	r3, r7, #6
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	2396      	movs	r3, #150	; 0x96
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d801      	bhi.n	8002b98 <ADCCompress+0x58>
 8002b94:	2305      	movs	r3, #5
 8002b96:	e052      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 2400 && adc < 2701) return 7;
 8002b98:	1dbb      	adds	r3, r7, #6
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	2396      	movs	r3, #150	; 0x96
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d906      	bls.n	8002bb2 <ADCCompress+0x72>
 8002ba4:	1dbb      	adds	r3, r7, #6
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <ADCCompress+0x10c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d801      	bhi.n	8002bb2 <ADCCompress+0x72>
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e045      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 2700 && adc < 3001) return 8;
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <ADCCompress+0x10c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d906      	bls.n	8002bca <ADCCompress+0x8a>
 8002bbc:	1dbb      	adds	r3, r7, #6
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <ADCCompress+0x110>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d801      	bhi.n	8002bca <ADCCompress+0x8a>
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	e039      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 3000 && adc < 3301) return 10;
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <ADCCompress+0x110>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d906      	bls.n	8002be2 <ADCCompress+0xa2>
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <ADCCompress+0x114>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d801      	bhi.n	8002be2 <ADCCompress+0xa2>
 8002bde:	230a      	movs	r3, #10
 8002be0:	e02d      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 3300 && adc < 3601) return 12;
 8002be2:	1dbb      	adds	r3, r7, #6
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <ADCCompress+0x114>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d907      	bls.n	8002bfc <ADCCompress+0xbc>
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	23e1      	movs	r3, #225	; 0xe1
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d801      	bhi.n	8002bfc <ADCCompress+0xbc>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	e020      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 3600 && adc < 3901) return 14;
 8002bfc:	1dbb      	adds	r3, r7, #6
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	23e1      	movs	r3, #225	; 0xe1
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d906      	bls.n	8002c16 <ADCCompress+0xd6>
 8002c08:	1dbb      	adds	r3, r7, #6
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <ADCCompress+0x118>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d801      	bhi.n	8002c16 <ADCCompress+0xd6>
 8002c12:	230e      	movs	r3, #14
 8002c14:	e013      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 3900 && adc < 4201) return 20;	// No light
 8002c16:	1dbb      	adds	r3, r7, #6
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <ADCCompress+0x118>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d906      	bls.n	8002c2e <ADCCompress+0xee>
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <ADCCompress+0x11c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d801      	bhi.n	8002c2e <ADCCompress+0xee>
 8002c2a:	2314      	movs	r3, #20
 8002c2c:	e007      	b.n	8002c3e <ADCCompress+0xfe>
	if (adc > 4200) return 22;
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <ADCCompress+0x11c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <ADCCompress+0xfc>
 8002c38:	2316      	movs	r3, #22
 8002c3a:	e000      	b.n	8002c3e <ADCCompress+0xfe>

	return 16;	// If LDR malfunction, return default (16)
 8002c3c:	2310      	movs	r3, #16
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	00000834 	.word	0x00000834
 8002c4c:	00000a8c 	.word	0x00000a8c
 8002c50:	00000bb8 	.word	0x00000bb8
 8002c54:	00000ce4 	.word	0x00000ce4
 8002c58:	00000f3c 	.word	0x00000f3c
 8002c5c:	00001068 	.word	0x00001068

08002c60 <ADC1_COMP_IRQHandler>:
	ScrollLed("love you celjy", 400, sizeof("love you celjy"));
	ScrollLed("you are the best", 400, sizeof("you are the best"));

}

__attribute__((interrupt)) void ADC1_COMP_IRQHandler(void)	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	ADC1->ISR |= ADC_ISR_EOC;	// Clear end of conversion flag
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <ADC1_COMP_IRQHandler+0x34>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <ADC1_COMP_IRQHandler+0x34>)
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
	ADC_result = ADC1->DR;
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <ADC1_COMP_IRQHandler+0x34>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <ADC1_COMP_IRQHandler+0x38>)
 8002c78:	801a      	strh	r2, [r3, #0]
	brg_div = ADCCompress(ADC_result);
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <ADC1_COMP_IRQHandler+0x38>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <ADCCompress>
 8002c86:	0003      	movs	r3, r0
 8002c88:	001a      	movs	r2, r3
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <ADC1_COMP_IRQHandler+0x3c>)
 8002c8c:	701a      	strb	r2, [r3, #0]

}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012400 	.word	0x40012400
 8002c98:	2000056c 	.word	0x2000056c
 8002c9c:	20000018 	.word	0x20000018

08002ca0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ca2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ca4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ca6:	e003      	b.n	8002cb0 <LoopCopyDataInit>

08002ca8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002caa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cae:	3104      	adds	r1, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <LoopForever+0xa>)
  ldr r3, =_edata
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <LoopForever+0xe>)
  adds r2, r0, r1
 8002cb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cb8:	d3f6      	bcc.n	8002ca8 <CopyDataInit>
  ldr r2, =_sbss
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <LoopForever+0x12>)
  b LoopFillZerobss
 8002cbc:	e002      	b.n	8002cc4 <LoopFillZerobss>

08002cbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  str  r3, [r2]
 8002cc0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc2:	3204      	adds	r2, #4

08002cc4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <LoopForever+0x16>)
  cmp r2, r3
 8002cc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002cc8:	d3f9      	bcc.n	8002cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cca:	f7ff f953 	bl	8001f74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002cce:	f000 f811 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd2:	f7fe fb83 	bl	80013dc <main>

08002cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd6:	e7fe      	b.n	8002cd6 <LoopForever>
  ldr   r0, =_estack
 8002cd8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8002cdc:	08002df0 	.word	0x08002df0
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ce4:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8002ce8:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8002cec:	20000590 	.word	0x20000590

08002cf0 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <CEC_IRQHandler>
	...

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	4d0c      	ldr	r5, [pc, #48]	; (8002d2c <__libc_init_array+0x38>)
 8002cfa:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfc:	1b64      	subs	r4, r4, r5
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	2600      	movs	r6, #0
 8002d06:	f000 f821 	bl	8002d4c <_init>
 8002d0a:	4d0a      	ldr	r5, [pc, #40]	; (8002d34 <__libc_init_array+0x40>)
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <__libc_init_array+0x44>)
 8002d0e:	1b64      	subs	r4, r4, r5
 8002d10:	10a4      	asrs	r4, r4, #2
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	00b3      	lsls	r3, r6, #2
 8002d1a:	58eb      	ldr	r3, [r5, r3]
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	00b3      	lsls	r3, r6, #2
 8002d24:	58eb      	ldr	r3, [r5, r3]
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08002de8 	.word	0x08002de8
 8002d30:	08002de8 	.word	0x08002de8
 8002d34:	08002de8 	.word	0x08002de8
 8002d38:	08002dec 	.word	0x08002dec

08002d3c <memset>:
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	1812      	adds	r2, r2, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	7019      	strb	r1, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <_init>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr

08002d58 <_fini>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr
