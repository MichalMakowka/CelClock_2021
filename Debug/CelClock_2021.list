
CelClock_2021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003414  08003414  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003414  08003414  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003414  08003414  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800341c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000028  08003444  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08003444  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066b4  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e97  00000000  00000000  00026704  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000218  00000000  00000000  000275a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  000277b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fd8e  00000000  00000000  00027958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000036b8  00000000  00000000  000376e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00053604  00000000  00000000  0003ad9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008e3a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000620  00000000  00000000  0008e420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000028 	.word	0x20000028
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003344 	.word	0x08003344

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000002c 	.word	0x2000002c
 8000100:	08003344 	.word	0x08003344

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <menuInputService>:


TMENU menu_strct;


void menuInputService (TINPUT * in_wsk) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	// Display which variable is being configured
	DisplayLEDStr(in_wsk->display);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3307      	adds	r3, #7
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fb16 	bl	8001a2e <DisplayLEDStr>
	displayChar(((in_wsk->idx_default_ten + 48)), 4);	// Display initial values in line with the current idx
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	78db      	ldrb	r3, [r3, #3]
 8000406:	3330      	adds	r3, #48	; 0x30
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2104      	movs	r1, #4
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fc57 	bl	8001cc0 <displayChar>
	displayChar(((in_wsk->idx_default_units + 48)), 5);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	3330      	adds	r3, #48	; 0x30
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2105      	movs	r1, #5
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fc4f 	bl	8001cc0 <displayChar>

	in_wsk->temp_val_ten = in_wsk->idx_default_ten;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	78da      	ldrb	r2, [r3, #3]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	701a      	strb	r2, [r3, #0]
	in_wsk->temp_val_units = in_wsk->idx_default_units;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791a      	ldrb	r2, [r3, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	705a      	strb	r2, [r3, #1]
	in_wsk->idx = (in_wsk->idx_default_ten * 10) + in_wsk->idx_default_units;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	78db      	ldrb	r3, [r3, #3]
 8000436:	1c1a      	adds	r2, r3, #0
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	18db      	adds	r3, r3, r3
 800043e:	b2da      	uxtb	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	18d3      	adds	r3, r2, r3
 8000446:	b2da      	uxtb	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	709a      	strb	r2, [r3, #2]

	while(!button_flag[B_SET]) {
 800044c:	e082      	b.n	8000554 <menuInputService+0x164>
		if (button_flag[B_UP]) {
 800044e:	4b48      	ldr	r3, [pc, #288]	; (8000570 <menuInputService+0x180>)
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	2b00      	cmp	r3, #0
 8000456:	d038      	beq.n	80004ca <menuInputService+0xda>
			button_flag[B_UP]=0;
 8000458:	4b45      	ldr	r3, [pc, #276]	; (8000570 <menuInputService+0x180>)
 800045a:	2200      	movs	r2, #0
 800045c:	709a      	strb	r2, [r3, #2]
			(in_wsk->idx)++;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	789b      	ldrb	r3, [r3, #2]
 8000462:	3301      	adds	r3, #1
 8000464:	b2da      	uxtb	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	709a      	strb	r2, [r3, #2]
			if (in_wsk->idx > (in_wsk->idx_max)) in_wsk->idx = in_wsk->idx_min;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	789a      	ldrb	r2, [r3, #2]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	429a      	cmp	r2, r3
 8000474:	d903      	bls.n	800047e <menuInputService+0x8e>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	799a      	ldrb	r2, [r3, #6]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	709a      	strb	r2, [r3, #2]
			in_wsk->temp_val_ten = (decToBcd(in_wsk->idx)>>4);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fc40 	bl	8000d08 <decToBcd>
 8000488:	0003      	movs	r3, r0
 800048a:	091b      	lsrs	r3, r3, #4
 800048c:	b2da      	uxtb	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	701a      	strb	r2, [r3, #0]
			in_wsk->temp_val_units = (decToBcd(in_wsk->idx) & 0x0F);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	789b      	ldrb	r3, [r3, #2]
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fc36 	bl	8000d08 <decToBcd>
 800049c:	0003      	movs	r3, r0
 800049e:	001a      	movs	r2, r3
 80004a0:	230f      	movs	r3, #15
 80004a2:	4013      	ands	r3, r2
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	705a      	strb	r2, [r3, #1]
			displayChar(((in_wsk->temp_val_ten)+48), 4);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	3330      	adds	r3, #48	; 0x30
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fc03 	bl	8001cc0 <displayChar>
			displayChar(((in_wsk->temp_val_units)+48), 5);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	785b      	ldrb	r3, [r3, #1]
 80004be:	3330      	adds	r3, #48	; 0x30
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2105      	movs	r1, #5
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fbfb 	bl	8001cc0 <displayChar>
		}
		if (button_flag[B_DOWN]) {
 80004ca:	4b29      	ldr	r3, [pc, #164]	; (8000570 <menuInputService+0x180>)
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d03c      	beq.n	800054e <menuInputService+0x15e>
			button_flag[B_DOWN]=0;
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <menuInputService+0x180>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	705a      	strb	r2, [r3, #1]
			(in_wsk->idx)--;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	789b      	ldrb	r3, [r3, #2]
 80004de:	3b01      	subs	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	709a      	strb	r2, [r3, #2]
			if (in_wsk->idx > 250 || in_wsk->idx < in_wsk->idx_min) in_wsk->idx = in_wsk->idx_max;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	2bfa      	cmp	r3, #250	; 0xfa
 80004ec:	d805      	bhi.n	80004fa <menuInputService+0x10a>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	789a      	ldrb	r2, [r3, #2]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	799b      	ldrb	r3, [r3, #6]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d203      	bcs.n	8000502 <menuInputService+0x112>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	795a      	ldrb	r2, [r3, #5]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	709a      	strb	r2, [r3, #2]
			in_wsk->temp_val_ten=(decToBcd(in_wsk->idx)>>4);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fbfe 	bl	8000d08 <decToBcd>
 800050c:	0003      	movs	r3, r0
 800050e:	091b      	lsrs	r3, r3, #4
 8000510:	b2da      	uxtb	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	701a      	strb	r2, [r3, #0]
			in_wsk->temp_val_units = (decToBcd(in_wsk->idx) & 0x0F);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fbf4 	bl	8000d08 <decToBcd>
 8000520:	0003      	movs	r3, r0
 8000522:	001a      	movs	r2, r3
 8000524:	230f      	movs	r3, #15
 8000526:	4013      	ands	r3, r2
 8000528:	b2da      	uxtb	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	705a      	strb	r2, [r3, #1]
			displayChar(((in_wsk->temp_val_ten)+48), 4);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3330      	adds	r3, #48	; 0x30
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2104      	movs	r1, #4
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fbc1 	bl	8001cc0 <displayChar>
			displayChar(((in_wsk->temp_val_units)+48), 5);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	785b      	ldrb	r3, [r3, #1]
 8000542:	3330      	adds	r3, #48	; 0x30
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2105      	movs	r1, #5
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fbb9 	bl	8001cc0 <displayChar>
		}

		delay_ms(250);
 800054e:	20fa      	movs	r0, #250	; 0xfa
 8000550:	f000 ffe8 	bl	8001524 <delay_ms>
	while(!button_flag[B_SET]) {
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <menuInputService+0x180>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d100      	bne.n	8000560 <menuInputService+0x170>
 800055e:	e776      	b.n	800044e <menuInputService+0x5e>
	}
	button_flag[B_SET]=0;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <menuInputService+0x180>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000060 	.word	0x20000060

08000574 <menuBranchService>:





void menuBranchService (TMENU * wsk) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

	LEDClr();
 800057c:	f001 fe34 	bl	80021e8 <LEDClr>

	FillLEDArray(LED_buf, 0, 0, 0);
 8000580:	4856      	ldr	r0, [pc, #344]	; (80006dc <menuBranchService+0x168>)
 8000582:	2300      	movs	r3, #0
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	f002 f92e 	bl	80027e8 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 800058c:	23a2      	movs	r3, #162	; 0xa2
 800058e:	00da      	lsls	r2, r3, #3
 8000590:	4b52      	ldr	r3, [pc, #328]	; (80006dc <menuBranchService+0x168>)
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f002 fad1 	bl	8002b3c <SPI_SEND_WSBUF>

	button_flag[B_UP]=0;
 800059a:	4b51      	ldr	r3, [pc, #324]	; (80006e0 <menuBranchService+0x16c>)
 800059c:	2200      	movs	r2, #0
 800059e:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 80005a0:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <menuBranchService+0x16c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <menuBranchService+0x16c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]

	wsk->nxt_level = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	705a      	strb	r2, [r3, #1]
	wsk->menu_pos = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	wsk->nxt_level = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	705a      	strb	r2, [r3, #1]
	wsk->back = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	709a      	strb	r2, [r3, #2]

	uint8_t temp_pos;

	while(!wsk->back) {
 80005c4:	e080      	b.n	80006c8 <menuBranchService+0x154>

	if (button_flag[B_UP]) {
 80005c6:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <menuBranchService+0x16c>)
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d011      	beq.n	80005f4 <menuBranchService+0x80>
		button_flag[B_UP]=0;
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <menuBranchService+0x16c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	709a      	strb	r2, [r3, #2]
		wsk->menu_pos++;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	701a      	strb	r2, [r3, #0]
		if(wsk->menu_pos > wsk->menu_pos_max) wsk->menu_pos=0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d902      	bls.n	80005f4 <menuBranchService+0x80>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
	}

	if (button_flag[B_DOWN]) {
 80005f4:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <menuBranchService+0x16c>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d010      	beq.n	8000620 <menuBranchService+0xac>
		button_flag[B_DOWN]=0;
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <menuBranchService+0x16c>)
 8000600:	2200      	movs	r2, #0
 8000602:	705a      	strb	r2, [r3, #1]
		wsk->menu_pos--;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	3b01      	subs	r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	701a      	strb	r2, [r3, #0]
		if(wsk->menu_pos>250) wsk->menu_pos = wsk->menu_pos_max;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2bfa      	cmp	r3, #250	; 0xfa
 8000616:	d903      	bls.n	8000620 <menuBranchService+0xac>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	78da      	ldrb	r2, [r3, #3]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	701a      	strb	r2, [r3, #0]
	}


	if (button_flag[B_SET]) {
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <menuBranchService+0x16c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d005      	beq.n	8000636 <menuBranchService+0xc2>
		button_flag[B_SET]=0;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <menuBranchService+0x16c>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		wsk->nxt_level=1;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	705a      	strb	r2, [r3, #1]
	}

	if (temp_pos != wsk->menu_pos) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	220f      	movs	r2, #15
 800063c:	18ba      	adds	r2, r7, r2
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d00d      	beq.n	8000660 <menuBranchService+0xec>
		DisplayLEDStr(main_options[wsk->menu_pos]);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	001a      	movs	r2, r3
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <menuBranchService+0x170>)
 800064c:	0092      	lsls	r2, r2, #2
 800064e:	58d3      	ldr	r3, [r2, r3]
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f9ec 	bl	8001a2e <DisplayLEDStr>
		temp_pos = wsk->menu_pos;
 8000656:	230f      	movs	r3, #15
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	701a      	strb	r2, [r3, #0]
	}


	if(wsk->nxt_level) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d02c      	beq.n	80006c2 <menuBranchService+0x14e>
		if (wsk->menu_pos == p_main_back) return;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d031      	beq.n	80006d4 <menuBranchService+0x160>
		else if ((wsk->configuration) && (wsk->menu_pos == p_main_config)) wsk->configuration(wsk);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <menuBranchService+0x118>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d105      	bne.n	800068c <menuBranchService+0x118>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	0010      	movs	r0, r2
 8000688:	4798      	blx	r3
 800068a:	e01a      	b.n	80006c2 <menuBranchService+0x14e>
		else if ((wsk->alarm) && (wsk->menu_pos == p_main_alarm)) wsk->alarm(wsk);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d009      	beq.n	80006a8 <menuBranchService+0x134>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d105      	bne.n	80006a8 <menuBranchService+0x134>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	0010      	movs	r0, r2
 80006a4:	4798      	blx	r3
 80006a6:	e00c      	b.n	80006c2 <menuBranchService+0x14e>
		else if ((wsk->study) && (wsk->menu_pos == p_main_study)) wsk->study(wsk);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <menuBranchService+0x14e>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d104      	bne.n	80006c2 <menuBranchService+0x14e>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	0010      	movs	r0, r2
 80006c0:	4798      	blx	r3
		}
	delay_ms(250);
 80006c2:	20fa      	movs	r0, #250	; 0xfa
 80006c4:	f000 ff2e 	bl	8001524 <delay_ms>
	while(!wsk->back) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d100      	bne.n	80006d2 <menuBranchService+0x15e>
 80006d0:	e779      	b.n	80005c6 <menuBranchService+0x52>
 80006d2:	e000      	b.n	80006d6 <menuBranchService+0x162>
		if (wsk->menu_pos == p_main_back) return;
 80006d4:	46c0      	nop			; (mov r8, r8)
	}

}
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b004      	add	sp, #16
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000006c 	.word	0x2000006c
 80006e0:	20000060 	.word	0x20000060
 80006e4:	20000000 	.word	0x20000000

080006e8 <selectAlarm>:



void selectAlarm(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

	TINPUT input;

	// Input hour
	input.display[0]='h'; input.display[1]='r';
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2268      	movs	r2, #104	; 0x68
 80006f2:	71da      	strb	r2, [r3, #7]
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2272      	movs	r2, #114	; 0x72
 80006f8:	721a      	strb	r2, [r3, #8]
	input.idx_max=23;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2217      	movs	r2, #23
 80006fe:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = al_hour_t;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <selectAlarm+0xac>)
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = al_hour_u;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <selectAlarm+0xb0>)
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff fe69 	bl	80003f0 <menuInputService>
	al_hour_t = input.temp_val_ten;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <selectAlarm+0xac>)
 8000724:	701a      	strb	r2, [r3, #0]
	al_hour_u = input.temp_val_units;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	785a      	ldrb	r2, [r3, #1]
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <selectAlarm+0xb0>)
 800072c:	701a      	strb	r2, [r3, #0]

	// Input minute
	input.display[0]='m'; input.display[1]='i'; input.display[2]='n';
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	226d      	movs	r2, #109	; 0x6d
 8000732:	71da      	strb	r2, [r3, #7]
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2269      	movs	r2, #105	; 0x69
 8000738:	721a      	strb	r2, [r3, #8]
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	226e      	movs	r2, #110	; 0x6e
 800073e:	725a      	strb	r2, [r3, #9]
	input.idx_max=59;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	223b      	movs	r2, #59	; 0x3b
 8000744:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = al_min_t;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <selectAlarm+0xb4>)
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = al_min_u;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <selectAlarm+0xb8>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fe46 	bl	80003f0 <menuInputService>
	al_min_t = input.temp_val_ten;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <selectAlarm+0xb4>)
 800076a:	701a      	strb	r2, [r3, #0]
	al_min_u = input.temp_val_units;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	785a      	ldrb	r2, [r3, #1]
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <selectAlarm+0xb8>)
 8000772:	701a      	strb	r2, [r3, #0]

	al_enable_flag = 1;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <selectAlarm+0xbc>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR |= GPIO_ODR_OD6;
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	430a      	orrs	r2, r1
 8000788:	615a      	str	r2, [r3, #20]

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b004      	add	sp, #16
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20000065 	.word	0x20000065
 8000798:	2000005d 	.word	0x2000005d
 800079c:	20000067 	.word	0x20000067
 80007a0:	2000006a 	.word	0x2000006a
 80007a4:	2000005c 	.word	0x2000005c

080007a8 <EnableAlarm>:

void EnableAlarm(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	if (!al_enable_flag) {
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <EnableAlarm+0x40>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10b      	bne.n	80007cc <EnableAlarm+0x24>
		al_enable_flag = 1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <EnableAlarm+0x40>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR |= GPIO_ODR_OD6;
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	430a      	orrs	r2, r1
 80007c8:	615a      	str	r2, [r3, #20]
	} else {
		al_enable_flag = 0;
		GPIOA->ODR &= ~GPIO_ODR_OD6;
	}

}
 80007ca:	e00a      	b.n	80007e2 <EnableAlarm+0x3a>
		al_enable_flag = 0;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <EnableAlarm+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_OD6;
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	438a      	bics	r2, r1
 80007e0:	615a      	str	r2, [r3, #20]
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000005c 	.word	0x2000005c

080007ec <selectTime>:




void selectTime(void) {
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af02      	add	r7, sp, #8


	TINPUT input;

	// Input hour
	input.display[0]='h'; input.display[1]='r';
 80007f2:	003b      	movs	r3, r7
 80007f4:	2268      	movs	r2, #104	; 0x68
 80007f6:	71da      	strb	r2, [r3, #7]
 80007f8:	003b      	movs	r3, r7
 80007fa:	2272      	movs	r2, #114	; 0x72
 80007fc:	721a      	strb	r2, [r3, #8]
	input.idx_max=23;
 80007fe:	003b      	movs	r3, r7
 8000800:	2217      	movs	r2, #23
 8000802:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = hour_t;
 800080a:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <selectTime+0x1d4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	003b      	movs	r3, r7
 8000812:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = hour_u;
 8000814:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <selectTime+0x1d8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	003b      	movs	r3, r7
 800081c:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 800081e:	003b      	movs	r3, r7
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fde5 	bl	80003f0 <menuInputService>
	temp_t_hour = input.temp_val_ten;
 8000826:	2517      	movs	r5, #23
 8000828:	197b      	adds	r3, r7, r5
 800082a:	003a      	movs	r2, r7
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	701a      	strb	r2, [r3, #0]
	temp_u_hour = input.temp_val_units;
 8000830:	2616      	movs	r6, #22
 8000832:	19bb      	adds	r3, r7, r6
 8000834:	003a      	movs	r2, r7
 8000836:	7852      	ldrb	r2, [r2, #1]
 8000838:	701a      	strb	r2, [r3, #0]

	// Input minute
	input.display[0]='m'; input.display[1]='i'; input.display[2]='n';
 800083a:	003b      	movs	r3, r7
 800083c:	226d      	movs	r2, #109	; 0x6d
 800083e:	71da      	strb	r2, [r3, #7]
 8000840:	003b      	movs	r3, r7
 8000842:	2269      	movs	r2, #105	; 0x69
 8000844:	721a      	strb	r2, [r3, #8]
 8000846:	003b      	movs	r3, r7
 8000848:	226e      	movs	r2, #110	; 0x6e
 800084a:	725a      	strb	r2, [r3, #9]
	input.idx_max=59;
 800084c:	003b      	movs	r3, r7
 800084e:	223b      	movs	r2, #59	; 0x3b
 8000850:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 8000852:	003b      	movs	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = minute_t;
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <selectTime+0x1dc>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	003b      	movs	r3, r7
 8000860:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = minute_u;
 8000862:	4b5a      	ldr	r3, [pc, #360]	; (80009cc <selectTime+0x1e0>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	003b      	movs	r3, r7
 800086a:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 800086c:	003b      	movs	r3, r7
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fdbe 	bl	80003f0 <menuInputService>
	temp_t_minute = input.temp_val_ten;
 8000874:	2115      	movs	r1, #21
 8000876:	187b      	adds	r3, r7, r1
 8000878:	003a      	movs	r2, r7
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	701a      	strb	r2, [r3, #0]
	temp_u_minute = input.temp_val_units;
 800087e:	2014      	movs	r0, #20
 8000880:	183b      	adds	r3, r7, r0
 8000882:	003a      	movs	r2, r7
 8000884:	7852      	ldrb	r2, [r2, #1]
 8000886:	701a      	strb	r2, [r3, #0]

	setTime(temp_t_hour, temp_u_hour, temp_t_minute, temp_u_minute);
 8000888:	183b      	adds	r3, r7, r0
 800088a:	781c      	ldrb	r4, [r3, #0]
 800088c:	187b      	adds	r3, r7, r1
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	19bb      	adds	r3, r7, r6
 8000892:	7819      	ldrb	r1, [r3, #0]
 8000894:	197b      	adds	r3, r7, r5
 8000896:	7818      	ldrb	r0, [r3, #0]
 8000898:	0023      	movs	r3, r4
 800089a:	f000 fa53 	bl	8000d44 <setTime>

	// Input day
	input.display[0]='d'; input.display[1]='a'; input.display[2]='y';
 800089e:	003b      	movs	r3, r7
 80008a0:	2264      	movs	r2, #100	; 0x64
 80008a2:	71da      	strb	r2, [r3, #7]
 80008a4:	003b      	movs	r3, r7
 80008a6:	2261      	movs	r2, #97	; 0x61
 80008a8:	721a      	strb	r2, [r3, #8]
 80008aa:	003b      	movs	r3, r7
 80008ac:	2279      	movs	r2, #121	; 0x79
 80008ae:	725a      	strb	r2, [r3, #9]
	input.idx_max=31;
 80008b0:	003b      	movs	r3, r7
 80008b2:	221f      	movs	r2, #31
 80008b4:	715a      	strb	r2, [r3, #5]
	input.idx_min=1;
 80008b6:	003b      	movs	r3, r7
 80008b8:	2201      	movs	r2, #1
 80008ba:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = day_t;
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <selectTime+0x1e4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	003b      	movs	r3, r7
 80008c4:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = day_u;
 80008c6:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <selectTime+0x1e8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	003b      	movs	r3, r7
 80008ce:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 80008d0:	003b      	movs	r3, r7
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fd8c 	bl	80003f0 <menuInputService>
	temp_t_day = input.temp_val_ten;
 80008d8:	2513      	movs	r5, #19
 80008da:	197b      	adds	r3, r7, r5
 80008dc:	003a      	movs	r2, r7
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	701a      	strb	r2, [r3, #0]
	temp_u_day = input.temp_val_units;
 80008e2:	2612      	movs	r6, #18
 80008e4:	19bb      	adds	r3, r7, r6
 80008e6:	003a      	movs	r2, r7
 80008e8:	7852      	ldrb	r2, [r2, #1]
 80008ea:	701a      	strb	r2, [r3, #0]

	// Input month
	input.display[0]='m'; input.display[1]='o'; input.display[2]='n';
 80008ec:	003b      	movs	r3, r7
 80008ee:	226d      	movs	r2, #109	; 0x6d
 80008f0:	71da      	strb	r2, [r3, #7]
 80008f2:	003b      	movs	r3, r7
 80008f4:	226f      	movs	r2, #111	; 0x6f
 80008f6:	721a      	strb	r2, [r3, #8]
 80008f8:	003b      	movs	r3, r7
 80008fa:	226e      	movs	r2, #110	; 0x6e
 80008fc:	725a      	strb	r2, [r3, #9]
	input.idx_max=12;
 80008fe:	003b      	movs	r3, r7
 8000900:	220c      	movs	r2, #12
 8000902:	715a      	strb	r2, [r3, #5]
	input.idx_min=1;
 8000904:	003b      	movs	r3, r7
 8000906:	2201      	movs	r2, #1
 8000908:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = month_t;
 800090a:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <selectTime+0x1ec>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	003b      	movs	r3, r7
 8000912:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = month_u;
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <selectTime+0x1f0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	003b      	movs	r3, r7
 800091c:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff fd65 	bl	80003f0 <menuInputService>
	temp_t_month = input.temp_val_ten;
 8000926:	2311      	movs	r3, #17
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	003a      	movs	r2, r7
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	701a      	strb	r2, [r3, #0]
	temp_u_month = input.temp_val_units;
 8000930:	2410      	movs	r4, #16
 8000932:	193b      	adds	r3, r7, r4
 8000934:	003a      	movs	r2, r7
 8000936:	7852      	ldrb	r2, [r2, #1]
 8000938:	701a      	strb	r2, [r3, #0]

	// Input year
	input.display[0]='y'; input.display[1]='e'; input.display[2]='a'; input.display[3]='r';
 800093a:	003b      	movs	r3, r7
 800093c:	2279      	movs	r2, #121	; 0x79
 800093e:	71da      	strb	r2, [r3, #7]
 8000940:	003b      	movs	r3, r7
 8000942:	2265      	movs	r2, #101	; 0x65
 8000944:	721a      	strb	r2, [r3, #8]
 8000946:	003b      	movs	r3, r7
 8000948:	2261      	movs	r2, #97	; 0x61
 800094a:	725a      	strb	r2, [r3, #9]
 800094c:	003b      	movs	r3, r7
 800094e:	2272      	movs	r2, #114	; 0x72
 8000950:	729a      	strb	r2, [r3, #10]
	input.idx_max=99;
 8000952:	003b      	movs	r3, r7
 8000954:	2263      	movs	r2, #99	; 0x63
 8000956:	715a      	strb	r2, [r3, #5]
	input.idx_min=0;
 8000958:	003b      	movs	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	719a      	strb	r2, [r3, #6]
	input.idx_default_ten = year_t;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <selectTime+0x1f4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	003b      	movs	r3, r7
 8000966:	70da      	strb	r2, [r3, #3]
	input.idx_default_units = year_u;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <selectTime+0x1f8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	003b      	movs	r3, r7
 8000970:	711a      	strb	r2, [r3, #4]
	menuInputService(&input);
 8000972:	003b      	movs	r3, r7
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff fd3b 	bl	80003f0 <menuInputService>
	temp_t_year = input.temp_val_ten;
 800097a:	220f      	movs	r2, #15
 800097c:	18bb      	adds	r3, r7, r2
 800097e:	003a      	movs	r2, r7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	701a      	strb	r2, [r3, #0]
	temp_u_year = input.temp_val_units;
 8000984:	210e      	movs	r1, #14
 8000986:	187b      	adds	r3, r7, r1
 8000988:	003a      	movs	r2, r7
 800098a:	7852      	ldrb	r2, [r2, #1]
 800098c:	701a      	strb	r2, [r3, #0]

	setDate(temp_t_day, temp_u_day, temp_t_month, temp_u_month, temp_t_year, temp_u_year);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	781c      	ldrb	r4, [r3, #0]
 8000992:	2311      	movs	r3, #17
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	19bb      	adds	r3, r7, r6
 800099a:	7819      	ldrb	r1, [r3, #0]
 800099c:	197b      	adds	r3, r7, r5
 800099e:	7818      	ldrb	r0, [r3, #0]
 80009a0:	250e      	movs	r5, #14
 80009a2:	197b      	adds	r3, r7, r5
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	230f      	movs	r3, #15
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	0023      	movs	r3, r4
 80009b2:	f000 fa2f 	bl	8000e14 <setDate>

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b007      	add	sp, #28
 80009bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	2000057c 	.word	0x2000057c
 80009c4:	2000005b 	.word	0x2000005b
 80009c8:	2000005a 	.word	0x2000005a
 80009cc:	20000064 	.word	0x20000064
 80009d0:	20000058 	.word	0x20000058
 80009d4:	20000063 	.word	0x20000063
 80009d8:	2000057d 	.word	0x2000057d
 80009dc:	20000069 	.word	0x20000069
 80009e0:	20000068 	.word	0x20000068
 80009e4:	20000059 	.word	0x20000059

080009e8 <displayMenu>:




void displayMenu (TMENU * str_wsk) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

	str_wsk->menu_pos_max = 3;	// Number of menu options in this branch
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2203      	movs	r2, #3
 80009f4:	70da      	strb	r2, [r3, #3]

	// Register menu executive functions
	str_wsk->configuration = (void*)displayConfig;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <displayMenu+0x30>)
 80009fa:	605a      	str	r2, [r3, #4]
	str_wsk->alarm = (void*)displayAlarm;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <displayMenu+0x34>)
 8000a00:	60da      	str	r2, [r3, #12]
	str_wsk->study = (void*)displayStudy;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <displayMenu+0x38>)
 8000a06:	609a      	str	r2, [r3, #8]
	menuBranchService(str_wsk);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff fdb2 	bl	8000574 <menuBranchService>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08000a25 	.word	0x08000a25
 8000a1c:	08000b85 	.word	0x08000b85
 8000a20:	08000cf9 	.word	0x08000cf9

08000a24 <displayConfig>:


void displayConfig (TMENU * str_wsk) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	LEDClr();
 8000a2c:	f001 fbdc 	bl	80021e8 <LEDClr>

	FillLEDArray(LED_buf, 0, 0, 0);
 8000a30:	4851      	ldr	r0, [pc, #324]	; (8000b78 <displayConfig+0x154>)
 8000a32:	2300      	movs	r3, #0
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	f001 fed6 	bl	80027e8 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 8000a3c:	23a2      	movs	r3, #162	; 0xa2
 8000a3e:	00da      	lsls	r2, r3, #3
 8000a40:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <displayConfig+0x154>)
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 f879 	bl	8002b3c <SPI_SEND_WSBUF>

	DisplayLEDStr(config_options[str_wsk->menu_pos]);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	001a      	movs	r2, r3
 8000a50:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <displayConfig+0x158>)
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 ffe9 	bl	8001a2e <DisplayLEDStr>

	button_flag[B_UP]=0;
 8000a5c:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <displayConfig+0x15c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 8000a62:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <displayConfig+0x15c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 8000a68:	4b45      	ldr	r3, [pc, #276]	; (8000b80 <displayConfig+0x15c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]

	str_wsk->nxt_level = 0;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	705a      	strb	r2, [r3, #1]
	str_wsk->menu_pos = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	str_wsk->nxt_level = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	705a      	strb	r2, [r3, #1]
	str_wsk->back = 0;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	709a      	strb	r2, [r3, #2]

	uint8_t temp_pos;

	while(!str_wsk->back) {
 8000a86:	e070      	b.n	8000b6a <displayConfig+0x146>

		if (button_flag[B_UP]) {
 8000a88:	4b3d      	ldr	r3, [pc, #244]	; (8000b80 <displayConfig+0x15c>)
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d012      	beq.n	8000ab8 <displayConfig+0x94>
			delay_ms(80);
 8000a92:	2050      	movs	r0, #80	; 0x50
 8000a94:	f000 fd46 	bl	8001524 <delay_ms>
			button_flag[B_UP]=0;
 8000a98:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <displayConfig+0x15c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	709a      	strb	r2, [r3, #2]
			str_wsk->menu_pos++;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	701a      	strb	r2, [r3, #0]
			if(str_wsk->menu_pos>1) str_wsk->menu_pos=0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d902      	bls.n	8000ab8 <displayConfig+0x94>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
		}

		if (button_flag[B_DOWN]) {
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <displayConfig+0x15c>)
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d012      	beq.n	8000ae8 <displayConfig+0xc4>
			delay_ms(80);
 8000ac2:	2050      	movs	r0, #80	; 0x50
 8000ac4:	f000 fd2e 	bl	8001524 <delay_ms>
			button_flag[B_DOWN]=0;
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <displayConfig+0x15c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	705a      	strb	r2, [r3, #1]
			str_wsk->menu_pos--;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	701a      	strb	r2, [r3, #0]
			if(str_wsk->menu_pos>250) str_wsk->menu_pos=1;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2bfa      	cmp	r3, #250	; 0xfa
 8000ae0:	d902      	bls.n	8000ae8 <displayConfig+0xc4>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
		}


		if (button_flag[B_SET]) {
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <displayConfig+0x15c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <displayConfig+0xe0>
			delay_ms(80);
 8000af2:	2050      	movs	r0, #80	; 0x50
 8000af4:	f000 fd16 	bl	8001524 <delay_ms>
			button_flag[B_SET]=0;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <displayConfig+0x15c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
			str_wsk->nxt_level=1;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	705a      	strb	r2, [r3, #1]
		}

		if (temp_pos != str_wsk->menu_pos) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	220f      	movs	r2, #15
 8000b0a:	18ba      	adds	r2, r7, r2
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d00d      	beq.n	8000b2e <displayConfig+0x10a>
			DisplayLEDStr(config_options[str_wsk->menu_pos]);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <displayConfig+0x158>)
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	58d3      	ldr	r3, [r2, r3]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 ff85 	bl	8001a2e <DisplayLEDStr>
			temp_pos = str_wsk->menu_pos;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	701a      	strb	r2, [r3, #0]
		}


			if(str_wsk->nxt_level) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d016      	beq.n	8000b64 <displayConfig+0x140>
				if (str_wsk->menu_pos == p_conf_back) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d106      	bne.n	8000b4c <displayConfig+0x128>
					str_wsk->nxt_level = 0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	705a      	strb	r2, [r3, #1]
					str_wsk->back=1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	709a      	strb	r2, [r3, #2]
					return;
 8000b4a:	e012      	b.n	8000b72 <displayConfig+0x14e>
				}
				if (str_wsk->menu_pos == p_conf_time ) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <displayConfig+0x140>
					str_wsk->nxt_level = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	705a      	strb	r2, [r3, #1]
					selectTime();
 8000b5a:	f7ff fe47 	bl	80007ec <selectTime>
					str_wsk->back=1;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2201      	movs	r2, #1
 8000b62:	709a      	strb	r2, [r3, #2]
				}

			}
			delay_ms(250);
 8000b64:	20fa      	movs	r0, #250	; 0xfa
 8000b66:	f000 fcdd 	bl	8001524 <delay_ms>
	while(!str_wsk->back) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	789b      	ldrb	r3, [r3, #2]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d08a      	beq.n	8000a88 <displayConfig+0x64>
		}
}
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b004      	add	sp, #16
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000006c 	.word	0x2000006c
 8000b7c:	20000010 	.word	0x20000010
 8000b80:	20000060 	.word	0x20000060

08000b84 <displayAlarm>:




void displayAlarm (TMENU * str_wsk) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	LEDClr();
 8000b8c:	f001 fb2c 	bl	80021e8 <LEDClr>

	FillLEDArray(LED_buf, 0, 0, 0);
 8000b90:	4856      	ldr	r0, [pc, #344]	; (8000cec <displayAlarm+0x168>)
 8000b92:	2300      	movs	r3, #0
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	f001 fe26 	bl	80027e8 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 8000b9c:	23a2      	movs	r3, #162	; 0xa2
 8000b9e:	00da      	lsls	r2, r3, #3
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <displayAlarm+0x168>)
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 ffc9 	bl	8002b3c <SPI_SEND_WSBUF>


	button_flag[B_UP]=0;
 8000baa:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <displayAlarm+0x16c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 8000bb0:	4b4f      	ldr	r3, [pc, #316]	; (8000cf0 <displayAlarm+0x16c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 8000bb6:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <displayAlarm+0x16c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

	str_wsk->nxt_level = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	705a      	strb	r2, [r3, #1]
	str_wsk->menu_pos = 0;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	str_wsk->back = 0;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	709a      	strb	r2, [r3, #2]

	DisplayLEDStr(alarm_options[str_wsk->menu_pos]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <displayAlarm+0x170>)
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	58d3      	ldr	r3, [r2, r3]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 ff27 	bl	8001a2e <DisplayLEDStr>

	uint8_t temp_pos;

	while(!str_wsk->back) {
 8000be0:	e07c      	b.n	8000cdc <displayAlarm+0x158>

		if (button_flag[B_UP]) {
 8000be2:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <displayAlarm+0x16c>)
 8000be4:	789b      	ldrb	r3, [r3, #2]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d012      	beq.n	8000c12 <displayAlarm+0x8e>
			delay_ms(80);
 8000bec:	2050      	movs	r0, #80	; 0x50
 8000bee:	f000 fc99 	bl	8001524 <delay_ms>
			button_flag[B_UP]=0;
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <displayAlarm+0x16c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	709a      	strb	r2, [r3, #2]
			str_wsk->menu_pos++;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	701a      	strb	r2, [r3, #0]
			if(str_wsk->menu_pos>2) str_wsk->menu_pos=0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d902      	bls.n	8000c12 <displayAlarm+0x8e>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		}

		if (button_flag[B_DOWN]) {
 8000c12:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <displayAlarm+0x16c>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d012      	beq.n	8000c42 <displayAlarm+0xbe>
			delay_ms(80);
 8000c1c:	2050      	movs	r0, #80	; 0x50
 8000c1e:	f000 fc81 	bl	8001524 <delay_ms>
			button_flag[B_DOWN]=0;
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <displayAlarm+0x16c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	705a      	strb	r2, [r3, #1]
			str_wsk->menu_pos--;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	701a      	strb	r2, [r3, #0]
			if(str_wsk->menu_pos>250) str_wsk->menu_pos=2;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2bfa      	cmp	r3, #250	; 0xfa
 8000c3a:	d902      	bls.n	8000c42 <displayAlarm+0xbe>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	701a      	strb	r2, [r3, #0]
		}


		if (button_flag[B_SET]) {
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <displayAlarm+0x16c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <displayAlarm+0xda>
			delay_ms(80);
 8000c4c:	2050      	movs	r0, #80	; 0x50
 8000c4e:	f000 fc69 	bl	8001524 <delay_ms>
			button_flag[B_SET]=0;
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <displayAlarm+0x16c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			str_wsk->nxt_level=1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	705a      	strb	r2, [r3, #1]
		}

		if (temp_pos != str_wsk->menu_pos) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	220f      	movs	r2, #15
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d00d      	beq.n	8000c88 <displayAlarm+0x104>
			DisplayLEDStr(alarm_options[str_wsk->menu_pos]);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	001a      	movs	r2, r3
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <displayAlarm+0x170>)
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fed8 	bl	8001a2e <DisplayLEDStr>
			temp_pos = str_wsk->menu_pos;
 8000c7e:	230f      	movs	r3, #15
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	701a      	strb	r2, [r3, #0]
		}


			if(str_wsk->nxt_level) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d022      	beq.n	8000cd6 <displayAlarm+0x152>
				if (str_wsk->menu_pos == p_al_back) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d106      	bne.n	8000ca6 <displayAlarm+0x122>
					str_wsk->nxt_level = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	705a      	strb	r2, [r3, #1]
					str_wsk->back=1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	709a      	strb	r2, [r3, #2]
					return;
 8000ca4:	e01f      	b.n	8000ce6 <displayAlarm+0x162>
				}
				if (str_wsk->menu_pos == p_al_time ) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d107      	bne.n	8000cbe <displayAlarm+0x13a>
					str_wsk->nxt_level = 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	705a      	strb	r2, [r3, #1]
					selectAlarm();
 8000cb4:	f7ff fd18 	bl	80006e8 <selectAlarm>
					str_wsk->back=1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	709a      	strb	r2, [r3, #2]
				}
				if (str_wsk->menu_pos == p_al_enable ) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d107      	bne.n	8000cd6 <displayAlarm+0x152>
					str_wsk->nxt_level = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	705a      	strb	r2, [r3, #1]
					EnableAlarm();
 8000ccc:	f7ff fd6c 	bl	80007a8 <EnableAlarm>
					str_wsk->back=1;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	709a      	strb	r2, [r3, #2]
				}

			}

			delay_ms(250);
 8000cd6:	20fa      	movs	r0, #250	; 0xfa
 8000cd8:	f000 fc24 	bl	8001524 <delay_ms>
	while(!str_wsk->back) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	789b      	ldrb	r3, [r3, #2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d100      	bne.n	8000ce6 <displayAlarm+0x162>
 8000ce4:	e77d      	b.n	8000be2 <displayAlarm+0x5e>
		}
}
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000006c 	.word	0x2000006c
 8000cf0:	20000060 	.word	0x20000060
 8000cf4:	20000018 	.word	0x20000018

08000cf8 <displayStudy>:




void displayStudy (TMENU * str_wsk) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

	// To be done

}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <decToBcd>:


uint8_t decToBcd(uint8_t val) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
  return ((val/10*16) + (val%10));
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	210a      	movs	r1, #10
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff f9f2 	bl	8000104 <__udivsi3>
 8000d20:	0003      	movs	r3, r0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	b2dc      	uxtb	r4, r3
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	210a      	movs	r1, #10
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff fa6e 	bl	8000210 <__aeabi_uidivmod>
 8000d34:	000b      	movs	r3, r1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	18e3      	adds	r3, r4, r3
 8000d3a:	b2db      	uxtb	r3, r3
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b003      	add	sp, #12
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <setTime>:

#define TEMP_TR_MASK 0x7f7f7f
#define TEMP_DR_MASK 0xffff3f


void setTime(uint8_t t_hour, uint8_t u_hour, uint8_t t_minute, uint8_t u_minute) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	000c      	movs	r4, r1
 8000d4e:	0010      	movs	r0, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	1c2a      	adds	r2, r5, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	1dbb      	adds	r3, r7, #6
 8000d5a:	1c22      	adds	r2, r4, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	1d7b      	adds	r3, r7, #5
 8000d60:	1c02      	adds	r2, r0, #0
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	1c0a      	adds	r2, r1, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	if(t_hour > 2 || u_hour > 9 || t_minute > 5 || u_minute > 9) return;	// Verify the input
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d847      	bhi.n	8000e02 <setTime+0xbe>
 8000d72:	1dbb      	adds	r3, r7, #6
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b09      	cmp	r3, #9
 8000d78:	d843      	bhi.n	8000e02 <setTime+0xbe>
 8000d7a:	1d7b      	adds	r3, r7, #5
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d83f      	bhi.n	8000e02 <setTime+0xbe>
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b09      	cmp	r3, #9
 8000d88:	d83b      	bhi.n	8000e02 <setTime+0xbe>

	uint32_t TR_TEMP = 0;	// Temporary RTC TR register
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]


	// Load appropriate values to the temporary time register (TR)
	TR_TEMP |= (t_hour<<20);
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	051b      	lsls	r3, r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
	TR_TEMP |= (u_hour<<16);
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	001a      	movs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
	TR_TEMP |= (t_minute<<12);
 8000daa:	1d7b      	adds	r3, r7, #5
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	031b      	lsls	r3, r3, #12
 8000db0:	001a      	movs	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
	TR_TEMP |= (u_minute<<8);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]

	// RTC write protection keyes
	RTC->WPR = 0xca;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <setTime+0xc8>)
 8000dc8:	22ca      	movs	r2, #202	; 0xca
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <setTime+0xc8>)
 8000dce:	2253      	movs	r2, #83	; 0x53
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

	// Enter clock init mode
	RTC->ICSR |= RTC_ICSR_INIT;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <setTime+0xc8>)
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <setTime+0xc8>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	60da      	str	r2, [r3, #12]
	while ((RTC->ICSR & RTC_ICSR_INITF) == 0);	// Wait until ready to update
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <setTime+0xc8>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	4013      	ands	r3, r2
 8000de8:	d0fa      	beq.n	8000de0 <setTime+0x9c>

	RTC->TR = (TR_TEMP & TEMP_TR_MASK);		// Update clock registers
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <setTime+0xc8>)
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <setTime+0xcc>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

	RTC->ICSR &= ~RTC_ICSR_INIT;	// Disable RTC init mode
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <setTime+0xc8>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <setTime+0xc8>)
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	e000      	b.n	8000e04 <setTime+0xc0>
	if(t_hour > 2 || u_hour > 9 || t_minute > 5 || u_minute > 9) return;	// Verify the input
 8000e02:	46c0      	nop			; (mov r8, r8)

}
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b004      	add	sp, #16
 8000e08:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40002800 	.word	0x40002800
 8000e10:	007f7f7f 	.word	0x007f7f7f

08000e14 <setDate>:




void setDate(uint8_t t_day, uint8_t u_day, uint8_t t_month, uint8_t u_month, uint8_t t_year, uint8_t u_year) {
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	0005      	movs	r5, r0
 8000e1c:	000c      	movs	r4, r1
 8000e1e:	0010      	movs	r0, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	1c2a      	adds	r2, r5, #0
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	1c22      	adds	r2, r4, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	1d7b      	adds	r3, r7, #5
 8000e30:	1c02      	adds	r2, r0, #0
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	1c0a      	adds	r2, r1, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	if(t_day > 3 || u_day > 9 || t_month > 1 || u_month > 9 || t_year>9 || u_year>9) return;	// Verify input
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d85f      	bhi.n	8000f02 <setDate+0xee>
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	d85b      	bhi.n	8000f02 <setDate+0xee>
 8000e4a:	1d7b      	adds	r3, r7, #5
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d857      	bhi.n	8000f02 <setDate+0xee>
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b09      	cmp	r3, #9
 8000e58:	d853      	bhi.n	8000f02 <setDate+0xee>
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d84e      	bhi.n	8000f02 <setDate+0xee>
 8000e64:	2324      	movs	r3, #36	; 0x24
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b09      	cmp	r3, #9
 8000e6c:	d849      	bhi.n	8000f02 <setDate+0xee>

	uint32_t DR_TEMP = 0;	// Temporary RTC DR register
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]

	// Load appropriate values to the temporary data register (DR)
	DR_TEMP |= (t_day<<4);
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	001a      	movs	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (u_day<<0);
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (t_month<<12);
 8000e8a:	1d7b      	adds	r3, r7, #5
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	031b      	lsls	r3, r3, #12
 8000e90:	001a      	movs	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (u_month<<8);
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (t_year<<20);
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	051b      	lsls	r3, r3, #20
 8000eae:	001a      	movs	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
	DR_TEMP |= (u_year<<16);
 8000eb6:	2324      	movs	r3, #36	; 0x24
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]

	// RTC write protection keyes
	RTC->WPR = 0xca;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <setDate+0xf8>)
 8000ec8:	22ca      	movs	r2, #202	; 0xca
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <setDate+0xf8>)
 8000ece:	2253      	movs	r2, #83	; 0x53
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

	// Enter clock init mode
	RTC->ICSR |= RTC_ICSR_INIT;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <setDate+0xf8>)
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <setDate+0xf8>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	430a      	orrs	r2, r1
 8000edc:	60da      	str	r2, [r3, #12]
	while ((RTC->ICSR & RTC_ICSR_INITF) == 0);	// Wait until ready to update
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <setDate+0xf8>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d0fa      	beq.n	8000ee0 <setDate+0xcc>

	RTC->DR = (DR_TEMP & TEMP_DR_MASK);		// Update clock registers
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <setDate+0xf8>)
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <setDate+0xfc>)
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]

	RTC->ICSR &= ~RTC_ICSR_INIT;	// Disable RTC init mode
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <setDate+0xf8>)
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <setDate+0xf8>)
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	438a      	bics	r2, r1
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	e000      	b.n	8000f04 <setDate+0xf0>
	if(t_day > 3 || u_day > 9 || t_month > 1 || u_month > 9 || t_year>9 || u_year>9) return;	// Verify input
 8000f02:	46c0      	nop			; (mov r8, r8)

}
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40002800 	.word	0x40002800
 8000f10:	00ffff3f 	.word	0x00ffff3f

08000f14 <TIM16_IRQHandler>:




__attribute__((interrupt)) void TIM16_IRQHandler(void)	{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	if (TIM16->SR & TIM_SR_CC1IF)	{
 8000f18:	4b3c      	ldr	r3, [pc, #240]	; (800100c <TIM16_IRQHandler+0xf8>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d070      	beq.n	8001004 <TIM16_IRQHandler+0xf0>
		TIM16->SR &= ~TIM_SR_CC1IF;	// Clear flag
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <TIM16_IRQHandler+0xf8>)
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <TIM16_IRQHandler+0xf8>)
 8000f28:	2102      	movs	r1, #2
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	611a      	str	r2, [r3, #16]
		TIM16->EGR |= TIM_EGR_UG;	// Reinitialise the counter
 8000f2e:	4b37      	ldr	r3, [pc, #220]	; (800100c <TIM16_IRQHandler+0xf8>)
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <TIM16_IRQHandler+0xf8>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	430a      	orrs	r2, r1
 8000f38:	615a      	str	r2, [r3, #20]

		while((RTC->ICSR & RTC_ICSR_RSF)==0);	// See if the data was updated by the RTC
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2220      	movs	r2, #32
 8000f42:	4013      	ands	r3, r2
 8000f44:	d0fa      	beq.n	8000f3c <TIM16_IRQHandler+0x28>
		hour_t = ((RTC->TR & RTC_TR_HT)>>20);
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	0d1b      	lsrs	r3, r3, #20
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4013      	ands	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <TIM16_IRQHandler+0x100>)
 8000f56:	701a      	strb	r2, [r3, #0]
		hour_u = ((RTC->TR & RTC_TR_HU)>>16);
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	220f      	movs	r2, #15
 8000f62:	4013      	ands	r3, r2
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <TIM16_IRQHandler+0x104>)
 8000f68:	701a      	strb	r2, [r3, #0]
		minute_t = ((RTC->TR & RTC_TR_MNT)>>12);
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	0b1b      	lsrs	r3, r3, #12
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2207      	movs	r2, #7
 8000f74:	4013      	ands	r3, r2
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <TIM16_IRQHandler+0x108>)
 8000f7a:	701a      	strb	r2, [r3, #0]
		minute_u = ((RTC->TR & RTC_TR_MNU)>>8);
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	220f      	movs	r2, #15
 8000f86:	4013      	ands	r3, r2
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <TIM16_IRQHandler+0x10c>)
 8000f8c:	701a      	strb	r2, [r3, #0]


		year_t = ((RTC->DR & RTC_DR_YT)>>20);
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	0d1b      	lsrs	r3, r3, #20
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	220f      	movs	r2, #15
 8000f98:	4013      	ands	r3, r2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <TIM16_IRQHandler+0x110>)
 8000f9e:	701a      	strb	r2, [r3, #0]
		year_u = ((RTC->DR & RTC_DR_YU)>>16);
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	220f      	movs	r2, #15
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <TIM16_IRQHandler+0x114>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		month_t = ((RTC->DR & RTC_DR_MT)>>12);
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	0b1b      	lsrs	r3, r3, #12
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <TIM16_IRQHandler+0x118>)
 8000fc2:	701a      	strb	r2, [r3, #0]
		month_u = ((RTC->DR & RTC_DR_MU)>>8);
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	220f      	movs	r2, #15
 8000fce:	4013      	ands	r3, r2
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <TIM16_IRQHandler+0x11c>)
 8000fd4:	701a      	strb	r2, [r3, #0]
		day_t = ((RTC->DR & RTC_DR_DT)>>4);
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <TIM16_IRQHandler+0x120>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		day_u = ((RTC->DR & RTC_DR_DU)>>0);
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	220f      	movs	r2, #15
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <TIM16_IRQHandler+0x124>)
 8000ff6:	701a      	strb	r2, [r3, #0]

		RTC->ICSR &= ~RTC_ICSR_RSF;		// Clear the SR update bit
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <TIM16_IRQHandler+0xfc>)
 8000ffe:	2120      	movs	r1, #32
 8001000:	438a      	bics	r2, r1
 8001002:	60da      	str	r2, [r3, #12]


	}
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40014400 	.word	0x40014400
 8001010:	40002800 	.word	0x40002800
 8001014:	2000057c 	.word	0x2000057c
 8001018:	2000005b 	.word	0x2000005b
 800101c:	2000005a 	.word	0x2000005a
 8001020:	20000064 	.word	0x20000064
 8001024:	20000068 	.word	0x20000068
 8001028:	20000059 	.word	0x20000059
 800102c:	2000057d 	.word	0x2000057d
 8001030:	20000069 	.word	0x20000069
 8001034:	20000058 	.word	0x20000058
 8001038:	20000063 	.word	0x20000063

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	0002      	movs	r2, r0
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b7f      	cmp	r3, #127	; 0x7f
 800104e:	d809      	bhi.n	8001064 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	231f      	movs	r3, #31
 8001058:	401a      	ands	r2, r3
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_EnableIRQ+0x30>)
 800105c:	2101      	movs	r1, #1
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
  }
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	e000e100 	.word	0xe000e100

08001070 <SystemCFG>:





void SystemCFG (void)	{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

	// *** Configure System Clock (48MHz for each system BUS) ***
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_4;	// Clear (as it's 1 by default)
 8001076:	4bf6      	ldr	r3, [pc, #984]	; (8001450 <SystemCFG+0x3e0>)
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	4bf5      	ldr	r3, [pc, #980]	; (8001450 <SystemCFG+0x3e0>)
 800107c:	49f5      	ldr	r1, [pc, #980]	; (8001454 <SystemCFG+0x3e4>)
 800107e:	400a      	ands	r2, r1
 8001080:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_2 | RCC_PLLCFGR_PLLN_3;	// Set PLLN Mult. for 12 (0000 1100)
 8001082:	4bf3      	ldr	r3, [pc, #972]	; (8001450 <SystemCFG+0x3e0>)
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	4bf2      	ldr	r3, [pc, #968]	; (8001450 <SystemCFG+0x3e0>)
 8001088:	21c0      	movs	r1, #192	; 0xc0
 800108a:	0109      	lsls	r1, r1, #4
 800108c:	430a      	orrs	r2, r1
 800108e:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_0;	// Set PLLR Div. for 2 (001)
 8001090:	4bef      	ldr	r3, [pc, #956]	; (8001450 <SystemCFG+0x3e0>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	4bee      	ldr	r3, [pc, #952]	; (8001450 <SystemCFG+0x3e0>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0589      	lsls	r1, r1, #22
 800109a:	430a      	orrs	r2, r1
 800109c:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_0 | RCC_PLLCFGR_PLLSRC_1;	// Fpllin = HSE
 800109e:	4bec      	ldr	r3, [pc, #944]	; (8001450 <SystemCFG+0x3e0>)
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	4beb      	ldr	r3, [pc, #940]	; (8001450 <SystemCFG+0x3e0>)
 80010a4:	2103      	movs	r1, #3
 80010a6:	430a      	orrs	r2, r1
 80010a8:	60da      	str	r2, [r3, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;	// Enable output of the PLL
 80010aa:	4be9      	ldr	r3, [pc, #932]	; (8001450 <SystemCFG+0x3e0>)
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	4be8      	ldr	r3, [pc, #928]	; (8001450 <SystemCFG+0x3e0>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0549      	lsls	r1, r1, #21
 80010b4:	430a      	orrs	r2, r1
 80010b6:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_SW_1;	// PLLRCLK for SYSCLK
 80010b8:	4be5      	ldr	r3, [pc, #916]	; (8001450 <SystemCFG+0x3e0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	4be4      	ldr	r3, [pc, #912]	; (8001450 <SystemCFG+0x3e0>)
 80010be:	2102      	movs	r1, #2
 80010c0:	430a      	orrs	r2, r1
 80010c2:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN;
 80010c4:	4be2      	ldr	r3, [pc, #904]	; (8001450 <SystemCFG+0x3e0>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	4be1      	ldr	r3, [pc, #900]	; (8001450 <SystemCFG+0x3e0>)
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	0249      	lsls	r1, r1, #9
 80010ce:	430a      	orrs	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80010d2:	4be1      	ldr	r3, [pc, #900]	; (8001458 <SystemCFG+0x3e8>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4be0      	ldr	r3, [pc, #896]	; (8001458 <SystemCFG+0x3e8>)
 80010d8:	2102      	movs	r1, #2
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 80010de:	4bdc      	ldr	r3, [pc, #880]	; (8001450 <SystemCFG+0x3e0>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4bdb      	ldr	r3, [pc, #876]	; (8001450 <SystemCFG+0x3e0>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0249      	lsls	r1, r1, #9
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	4bd8      	ldr	r3, [pc, #864]	; (8001450 <SystemCFG+0x3e0>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	029b      	lsls	r3, r3, #10
 80010f6:	4013      	ands	r3, r2
 80010f8:	d0f9      	beq.n	80010ee <SystemCFG+0x7e>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 80010fa:	4bd5      	ldr	r3, [pc, #852]	; (8001450 <SystemCFG+0x3e0>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4bd4      	ldr	r3, [pc, #848]	; (8001450 <SystemCFG+0x3e0>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0449      	lsls	r1, r1, #17
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	4bd1      	ldr	r3, [pc, #836]	; (8001450 <SystemCFG+0x3e0>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	049b      	lsls	r3, r3, #18
 8001112:	4013      	ands	r3, r2
 8001114:	d1f9      	bne.n	800110a <SystemCFG+0x9a>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	4bcd      	ldr	r3, [pc, #820]	; (8001450 <SystemCFG+0x3e0>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2238      	movs	r2, #56	; 0x38
 800111e:	4013      	ands	r3, r2
 8001120:	2b10      	cmp	r3, #16
 8001122:	d1f9      	bne.n	8001118 <SystemCFG+0xa8>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 8001124:	4bca      	ldr	r3, [pc, #808]	; (8001450 <SystemCFG+0x3e0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4bc9      	ldr	r3, [pc, #804]	; (8001450 <SystemCFG+0x3e0>)
 800112a:	49cc      	ldr	r1, [pc, #816]	; (800145c <SystemCFG+0x3ec>)
 800112c:	400a      	ands	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure GPIO: Techled, LED Display, BUZZ, BATTERY CONTROL ***
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN | RCC_IOPENR_GPIOCEN | RCC_IOPENR_GPIODEN | RCC_IOPENR_GPIOFEN;	// GPIO: ABCDF
 8001130:	4bc7      	ldr	r3, [pc, #796]	; (8001450 <SystemCFG+0x3e0>)
 8001132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001134:	4bc6      	ldr	r3, [pc, #792]	; (8001450 <SystemCFG+0x3e0>)
 8001136:	212f      	movs	r1, #47	; 0x2f
 8001138:	430a      	orrs	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34

	GPIOB->MODER = GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 |
 800113c:	4bc8      	ldr	r3, [pc, #800]	; (8001460 <SystemCFG+0x3f0>)
 800113e:	4ac9      	ldr	r2, [pc, #804]	; (8001464 <SystemCFG+0x3f4>)
 8001140:	601a      	str	r2, [r3, #0]
					GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 |
					GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
					GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0;	// PB0-PB14: Output

	// LED Cathodes
	GPIOC->ODR |= (GPIO_ODR_OD6 | GPIO_ODR_OD7);
 8001142:	4bc9      	ldr	r3, [pc, #804]	; (8001468 <SystemCFG+0x3f8>)
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	4bc8      	ldr	r3, [pc, #800]	; (8001468 <SystemCFG+0x3f8>)
 8001148:	21c0      	movs	r1, #192	; 0xc0
 800114a:	430a      	orrs	r2, r1
 800114c:	615a      	str	r2, [r3, #20]
	GPIOC->MODER &= ~(GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);	// PC6-PC7: Output
 800114e:	4bc6      	ldr	r3, [pc, #792]	; (8001468 <SystemCFG+0x3f8>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4bc5      	ldr	r3, [pc, #788]	; (8001468 <SystemCFG+0x3f8>)
 8001154:	49c5      	ldr	r1, [pc, #788]	; (800146c <SystemCFG+0x3fc>)
 8001156:	400a      	ands	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
	GPIOD->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 800115a:	4bc5      	ldr	r3, [pc, #788]	; (8001470 <SystemCFG+0x400>)
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	4bc4      	ldr	r3, [pc, #784]	; (8001470 <SystemCFG+0x400>)
 8001160:	210f      	movs	r1, #15
 8001162:	430a      	orrs	r2, r1
 8001164:	615a      	str	r2, [r3, #20]
	GPIOD->MODER &= ~(GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1 | GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);	// PD0-PD3: Output
 8001166:	4bc2      	ldr	r3, [pc, #776]	; (8001470 <SystemCFG+0x400>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4bc1      	ldr	r3, [pc, #772]	; (8001470 <SystemCFG+0x400>)
 800116c:	21aa      	movs	r1, #170	; 0xaa
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
	// Techled, BUZZ
	GPIOA->MODER &= ~(GPIO_MODER_MODE1_1 | GPIO_MODER_MODE6_1/* | GPIO_MODER_MODE7_1*/);	// PA1, PA6-PA7: Output
 8001172:	23a0      	movs	r3, #160	; 0xa0
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	05db      	lsls	r3, r3, #23
 800117c:	49bd      	ldr	r1, [pc, #756]	; (8001474 <SystemCFG+0x404>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure DMA ***
//	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
	RCC->APBENR2 |= RCC_APBENR2_SPI1EN;
 8001182:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <SystemCFG+0x3e0>)
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	4bb2      	ldr	r3, [pc, #712]	; (8001450 <SystemCFG+0x3e0>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0149      	lsls	r1, r1, #5
 800118c:	430a      	orrs	r2, r1
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
	// *** Configure DMAMUX ***
	DMAMUX1_Channel1->CCR |= DMAMUX_CxCR_DMAREQ_ID_0 | DMAMUX_CxCR_DMAREQ_ID_4;			// DMA request identification: SPI1_TX (17)
	// *********************************
*/
	// *** Configure TIM14 for delay subroutine ***
	NVIC_EnableIRQ(TIM14_IRQn);
 8001190:	2013      	movs	r0, #19
 8001192:	f7ff ff53 	bl	800103c <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_TIM14EN;	// Enable TIM14 clock
 8001196:	4bae      	ldr	r3, [pc, #696]	; (8001450 <SystemCFG+0x3e0>)
 8001198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119a:	4bad      	ldr	r3, [pc, #692]	; (8001450 <SystemCFG+0x3e0>)
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	0209      	lsls	r1, r1, #8
 80011a0:	430a      	orrs	r2, r1
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
	TIM14->CCMR1 |= TIM_CCMR1_OC2M_0;	// Set channel 1 to active level on match
 80011a4:	4bb4      	ldr	r3, [pc, #720]	; (8001478 <SystemCFG+0x408>)
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	4bb3      	ldr	r3, [pc, #716]	; (8001478 <SystemCFG+0x408>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	0149      	lsls	r1, r1, #5
 80011ae:	430a      	orrs	r2, r1
 80011b0:	619a      	str	r2, [r3, #24]
	TIM14->DIER |= TIM_DIER_CC1IE;
 80011b2:	4bb1      	ldr	r3, [pc, #708]	; (8001478 <SystemCFG+0x408>)
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	4bb0      	ldr	r3, [pc, #704]	; (8001478 <SystemCFG+0x408>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	430a      	orrs	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
	TIM14->PSC = 47999;	/// 1000 Hz	(psc = 47999), F_CPU = 48MHz
 80011be:	4bae      	ldr	r3, [pc, #696]	; (8001478 <SystemCFG+0x408>)
 80011c0:	4aae      	ldr	r2, [pc, #696]	; (800147c <SystemCFG+0x40c>)
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
	// *********************************


	// *** Configure TIM15 for Segment Multiplexing ***
	NVIC_EnableIRQ(TIM15_IRQn);
 80011c4:	2014      	movs	r0, #20
 80011c6:	f7ff ff39 	bl	800103c <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_TIM15EN;	// Enable TIM15 clock
 80011ca:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <SystemCFG+0x3e0>)
 80011cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ce:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <SystemCFG+0x3e0>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0249      	lsls	r1, r1, #9
 80011d4:	430a      	orrs	r2, r1
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
	TIM15->CCMR1 |= TIM_CCMR1_OC2M_0;	// Set channel 1 to active level on match
 80011d8:	4ba9      	ldr	r3, [pc, #676]	; (8001480 <SystemCFG+0x410>)
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	4ba8      	ldr	r3, [pc, #672]	; (8001480 <SystemCFG+0x410>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0149      	lsls	r1, r1, #5
 80011e2:	430a      	orrs	r2, r1
 80011e4:	619a      	str	r2, [r3, #24]
	TIM15->DIER |= TIM_DIER_CC1IE;
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <SystemCFG+0x410>)
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	4ba5      	ldr	r3, [pc, #660]	; (8001480 <SystemCFG+0x410>)
 80011ec:	2102      	movs	r1, #2
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]
	TIM15->PSC = 1;	/// 1000 Hz	(psc = 47999), F_CPU = 48MHz
 80011f2:	4ba3      	ldr	r3, [pc, #652]	; (8001480 <SystemCFG+0x410>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM15->CR1 |= TIM_CR1_CEN;	// Counter enable
 80011f8:	4ba1      	ldr	r3, [pc, #644]	; (8001480 <SystemCFG+0x410>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <SystemCFG+0x410>)
 80011fe:	2101      	movs	r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure RTC Clock ***
	RCC->APBENR1 |= RCC_APBENR1_RTCAPBEN | RCC_APBENR1_PWREN;
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <SystemCFG+0x3e0>)
 8001206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001208:	4b91      	ldr	r3, [pc, #580]	; (8001450 <SystemCFG+0x3e0>)
 800120a:	499e      	ldr	r1, [pc, #632]	; (8001484 <SystemCFG+0x414>)
 800120c:	430a      	orrs	r2, r1
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c
	PWR->CR1 |= PWR_CR1_DBP;	// Disable RTC write protection
 8001210:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <SystemCFG+0x418>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b9c      	ldr	r3, [pc, #624]	; (8001488 <SystemCFG+0x418>)
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	0049      	lsls	r1, r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
	RCC->BDCR |= RCC_BDCR_LSEON;	// LSE eabled
 800121e:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <SystemCFG+0x3e0>)
 8001220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <SystemCFG+0x3e0>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	65da      	str	r2, [r3, #92]	; 0x5c
	while(!(RCC->BDCR & RCC_BDCR_LSERDY));	// Wait for LSE ready
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <SystemCFG+0x3e0>)
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d0fa      	beq.n	800122c <SystemCFG+0x1bc>
	RCC->BDCR |= RCC_BDCR_RTCSEL_0 | RCC_BDCR_RTCEN;	// LSE for the RTC, RTC enable
 8001236:	4b86      	ldr	r3, [pc, #536]	; (8001450 <SystemCFG+0x3e0>)
 8001238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800123a:	4b85      	ldr	r3, [pc, #532]	; (8001450 <SystemCFG+0x3e0>)
 800123c:	2181      	movs	r1, #129	; 0x81
 800123e:	0209      	lsls	r1, r1, #8
 8001240:	430a      	orrs	r2, r1
 8001242:	65da      	str	r2, [r3, #92]	; 0x5c


	// RTC CALIBRATION PROCESS
	// Update RTC_PRER register
	uint32_t tmp_prer = RTC->PRER;
 8001244:	4b91      	ldr	r3, [pc, #580]	; (800148c <SystemCFG+0x41c>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	607b      	str	r3, [r7, #4]
	tmp_prer &= ~(0x7f7fff);		// Set zeros to the tmp_pres Prediv_A and Prediv_S register
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a90      	ldr	r2, [pc, #576]	; (8001490 <SystemCFG+0x420>)
 800124e:	4013      	ands	r3, r2
 8001250:	607b      	str	r3, [r7, #4]
	tmp_prer |= (PREDIV_A<<16);		// SET PREDIV_A [val: 0-127]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	22fe      	movs	r2, #254	; 0xfe
 8001256:	03d2      	lsls	r2, r2, #15
 8001258:	4313      	orrs	r3, r2
 800125a:	607b      	str	r3, [r7, #4]
	tmp_prer |= PREDIV_S;		// SET PREDIV_S [val: 0-32767]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	22fb      	movs	r2, #251	; 0xfb
 8001260:	4313      	orrs	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
	RTC->WPR = 0xca;
 8001264:	4b89      	ldr	r3, [pc, #548]	; (800148c <SystemCFG+0x41c>)
 8001266:	22ca      	movs	r2, #202	; 0xca
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;	// Write protection disabled
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <SystemCFG+0x41c>)
 800126c:	2253      	movs	r2, #83	; 0x53
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
	// Enter clock init mode
	RTC->ICSR |= RTC_ICSR_INIT;
 8001270:	4b86      	ldr	r3, [pc, #536]	; (800148c <SystemCFG+0x41c>)
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	4b85      	ldr	r3, [pc, #532]	; (800148c <SystemCFG+0x41c>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	430a      	orrs	r2, r1
 800127a:	60da      	str	r2, [r3, #12]
	while ((RTC->ICSR & RTC_ICSR_INITF) == 0);	// Wait until ready to update
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	4b83      	ldr	r3, [pc, #524]	; (800148c <SystemCFG+0x41c>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	4013      	ands	r3, r2
 8001286:	d0fa      	beq.n	800127e <SystemCFG+0x20e>
	RTC->PRER = tmp_prer;		// Update PRER register
 8001288:	4b80      	ldr	r3, [pc, #512]	; (800148c <SystemCFG+0x41c>)
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	611a      	str	r2, [r3, #16]
	RTC->ICSR &= ~RTC_ICSR_INIT;	// Disable RTC init mode
 800128e:	4b7f      	ldr	r3, [pc, #508]	; (800148c <SystemCFG+0x41c>)
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	4b7e      	ldr	r3, [pc, #504]	; (800148c <SystemCFG+0x41c>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	438a      	bics	r2, r1
 8001298:	60da      	str	r2, [r3, #12]

	// Update RTC_CALR register
	uint32_t tmp_calr = RTC->CALR;
 800129a:	4b7c      	ldr	r3, [pc, #496]	; (800148c <SystemCFG+0x41c>)
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	603b      	str	r3, [r7, #0]
	tmp_calr &= ~(0x81ff);	// CALP and CALM mask (setting to zero)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4a7c      	ldr	r2, [pc, #496]	; (8001494 <SystemCFG+0x424>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	603b      	str	r3, [r7, #0]
	tmp_calr |= (CALP<<15);	// SET CALP [val: 0-1]
	tmp_calr |= (CALM);		// SET CALM [val: 0-511]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4a7b      	ldr	r2, [pc, #492]	; (8001498 <SystemCFG+0x428>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	603b      	str	r3, [r7, #0]
	RTC->WPR = 0xca;
 80012b0:	4b76      	ldr	r3, [pc, #472]	; (800148c <SystemCFG+0x41c>)
 80012b2:	22ca      	movs	r2, #202	; 0xca
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;	// Write protection disabled
 80012b6:	4b75      	ldr	r3, [pc, #468]	; (800148c <SystemCFG+0x41c>)
 80012b8:	2253      	movs	r2, #83	; 0x53
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->CALR = tmp_calr;	// Update CALR resgister
 80012bc:	4b73      	ldr	r3, [pc, #460]	; (800148c <SystemCFG+0x41c>)
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
	RTC->CR |= RTC_CR_COSEL;	// F_calibration = 1Hz
	GPIOA->MODER &= ~GPIO_MODER_MODE4_1;
	RTC->CR |= RTC_CR_OUT2EN;	// RTC clock available on PA4 - RTC_OUT2
	#endif
	#if (!RTC_OSC_CALIB_OUTPUT_EN)
	RTC->CR &= ~RTC_CR_COE;	// Calibration output disbled
 80012c2:	4b72      	ldr	r3, [pc, #456]	; (800148c <SystemCFG+0x41c>)
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <SystemCFG+0x41c>)
 80012c8:	4974      	ldr	r1, [pc, #464]	; (800149c <SystemCFG+0x42c>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	619a      	str	r2, [r3, #24]
	RTC->CR &= ~RTC_CR_COSEL;	// F_calibration 1Hz disabled
 80012ce:	4b6f      	ldr	r3, [pc, #444]	; (800148c <SystemCFG+0x41c>)
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <SystemCFG+0x41c>)
 80012d4:	4972      	ldr	r1, [pc, #456]	; (80014a0 <SystemCFG+0x430>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	619a      	str	r2, [r3, #24]
	GPIOA->MODER |= GPIO_MODER_MODE4_1;
 80012da:	23a0      	movs	r3, #160	; 0xa0
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	23a0      	movs	r3, #160	; 0xa0
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0089      	lsls	r1, r1, #2
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
	RTC->CR &= ~RTC_CR_OUT2EN;	// RTC clock disabled on PA4 - RTC_OUT2
 80012ec:	4b67      	ldr	r3, [pc, #412]	; (800148c <SystemCFG+0x41c>)
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <SystemCFG+0x41c>)
 80012f2:	0052      	lsls	r2, r2, #1
 80012f4:	0852      	lsrs	r2, r2, #1
 80012f6:	619a      	str	r2, [r3, #24]
	// END OF RTC CALIBRATION PROCESS
	// *********************************


	// *** Configure TIM16 for RTC clock data update ***
	NVIC_EnableIRQ(TIM16_IRQn);
 80012f8:	2015      	movs	r0, #21
 80012fa:	f7ff fe9f 	bl	800103c <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_TIM16EN;	// Enable TIM16 clock
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <SystemCFG+0x3e0>)
 8001300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <SystemCFG+0x3e0>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0289      	lsls	r1, r1, #10
 8001308:	430a      	orrs	r2, r1
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->PSC = 47999;
 800130c:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <SystemCFG+0x434>)
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <SystemCFG+0x40c>)
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->CCR1 = 250;
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <SystemCFG+0x434>)
 8001314:	22fa      	movs	r2, #250	; 0xfa
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->DIER |= TIM_DIER_CC1IE;	// CaptureCompare1 Interrupt Enable	(2Hz)
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <SystemCFG+0x434>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <SystemCFG+0x434>)
 800131e:	2102      	movs	r1, #2
 8001320:	430a      	orrs	r2, r1
 8001322:	60da      	str	r2, [r3, #12]
	TIM16->CR1 |= TIM_CR1_CEN;	// Counter enable
 8001324:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <SystemCFG+0x434>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <SystemCFG+0x434>)
 800132a:	2101      	movs	r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure SPI ***
	NVIC_EnableIRQ(SPI1_IRQn);
 8001330:	2019      	movs	r0, #25
 8001332:	f7ff fe83 	bl	800103c <__NVIC_EnableIRQ>
	GPIOA->MODER &= ~GPIO_MODER_MODE2_0;	// MODER: 10 - Alternative function
 8001336:	23a0      	movs	r3, #160	; 0xa0
 8001338:	05db      	lsls	r3, r3, #23
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	2110      	movs	r1, #16
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
	// GPIOA->AFR[0] 	// AFDEL set to 0000 automatically (SPI1_MOSI)
	SPI1->CR1 |= SPI_CR1_BR_1;	// SPI psc (010) : (8), 48/8 = 6Mhz set
 8001346:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <SystemCFG+0x438>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <SystemCFG+0x438>)
 800134c:	2110      	movs	r1, #16
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI);	// Set as Master (also, enable software slave management)
 8001352:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <SystemCFG+0x438>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <SystemCFG+0x438>)
 8001358:	21c1      	movs	r1, #193	; 0xc1
 800135a:	0089      	lsls	r1, r1, #2
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_CPHA;	// The second clock transition is the first data capture edge (as a result, first LED will always be active)
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <SystemCFG+0x438>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <SystemCFG+0x438>)
 8001366:	2101      	movs	r1, #1
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
	// 8-bit data length set initially by the hardware
	SPI1->CR1 |= SPI_CR1_SPE;	// SPI enable
 800136c:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <SystemCFG+0x438>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <SystemCFG+0x438>)
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
	// *********************************


	// *** Configure ADC ***
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001378:	200c      	movs	r0, #12
 800137a:	f7ff fe5f 	bl	800103c <__NVIC_EnableIRQ>
	RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <SystemCFG+0x3e0>)
 8001380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <SystemCFG+0x3e0>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0349      	lsls	r1, r1, #13
 8001388:	430a      	orrs	r2, r1
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
	ADC1->IER |= ADC_IER_EOCIE;		// End of conversion interrupt enable
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <SystemCFG+0x43c>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <SystemCFG+0x43c>)
 8001392:	2104      	movs	r1, #4
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
	ADC1->CR |= ADC_CR_ADVREGEN;	// ADC voltage regulator enable
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <SystemCFG+0x43c>)
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <SystemCFG+0x43c>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0549      	lsls	r1, r1, #21
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]
	ADC1->CFGR1 |= ADC_CFGR1_DISCEN;	// ADC discontinuous mode enabled
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <SystemCFG+0x43c>)
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	4b40      	ldr	r3, [pc, #256]	; (80014ac <SystemCFG+0x43c>)
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0249      	lsls	r1, r1, #9
 80013b0:	430a      	orrs	r2, r1
 80013b2:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;	// Overwire with the last conversion result
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <SystemCFG+0x43c>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <SystemCFG+0x43c>)
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0149      	lsls	r1, r1, #5
 80013be:	430a      	orrs	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]
	ADC1->CHSELR |= ADC_CHSELR_CHSEL5;	// Channel 5 selected for conversion
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <SystemCFG+0x43c>)
 80013c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <SystemCFG+0x43c>)
 80013c8:	2120      	movs	r1, #32
 80013ca:	430a      	orrs	r2, r1
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28

	ADC1->CR |= ADC_CR_ADEN;	// Start ADC
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <SystemCFG+0x43c>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <SystemCFG+0x43c>)
 80013d4:	2101      	movs	r1, #1
 80013d6:	430a      	orrs	r2, r1
 80013d8:	609a      	str	r2, [r3, #8]
	while((ADC1->ISR & ADC_ISR_ADRDY) == 0);
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <SystemCFG+0x43c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	d0fa      	beq.n	80013dc <SystemCFG+0x36c>
	ADC1->ISR |= ADC_ISR_ADRDY;		// Clear flag
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <SystemCFG+0x43c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <SystemCFG+0x43c>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
	// *********************************

	// *** Configure USART1 ***
	GPIOA->MODER &= ~(GPIO_MODER_MODE9_1 | GPIO_MODER_MODE10_1);	// GPIO Output mode
 80013f2:	23a0      	movs	r3, #160	; 0xa0
 80013f4:	05db      	lsls	r3, r3, #23
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	23a0      	movs	r3, #160	; 0xa0
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	492c      	ldr	r1, [pc, #176]	; (80014b0 <SystemCFG+0x440>)
 80013fe:	400a      	ands	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
	// *********************************

	// *** Configure EXTI (switches) ***
	// SW2 (SET) - PA11 | SW3 (DOWN) - PA12 | SW4 (UP) - PB15
	GPIOA->MODER &= ~(GPIO_MODER_MODE11_0 | GPIO_MODER_MODE11_1);
 8001402:	23a0      	movs	r3, #160	; 0xa0
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	23a0      	movs	r3, #160	; 0xa0
 800140a:	05db      	lsls	r3, r3, #23
 800140c:	4929      	ldr	r1, [pc, #164]	; (80014b4 <SystemCFG+0x444>)
 800140e:	400a      	ands	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE12_0 | GPIO_MODER_MODE12_1);
 8001412:	23a0      	movs	r3, #160	; 0xa0
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	4926      	ldr	r1, [pc, #152]	; (80014b8 <SystemCFG+0x448>)
 800141e:	400a      	ands	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
//	GPIOC->MODER &= ~(GPIO_MODER_MODE13_0 | GPIO_MODER_MODE13_1);	// WAKEUP EXTI (PC13)
	GPIOB->MODER &= ~(GPIO_MODER_MODE15_0 | GPIO_MODER_MODE15_1);
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <SystemCFG+0x3f0>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <SystemCFG+0x3f0>)
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	0892      	lsrs	r2, r2, #2
 800142c:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD11_0;
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	23a0      	movs	r3, #160	; 0xa0
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	03c9      	lsls	r1, r1, #15
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD12_0;
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	e036      	b.n	80014bc <SystemCFG+0x44c>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	ffffefff 	.word	0xffffefff
 8001458:	40022000 	.word	0x40022000
 800145c:	fffffeff 	.word	0xfffffeff
 8001460:	50000400 	.word	0x50000400
 8001464:	15555555 	.word	0x15555555
 8001468:	50000800 	.word	0x50000800
 800146c:	ffff5fff 	.word	0xffff5fff
 8001470:	50000c00 	.word	0x50000c00
 8001474:	ffffdff7 	.word	0xffffdff7
 8001478:	40002000 	.word	0x40002000
 800147c:	0000bb7f 	.word	0x0000bb7f
 8001480:	40014000 	.word	0x40014000
 8001484:	10000400 	.word	0x10000400
 8001488:	40007000 	.word	0x40007000
 800148c:	40002800 	.word	0x40002800
 8001490:	ff808000 	.word	0xff808000
 8001494:	ffff7e00 	.word	0xffff7e00
 8001498:	000001ff 	.word	0x000001ff
 800149c:	ff7fffff 	.word	0xff7fffff
 80014a0:	fff7ffff 	.word	0xfff7ffff
 80014a4:	40014400 	.word	0x40014400
 80014a8:	40013000 	.word	0x40013000
 80014ac:	40012400 	.word	0x40012400
 80014b0:	ffd7ffff 	.word	0xffd7ffff
 80014b4:	ff3fffff 	.word	0xff3fffff
 80014b8:	fcffffff 	.word	0xfcffffff
 80014bc:	0449      	lsls	r1, r1, #17
 80014be:	430a      	orrs	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD15_0;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <SystemCFG+0x4ac>)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <SystemCFG+0x4ac>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	05c9      	lsls	r1, r1, #23
 80014cc:	430a      	orrs	r2, r1
 80014ce:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80014d0:	2007      	movs	r0, #7
 80014d2:	f7ff fdb3 	bl	800103c <__NVIC_EnableIRQ>
	EXTI->EXTICR[2] |= ((0x00)<<24);	// Set PA11
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <SystemCFG+0x4b0>)
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <SystemCFG+0x4b0>)
 80014da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80014dc:	669a      	str	r2, [r3, #104]	; 0x68
	EXTI->EXTICR[3] |= ((0x00)<<0);		// Set PA12
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <SystemCFG+0x4b0>)
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <SystemCFG+0x4b0>)
 80014e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80014e4:	66da      	str	r2, [r3, #108]	; 0x6c
	EXTI->EXTICR[3] |= ((0x01)<<24);	// Set PB15
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <SystemCFG+0x4b0>)
 80014e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <SystemCFG+0x4b0>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	0449      	lsls	r1, r1, #17
 80014f0:	430a      	orrs	r2, r1
 80014f2:	66da      	str	r2, [r3, #108]	; 0x6c


	EXTI->FTSR1 |= EXTI_FTSR1_FT11 | EXTI_FTSR1_FT12 | EXTI_FTSR1_FT15;		// Falling edge event
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <SystemCFG+0x4b0>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <SystemCFG+0x4b0>)
 80014fa:	2198      	movs	r1, #152	; 0x98
 80014fc:	0209      	lsls	r1, r1, #8
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]

	EXTI->IMR1 |= EXTI_IMR1_IM11 | EXTI_IMR1_IM12 | EXTI_IMR1_IM15;
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <SystemCFG+0x4b0>)
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	58d3      	ldr	r3, [r2, r3]
 8001508:	4905      	ldr	r1, [pc, #20]	; (8001520 <SystemCFG+0x4b0>)
 800150a:	2298      	movs	r2, #152	; 0x98
 800150c:	0212      	lsls	r2, r2, #8
 800150e:	4313      	orrs	r3, r2
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	508b      	str	r3, [r1, r2]
/*
	// *** Enable DMA Channel ***
	DMA1_Channel1->CCR |= DMA_CCR_EN;	// Channel 1 enable (SPI1_TX)
	// *********************************
*/
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}
 800151c:	50000400 	.word	0x50000400
 8001520:	40021800 	.word	0x40021800

08001524 <delay_ms>:


void delay_ms (uint16_t ms)	{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	0002      	movs	r2, r0
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	801a      	strh	r2, [r3, #0]
	d_flag = 0;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <delay_ms+0x38>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
	TIM14->CCR1 = ms;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <delay_ms+0x3c>)
 8001538:	1dba      	adds	r2, r7, #6
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CR1 |= TIM_CR1_CEN;	// Counter enable
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <delay_ms+0x3c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <delay_ms+0x3c>)
 8001544:	2101      	movs	r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
	while(!d_flag);
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <delay_ms+0x38>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0fb      	beq.n	800154c <delay_ms+0x28>
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000066 	.word	0x20000066
 8001560:	40002000 	.word	0x40002000

08001564 <buzz>:
	}
}
*/


void buzz (uint8_t time) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	0002      	movs	r2, r0
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR |= GPIO_ODR_OD7;
 8001570:	23a0      	movs	r3, #160	; 0xa0
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	23a0      	movs	r3, #160	; 0xa0
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	430a      	orrs	r2, r1
 800157e:	615a      	str	r2, [r3, #20]
	delay_ms(time);
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff ffcc 	bl	8001524 <delay_ms>
	GPIOA->ODR &= ~GPIO_ODR_OD7;
 800158c:	23a0      	movs	r3, #160	; 0xa0
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	23a0      	movs	r3, #160	; 0xa0
 8001594:	05db      	lsls	r3, r3, #23
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	438a      	bics	r2, r1
 800159a:	615a      	str	r2, [r3, #20]
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <TIM14_IRQHandler>:

__attribute__((interrupt)) void TIM14_IRQHandler(void)	{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	if (TIM14->SR & TIM_SR_CC1IF)	{
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d014      	beq.n	80015dc <TIM14_IRQHandler+0x38>
		TIM14->SR &= ~TIM_SR_CC1IF;	// Clear flag
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015b8:	2102      	movs	r1, #2
 80015ba:	438a      	bics	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
		TIM14->CR1 &= ~TIM_CR1_CEN;	// Counter disabled
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	438a      	bics	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
		TIM14->EGR |= TIM_EGR_UG;	// Reinitialise the counter
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <TIM14_IRQHandler+0x40>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	615a      	str	r2, [r3, #20]
		d_flag = 1;
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <TIM14_IRQHandler+0x44>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
	}
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40002000 	.word	0x40002000
 80015e8:	20000066 	.word	0x20000066

080015ec <EXTI4_15_IRQHandler>:


__attribute__((interrupt)) void EXTI4_15_IRQHandler(void)	{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	if ((EXTI->FPR1 & EXTI_FPR1_FPIF11))	{	// SET button
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4013      	ands	r3, r2
 80015fa:	d009      	beq.n	8001610 <EXTI4_15_IRQHandler+0x24>
		EXTI->FPR1 |= EXTI_FPR1_FPIF11;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0109      	lsls	r1, r1, #4
 8001606:	430a      	orrs	r2, r1
 8001608:	611a      	str	r2, [r3, #16]
		button_flag[B_SET] = 1;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <EXTI4_15_IRQHandler+0x70>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
		}

	if ((EXTI->FPR1 & EXTI_FPR1_FPIF12))	{	// DOWN button
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	4013      	ands	r3, r2
 800161a:	d009      	beq.n	8001630 <EXTI4_15_IRQHandler+0x44>
		EXTI->FPR1 |= EXTI_FPR1_FPIF12;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	0149      	lsls	r1, r1, #5
 8001626:	430a      	orrs	r2, r1
 8001628:	611a      	str	r2, [r3, #16]
		button_flag[B_DOWN] = 1;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <EXTI4_15_IRQHandler+0x70>)
 800162c:	2201      	movs	r2, #1
 800162e:	705a      	strb	r2, [r3, #1]
		}

	if ((EXTI->FPR1 & EXTI_FPR1_FPIF15))	{	// UP button
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4013      	ands	r3, r2
 800163a:	d009      	beq.n	8001650 <EXTI4_15_IRQHandler+0x64>
		EXTI->FPR1 |= EXTI_FPR1_FPIF15;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <EXTI4_15_IRQHandler+0x6c>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0209      	lsls	r1, r1, #8
 8001646:	430a      	orrs	r2, r1
 8001648:	611a      	str	r2, [r3, #16]
		button_flag[B_UP] = 1;
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <EXTI4_15_IRQHandler+0x70>)
 800164c:	2201      	movs	r2, #1
 800164e:	709a      	strb	r2, [r3, #2]
		}

}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	40021800 	.word	0x40021800
 800165c:	20000060 	.word	0x20000060

08001660 <main>:
#include "segment_dsp.h"
#include "clock.h"
#include "clk_menu.h"


int main(void) {
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af02      	add	r7, sp, #8

	uint8_t red, green, blue;	// Digit colour channel values

	TMENU menu_strct;

	SystemCFG();	// Configure uC registers
 8001666:	f7ff fd03 	bl	8001070 <SystemCFG>



	// Clear LCD Display (display SPACEs)
	LEDClr();
 800166a:	f000 fdbd 	bl	80021e8 <LEDClr>

	// Clear WS2812B Display
	FillLEDArray(LED_buf, 0, 0, 0);
 800166e:	48b5      	ldr	r0, [pc, #724]	; (8001944 <main+0x2e4>)
 8001670:	2300      	movs	r3, #0
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	f001 f8b7 	bl	80027e8 <FillLEDArray>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 800167a:	23a2      	movs	r3, #162	; 0xa2
 800167c:	00da      	lsls	r2, r3, #3
 800167e:	4bb1      	ldr	r3, [pc, #708]	; (8001944 <main+0x2e4>)
 8001680:	0011      	movs	r1, r2
 8001682:	0018      	movs	r0, r3
 8001684:	f001 fa5a 	bl	8002b3c <SPI_SEND_WSBUF>

	// Welcome strip
	delay_ms(200);
 8001688:	20c8      	movs	r0, #200	; 0xc8
 800168a:	f7ff ff4b 	bl	8001524 <delay_ms>
	welcomeStrip(LED_buf);
 800168e:	4bad      	ldr	r3, [pc, #692]	; (8001944 <main+0x2e4>)
 8001690:	0018      	movs	r0, r3
 8001692:	f001 fd41 	bl	8003118 <welcomeStrip>

	// Scroll welcome message
	ScrollLed("hello celine", medium, sizeof("hello celine"));
 8001696:	4bac      	ldr	r3, [pc, #688]	; (8001948 <main+0x2e8>)
 8001698:	220d      	movs	r2, #13
 800169a:	21c8      	movs	r1, #200	; 0xc8
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f9ed 	bl	8001a7c <ScrollLed>

	loveyou(NULL);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f001 fca0 	bl	8002fe8 <loveyou>

	button_flag[B_UP]=0;
 80016a8:	4ba8      	ldr	r3, [pc, #672]	; (800194c <main+0x2ec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	709a      	strb	r2, [r3, #2]
	button_flag[B_DOWN]=0;
 80016ae:	4ba7      	ldr	r3, [pc, #668]	; (800194c <main+0x2ec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	705a      	strb	r2, [r3, #1]
	button_flag[B_SET]=0;
 80016b4:	4ba5      	ldr	r3, [pc, #660]	; (800194c <main+0x2ec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]


	dot_enable[1]++; dot_enable[3]++;	// Enable LED dots (for displaying the date)
 80016ba:	4ba5      	ldr	r3, [pc, #660]	; (8001950 <main+0x2f0>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4ba2      	ldr	r3, [pc, #648]	; (8001950 <main+0x2f0>)
 80016c6:	705a      	strb	r2, [r3, #1]
 80016c8:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <main+0x2f0>)
 80016ca:	78db      	ldrb	r3, [r3, #3]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b9f      	ldr	r3, [pc, #636]	; (8001950 <main+0x2f0>)
 80016d4:	70da      	strb	r2, [r3, #3]


	while (1) {

		// IF ADC idle, start the conversion
		if ((ADC1->CR & ADC_CR_ADSTART) == 0) {
 80016d6:	4b9f      	ldr	r3, [pc, #636]	; (8001954 <main+0x2f4>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	d105      	bne.n	80016ec <main+0x8c>
			ADC1->CR |= ADC_CR_ADSTART;		// Start ADC conversion
 80016e0:	4b9c      	ldr	r3, [pc, #624]	; (8001954 <main+0x2f4>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4b9b      	ldr	r3, [pc, #620]	; (8001954 <main+0x2f4>)
 80016e6:	2104      	movs	r1, #4
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
		}


		// Display current date
		DisplayNumberSet(day_t, day_u, month_t, month_u, year_t, year_u);
 80016ec:	4b9a      	ldr	r3, [pc, #616]	; (8001958 <main+0x2f8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2d8      	uxtb	r0, r3
 80016f2:	4b9a      	ldr	r3, [pc, #616]	; (800195c <main+0x2fc>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2d9      	uxtb	r1, r3
 80016f8:	4b99      	ldr	r3, [pc, #612]	; (8001960 <main+0x300>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2dc      	uxtb	r4, r3
 80016fe:	4b99      	ldr	r3, [pc, #612]	; (8001964 <main+0x304>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2dd      	uxtb	r5, r3
 8001704:	4b98      	ldr	r3, [pc, #608]	; (8001968 <main+0x308>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4a98      	ldr	r2, [pc, #608]	; (800196c <main+0x30c>)
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	9201      	str	r2, [sp, #4]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	002b      	movs	r3, r5
 8001716:	0022      	movs	r2, r4
 8001718:	f000 f940 	bl	800199c <DisplayNumberSet>

		// Assign current color values
		assignColour(hour_t, hour_u, &red, &green, &blue);
 800171c:	4b94      	ldr	r3, [pc, #592]	; (8001970 <main+0x310>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2d8      	uxtb	r0, r3
 8001722:	4b94      	ldr	r3, [pc, #592]	; (8001974 <main+0x314>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2d9      	uxtb	r1, r3
 8001728:	2516      	movs	r5, #22
 800172a:	197c      	adds	r4, r7, r5
 800172c:	2617      	movs	r6, #23
 800172e:	19ba      	adds	r2, r7, r6
 8001730:	2315      	movs	r3, #21
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	0023      	movs	r3, r4
 8001738:	f001 fa3e 	bl	8002bb8 <assignColour>
		// Display the current date


		// Display the current time
		FillLEDArray(LED_buf, 0, 0, 0);
 800173c:	4881      	ldr	r0, [pc, #516]	; (8001944 <main+0x2e4>)
 800173e:	2300      	movs	r3, #0
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	f001 f850 	bl	80027e8 <FillLEDArray>
		FillLEDNumber(LED_buf, 0, hour_t, red, green, blue);
 8001748:	4b89      	ldr	r3, [pc, #548]	; (8001970 <main+0x310>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2d9      	uxtb	r1, r3
 800174e:	19bb      	adds	r3, r7, r6
 8001750:	781c      	ldrb	r4, [r3, #0]
 8001752:	197b      	adds	r3, r7, r5
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2215      	movs	r2, #21
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	4879      	ldr	r0, [pc, #484]	; (8001944 <main+0x2e4>)
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	0023      	movs	r3, r4
 8001764:	000a      	movs	r2, r1
 8001766:	2100      	movs	r1, #0
 8001768:	f000 fdd4 	bl	8002314 <FillLEDNumber>
		FillLEDNumber(LED_buf, 1, hour_u, red, green, blue);
 800176c:	4b81      	ldr	r3, [pc, #516]	; (8001974 <main+0x314>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2d9      	uxtb	r1, r3
 8001772:	19bb      	adds	r3, r7, r6
 8001774:	781c      	ldrb	r4, [r3, #0]
 8001776:	197b      	adds	r3, r7, r5
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2215      	movs	r2, #21
 800177c:	18ba      	adds	r2, r7, r2
 800177e:	7812      	ldrb	r2, [r2, #0]
 8001780:	4870      	ldr	r0, [pc, #448]	; (8001944 <main+0x2e4>)
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	0023      	movs	r3, r4
 8001788:	000a      	movs	r2, r1
 800178a:	2101      	movs	r1, #1
 800178c:	f000 fdc2 	bl	8002314 <FillLEDNumber>
		FillLEDNumber(LED_buf, 2, minute_t, red, green, blue);
 8001790:	4b79      	ldr	r3, [pc, #484]	; (8001978 <main+0x318>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2d9      	uxtb	r1, r3
 8001796:	19bb      	adds	r3, r7, r6
 8001798:	781c      	ldrb	r4, [r3, #0]
 800179a:	197b      	adds	r3, r7, r5
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2215      	movs	r2, #21
 80017a0:	18ba      	adds	r2, r7, r2
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	4867      	ldr	r0, [pc, #412]	; (8001944 <main+0x2e4>)
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	0023      	movs	r3, r4
 80017ac:	000a      	movs	r2, r1
 80017ae:	2102      	movs	r1, #2
 80017b0:	f000 fdb0 	bl	8002314 <FillLEDNumber>
		FillLEDNumber(LED_buf, 3, minute_u, red, green, blue);
 80017b4:	4b71      	ldr	r3, [pc, #452]	; (800197c <main+0x31c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	19bb      	adds	r3, r7, r6
 80017bc:	781c      	ldrb	r4, [r3, #0]
 80017be:	197b      	adds	r3, r7, r5
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2215      	movs	r2, #21
 80017c4:	18ba      	adds	r2, r7, r2
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	485e      	ldr	r0, [pc, #376]	; (8001944 <main+0x2e4>)
 80017ca:	9201      	str	r2, [sp, #4]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	0023      	movs	r3, r4
 80017d0:	000a      	movs	r2, r1
 80017d2:	2103      	movs	r1, #3
 80017d4:	f000 fd9e 	bl	8002314 <FillLEDNumber>
		SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 80017d8:	23a2      	movs	r3, #162	; 0xa2
 80017da:	00da      	lsls	r2, r3, #3
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <main+0x2e4>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f001 f9ab 	bl	8002b3c <SPI_SEND_WSBUF>
		delay_ms(990);
 80017e6:	4b66      	ldr	r3, [pc, #408]	; (8001980 <main+0x320>)
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fe9b 	bl	8001524 <delay_ms>
		FillLEDSegment(LED_buf, 26, 27, 0x0f, 0x03, 0);
 80017ee:	4855      	ldr	r0, [pc, #340]	; (8001944 <main+0x2e4>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2303      	movs	r3, #3
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	230f      	movs	r3, #15
 80017fa:	221b      	movs	r2, #27
 80017fc:	211a      	movs	r1, #26
 80017fe:	f001 f861 	bl	80028c4 <FillLEDSegment>
		SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 8001802:	23a2      	movs	r3, #162	; 0xa2
 8001804:	00da      	lsls	r2, r3, #3
 8001806:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <main+0x2e4>)
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f001 f996 	bl	8002b3c <SPI_SEND_WSBUF>
		delay_ms(990);
 8001810:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <main+0x320>)
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fe86 	bl	8001524 <delay_ms>

		// Check if menu should be displayed
		if (button_flag[B_SET]) {
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <main+0x2ec>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <main+0x1e8>
			button_flag[B_SET]=0;
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <main+0x2ec>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			dot_enable[1]=0; dot_enable[3]=0;
 8001828:	4b49      	ldr	r3, [pc, #292]	; (8001950 <main+0x2f0>)
 800182a:	2200      	movs	r2, #0
 800182c:	705a      	strb	r2, [r3, #1]
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <main+0x2f0>)
 8001830:	2200      	movs	r2, #0
 8001832:	70da      	strb	r2, [r3, #3]
			displayMenu(&menu_strct);
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff f8d6 	bl	80009e8 <displayMenu>
			dot_enable[1]=1; dot_enable[3]=1;
 800183c:	4b44      	ldr	r3, [pc, #272]	; (8001950 <main+0x2f0>)
 800183e:	2201      	movs	r2, #1
 8001840:	705a      	strb	r2, [r3, #1]
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <main+0x2f0>)
 8001844:	2201      	movs	r2, #1
 8001846:	70da      	strb	r2, [r3, #3]
		}

		// Check alarm mode
		if (al_enable_flag == 1 && al_hour_t == hour_t && al_hour_u && hour_u && al_min_t == minute_t && al_min_u == minute_u) {	// Ring alarm if above is true
 8001848:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <main+0x324>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d000      	beq.n	8001852 <main+0x1f2>
 8001850:	e741      	b.n	80016d6 <main+0x76>
 8001852:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <main+0x328>)
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4b46      	ldr	r3, [pc, #280]	; (8001970 <main+0x310>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	429a      	cmp	r2, r3
 800185e:	d000      	beq.n	8001862 <main+0x202>
 8001860:	e739      	b.n	80016d6 <main+0x76>
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <main+0x32c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d100      	bne.n	800186c <main+0x20c>
 800186a:	e734      	b.n	80016d6 <main+0x76>
 800186c:	4b41      	ldr	r3, [pc, #260]	; (8001974 <main+0x314>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <main+0x218>
 8001876:	e72e      	b.n	80016d6 <main+0x76>
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <main+0x330>)
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <main+0x318>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	429a      	cmp	r2, r3
 8001884:	d000      	beq.n	8001888 <main+0x228>
 8001886:	e726      	b.n	80016d6 <main+0x76>
 8001888:	4b42      	ldr	r3, [pc, #264]	; (8001994 <main+0x334>)
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <main+0x31c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	429a      	cmp	r2, r3
 8001894:	d000      	beq.n	8001898 <main+0x238>
 8001896:	e71e      	b.n	80016d6 <main+0x76>
			// Clear LCD Display (display SPACEs)
			LEDClr();
 8001898:	f000 fca6 	bl	80021e8 <LEDClr>
			// Clear WS2812B Display
			FillLEDArray(LED_buf, 30, 0, 0);
 800189c:	4829      	ldr	r0, [pc, #164]	; (8001944 <main+0x2e4>)
 800189e:	2300      	movs	r3, #0
 80018a0:	2200      	movs	r2, #0
 80018a2:	211e      	movs	r1, #30
 80018a4:	f000 ffa0 	bl	80027e8 <FillLEDArray>
			SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 80018a8:	23a2      	movs	r3, #162	; 0xa2
 80018aa:	00da      	lsls	r2, r3, #3
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <main+0x2e4>)
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 f943 	bl	8002b3c <SPI_SEND_WSBUF>
			DisplayLEDStr("alarm");
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <main+0x338>)
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f8b8 	bl	8001a2e <DisplayLEDStr>
			dot_enable[1]=0; dot_enable[3]=0;
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <main+0x2f0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	705a      	strb	r2, [r3, #1]
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <main+0x2f0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	70da      	strb	r2, [r3, #3]
			while(!button_flag[B_SET]) {
 80018ca:	e01f      	b.n	800190c <main+0x2ac>
				FillLEDArray(LED_buf, 30, 0, 0);
 80018cc:	481d      	ldr	r0, [pc, #116]	; (8001944 <main+0x2e4>)
 80018ce:	2300      	movs	r3, #0
 80018d0:	2200      	movs	r2, #0
 80018d2:	211e      	movs	r1, #30
 80018d4:	f000 ff88 	bl	80027e8 <FillLEDArray>
				SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 80018d8:	23a2      	movs	r3, #162	; 0xa2
 80018da:	00da      	lsls	r2, r3, #3
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <main+0x2e4>)
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 f92b 	bl	8002b3c <SPI_SEND_WSBUF>
				buzz(250);
 80018e6:	20fa      	movs	r0, #250	; 0xfa
 80018e8:	f7ff fe3c 	bl	8001564 <buzz>
				FillLEDArray(LED_buf, 0, 0, 30);
 80018ec:	4815      	ldr	r0, [pc, #84]	; (8001944 <main+0x2e4>)
 80018ee:	231e      	movs	r3, #30
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	f000 ff78 	bl	80027e8 <FillLEDArray>
				SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 80018f8:	23a2      	movs	r3, #162	; 0xa2
 80018fa:	00da      	lsls	r2, r3, #3
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <main+0x2e4>)
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f001 f91b 	bl	8002b3c <SPI_SEND_WSBUF>
				delay_ms(250);
 8001906:	20fa      	movs	r0, #250	; 0xfa
 8001908:	f7ff fe0c 	bl	8001524 <delay_ms>
			while(!button_flag[B_SET]) {
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <main+0x2ec>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0da      	beq.n	80018cc <main+0x26c>
			}
			LEDClr();
 8001916:	f000 fc67 	bl	80021e8 <LEDClr>
			button_flag[B_SET]=0;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <main+0x2ec>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
			dot_enable[1]=1; dot_enable[3]=1;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <main+0x2f0>)
 8001922:	2201      	movs	r2, #1
 8001924:	705a      	strb	r2, [r3, #1]
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <main+0x2f0>)
 8001928:	2201      	movs	r2, #1
 800192a:	70da      	strb	r2, [r3, #3]
			al_enable_flag = 0;
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <main+0x324>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
			GPIOA->ODR &= ~GPIO_ODR_OD6;
 8001932:	23a0      	movs	r3, #160	; 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	23a0      	movs	r3, #160	; 0xa0
 800193a:	05db      	lsls	r3, r3, #23
 800193c:	2140      	movs	r1, #64	; 0x40
 800193e:	438a      	bics	r2, r1
 8001940:	615a      	str	r2, [r3, #20]
		if ((ADC1->CR & ADC_CR_ADSTART) == 0) {
 8001942:	e6c8      	b.n	80016d6 <main+0x76>
 8001944:	2000006c 	.word	0x2000006c
 8001948:	0800339c 	.word	0x0800339c
 800194c:	20000060 	.word	0x20000060
 8001950:	20000044 	.word	0x20000044
 8001954:	40012400 	.word	0x40012400
 8001958:	20000058 	.word	0x20000058
 800195c:	20000063 	.word	0x20000063
 8001960:	2000057d 	.word	0x2000057d
 8001964:	20000069 	.word	0x20000069
 8001968:	20000068 	.word	0x20000068
 800196c:	20000059 	.word	0x20000059
 8001970:	2000057c 	.word	0x2000057c
 8001974:	2000005b 	.word	0x2000005b
 8001978:	2000005a 	.word	0x2000005a
 800197c:	20000064 	.word	0x20000064
 8001980:	000003de 	.word	0x000003de
 8001984:	2000005c 	.word	0x2000005c
 8001988:	20000065 	.word	0x20000065
 800198c:	2000005d 	.word	0x2000005d
 8001990:	20000067 	.word	0x20000067
 8001994:	2000006a 	.word	0x2000006a
 8001998:	080033ac 	.word	0x080033ac

0800199c <DisplayNumberSet>:

// Select for which DOT should be enabled
volatile uint8_t dot_enable[6] = {OFF, OFF, OFF, OFF, OFF, OFF};


void DisplayNumberSet(uint8_t n0, uint8_t n1, uint8_t n2, uint8_t n3, uint8_t n4, uint8_t n5) {
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	0005      	movs	r5, r0
 80019a4:	000c      	movs	r4, r1
 80019a6:	0010      	movs	r0, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	1c2a      	adds	r2, r5, #0
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	1c22      	adds	r2, r4, #0
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	1d7b      	adds	r3, r7, #5
 80019b8:	1c02      	adds	r2, r0, #0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	1c0a      	adds	r2, r1, #0
 80019c0:	701a      	strb	r2, [r3, #0]
	displayChar((n0+48), 0);
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 f977 	bl	8001cc0 <displayChar>
	displayChar((n1+48), 1);
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2101      	movs	r1, #1
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 f96f 	bl	8001cc0 <displayChar>
	displayChar((n2+48), 2);
 80019e2:	1d7b      	adds	r3, r7, #5
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2102      	movs	r1, #2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f967 	bl	8001cc0 <displayChar>
	displayChar((n3+48), 3);
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	3330      	adds	r3, #48	; 0x30
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2103      	movs	r1, #3
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f95f 	bl	8001cc0 <displayChar>
	displayChar((n4+48), 4);
 8001a02:	2318      	movs	r3, #24
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	3330      	adds	r3, #48	; 0x30
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f956 	bl	8001cc0 <displayChar>
	displayChar((n5+48), 5);
 8001a14:	231c      	movs	r3, #28
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3330      	adds	r3, #48	; 0x30
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2105      	movs	r1, #5
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f94d 	bl	8001cc0 <displayChar>
	// 48 must be added to reach the number char value from the ASCII table
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}

08001a2e <DisplayLEDStr>:

void DisplayLEDStr(char * str) {
 8001a2e:	b590      	push	{r4, r7, lr}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	uint8_t i;
	LEDClr();
 8001a36:	f000 fbd7 	bl	80021e8 <LEDClr>
	for (i=0; i<6; i++) {
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e012      	b.n	8001a6a <DisplayLEDStr+0x3c>
		displayChar(str[i], i);
 8001a44:	210f      	movs	r1, #15
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	000c      	movs	r4, r1
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	0019      	movs	r1, r3
 8001a58:	0010      	movs	r0, r2
 8001a5a:	f000 f931 	bl	8001cc0 <displayChar>
	for (i=0; i<6; i++) {
 8001a5e:	0021      	movs	r1, r4
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	3201      	adds	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d9e7      	bls.n	8001a44 <DisplayLEDStr+0x16>
	}
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b005      	add	sp, #20
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <ScrollLed>:

void ScrollLed(char * data, uint16_t speed, uint8_t len) {
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	b08d      	sub	sp, #52	; 0x34
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	61f8      	str	r0, [r7, #28]
 8001a84:	0010      	movs	r0, r2
 8001a86:	221a      	movs	r2, #26
 8001a88:	18ba      	adds	r2, r7, r2
 8001a8a:	8011      	strh	r1, [r2, #0]
 8001a8c:	2219      	movs	r2, #25
 8001a8e:	18ba      	adds	r2, r7, r2
 8001a90:	1c01      	adds	r1, r0, #0
 8001a92:	7011      	strb	r1, [r2, #0]
 8001a94:	466a      	mov	r2, sp
 8001a96:	607a      	str	r2, [r7, #4]
	uint8_t j=0;
 8001a98:	2216      	movs	r2, #22
 8001a9a:	2118      	movs	r1, #24
 8001a9c:	468c      	mov	ip, r1
 8001a9e:	44bc      	add	ip, r7
 8001aa0:	4462      	add	r2, ip
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	7011      	strb	r1, [r2, #0]
	uint8_t k=0;
 8001aa6:	2117      	movs	r1, #23
 8001aa8:	2018      	movs	r0, #24
 8001aaa:	1838      	adds	r0, r7, r0
 8001aac:	1842      	adds	r2, r0, r1
 8001aae:	2100      	movs	r1, #0
 8001ab0:	7011      	strb	r1, [r2, #0]
	char temp_buf[len+12];
 8001ab2:	2219      	movs	r2, #25
 8001ab4:	18ba      	adds	r2, r7, r2
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	320c      	adds	r2, #12
 8001aba:	1e51      	subs	r1, r2, #1
 8001abc:	62b9      	str	r1, [r7, #40]	; 0x28
 8001abe:	0011      	movs	r1, r2
 8001ac0:	6139      	str	r1, [r7, #16]
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	6179      	str	r1, [r7, #20]
 8001ac6:	6939      	ldr	r1, [r7, #16]
 8001ac8:	0f49      	lsrs	r1, r1, #29
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	00c6      	lsls	r6, r0, #3
 8001ace:	430e      	orrs	r6, r1
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	00cd      	lsls	r5, r1, #3
 8001ad4:	0011      	movs	r1, r2
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	2100      	movs	r1, #0
 8001ada:	60f9      	str	r1, [r7, #12]
 8001adc:	68bd      	ldr	r5, [r7, #8]
 8001ade:	68fe      	ldr	r6, [r7, #12]
 8001ae0:	0029      	movs	r1, r5
 8001ae2:	0f49      	lsrs	r1, r1, #29
 8001ae4:	0030      	movs	r0, r6
 8001ae6:	00c4      	lsls	r4, r0, #3
 8001ae8:	430c      	orrs	r4, r1
 8001aea:	0029      	movs	r1, r5
 8001aec:	00cb      	lsls	r3, r1, #3
 8001aee:	0013      	movs	r3, r2
 8001af0:	3307      	adds	r3, #7
 8001af2:	08db      	lsrs	r3, r3, #3
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4669      	mov	r1, sp
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	469d      	mov	sp, r3
 8001afc:	466b      	mov	r3, sp
 8001afe:	3300      	adds	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
	memset(temp_buf, 32, (len+12));
 8001b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b04:	2319      	movs	r3, #25
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	330c      	adds	r3, #12
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	2120      	movs	r1, #32
 8001b10:	f001 fc10 	bl	8003334 <memset>
	for (j=6; j<(5+len); j++) {
 8001b14:	2216      	movs	r2, #22
 8001b16:	2318      	movs	r3, #24
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	189b      	adds	r3, r3, r2
 8001b1c:	2206      	movs	r2, #6
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e01b      	b.n	8001b5a <ScrollLed+0xde>
		temp_buf[j] = data[k];
 8001b22:	2017      	movs	r0, #23
 8001b24:	2518      	movs	r5, #24
 8001b26:	197b      	adds	r3, r7, r5
 8001b28:	181b      	adds	r3, r3, r0
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	18d2      	adds	r2, r2, r3
 8001b30:	2416      	movs	r4, #22
 8001b32:	197b      	adds	r3, r7, r5
 8001b34:	191b      	adds	r3, r3, r4
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	7811      	ldrb	r1, [r2, #0]
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	54d1      	strb	r1, [r2, r3]
		k++;
 8001b3e:	197b      	adds	r3, r7, r5
 8001b40:	181b      	adds	r3, r3, r0
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	197b      	adds	r3, r7, r5
 8001b46:	181b      	adds	r3, r3, r0
 8001b48:	3201      	adds	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
	for (j=6; j<(5+len); j++) {
 8001b4c:	197b      	adds	r3, r7, r5
 8001b4e:	191b      	adds	r3, r3, r4
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	197b      	adds	r3, r7, r5
 8001b54:	191b      	adds	r3, r3, r4
 8001b56:	3201      	adds	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	2316      	movs	r3, #22
 8001b5c:	2218      	movs	r2, #24
 8001b5e:	4694      	mov	ip, r2
 8001b60:	44bc      	add	ip, r7
 8001b62:	4463      	add	r3, ip
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	2319      	movs	r3, #25
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	3305      	adds	r3, #5
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbd7      	blt.n	8001b22 <ScrollLed+0xa6>
	}
	k=0;
 8001b72:	2317      	movs	r3, #23
 8001b74:	2218      	movs	r2, #24
 8001b76:	4694      	mov	ip, r2
 8001b78:	44bc      	add	ip, r7
 8001b7a:	4463      	add	r3, ip
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
	for (j=0; j<=(6+len); j++) {
 8001b80:	2316      	movs	r3, #22
 8001b82:	2218      	movs	r2, #24
 8001b84:	4694      	mov	ip, r2
 8001b86:	44bc      	add	ip, r7
 8001b88:	4463      	add	r3, ip
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e084      	b.n	8001c9a <ScrollLed+0x21e>
		displayChar(temp_buf[k+j], 0); k++;
 8001b90:	2417      	movs	r4, #23
 8001b92:	2618      	movs	r6, #24
 8001b94:	19bb      	adds	r3, r7, r6
 8001b96:	191b      	adds	r3, r3, r4
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	2516      	movs	r5, #22
 8001b9c:	19bb      	adds	r3, r7, r6
 8001b9e:	195b      	adds	r3, r3, r5
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f888 	bl	8001cc0 <displayChar>
 8001bb0:	19bb      	adds	r3, r7, r6
 8001bb2:	191b      	adds	r3, r3, r4
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	19bb      	adds	r3, r7, r6
 8001bb8:	191b      	adds	r3, r3, r4
 8001bba:	3201      	adds	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 1); k++;
 8001bbe:	19bb      	adds	r3, r7, r6
 8001bc0:	191b      	adds	r3, r3, r4
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	19bb      	adds	r3, r7, r6
 8001bc6:	195b      	adds	r3, r3, r5
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	18d3      	adds	r3, r2, r3
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f874 	bl	8001cc0 <displayChar>
 8001bd8:	19bb      	adds	r3, r7, r6
 8001bda:	191b      	adds	r3, r3, r4
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	19bb      	adds	r3, r7, r6
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	3201      	adds	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 2); k++;
 8001be6:	19bb      	adds	r3, r7, r6
 8001be8:	191b      	adds	r3, r3, r4
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	19bb      	adds	r3, r7, r6
 8001bee:	195b      	adds	r3, r3, r5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f860 	bl	8001cc0 <displayChar>
 8001c00:	19bb      	adds	r3, r7, r6
 8001c02:	191b      	adds	r3, r3, r4
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	19bb      	adds	r3, r7, r6
 8001c08:	191b      	adds	r3, r3, r4
 8001c0a:	3201      	adds	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 3); k++;
 8001c0e:	19bb      	adds	r3, r7, r6
 8001c10:	191b      	adds	r3, r3, r4
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	19bb      	adds	r3, r7, r6
 8001c16:	195b      	adds	r3, r3, r5
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	18d3      	adds	r3, r2, r3
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	2103      	movs	r1, #3
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 f84c 	bl	8001cc0 <displayChar>
 8001c28:	19bb      	adds	r3, r7, r6
 8001c2a:	191b      	adds	r3, r3, r4
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	19bb      	adds	r3, r7, r6
 8001c30:	191b      	adds	r3, r3, r4
 8001c32:	3201      	adds	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 4); k++;
 8001c36:	19bb      	adds	r3, r7, r6
 8001c38:	191b      	adds	r3, r3, r4
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	19bb      	adds	r3, r7, r6
 8001c3e:	195b      	adds	r3, r3, r5
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	18d3      	adds	r3, r2, r3
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	2104      	movs	r1, #4
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f838 	bl	8001cc0 <displayChar>
 8001c50:	19bb      	adds	r3, r7, r6
 8001c52:	191b      	adds	r3, r3, r4
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	19bb      	adds	r3, r7, r6
 8001c58:	191b      	adds	r3, r3, r4
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
		displayChar(temp_buf[k+j], 5); k=0;
 8001c5e:	19bb      	adds	r3, r7, r6
 8001c60:	191b      	adds	r3, r3, r4
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	19bb      	adds	r3, r7, r6
 8001c66:	195b      	adds	r3, r3, r5
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	18d3      	adds	r3, r2, r3
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	2105      	movs	r1, #5
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f824 	bl	8001cc0 <displayChar>
 8001c78:	19bb      	adds	r3, r7, r6
 8001c7a:	191b      	adds	r3, r3, r4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
		delay_ms(speed);
 8001c80:	231a      	movs	r3, #26
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff fc4c 	bl	8001524 <delay_ms>
	for (j=0; j<=(6+len); j++) {
 8001c8c:	19bb      	adds	r3, r7, r6
 8001c8e:	195b      	adds	r3, r3, r5
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	19bb      	adds	r3, r7, r6
 8001c94:	195b      	adds	r3, r3, r5
 8001c96:	3201      	adds	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	2316      	movs	r3, #22
 8001c9c:	2218      	movs	r2, #24
 8001c9e:	4694      	mov	ip, r2
 8001ca0:	44bc      	add	ip, r7
 8001ca2:	4463      	add	r3, ip
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	2319      	movs	r3, #25
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3306      	adds	r3, #6
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dc00      	bgt.n	8001cb4 <ScrollLed+0x238>
 8001cb2:	e76d      	b.n	8001b90 <ScrollLed+0x114>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	469d      	mov	sp, r3
	}
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b00d      	add	sp, #52	; 0x34
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc0 <displayChar>:

void displayChar(char c, uint8_t pos) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	1dbb      	adds	r3, r7, #6
 8001cce:	1c0a      	adds	r2, r1, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
	if (pos<0 && pos>5) return;
	if ((c>47 && c<58) || (c>96 && c<123) || (c==32)) {
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b2f      	cmp	r3, #47	; 0x2f
 8001cd8:	d903      	bls.n	8001ce2 <displayChar+0x22>
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b39      	cmp	r3, #57	; 0x39
 8001ce0:	d90c      	bls.n	8001cfc <displayChar+0x3c>
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b60      	cmp	r3, #96	; 0x60
 8001ce8:	d903      	bls.n	8001cf2 <displayChar+0x32>
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b7a      	cmp	r3, #122	; 0x7a
 8001cf0:	d904      	bls.n	8001cfc <displayChar+0x3c>
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d000      	beq.n	8001cfc <displayChar+0x3c>
 8001cfa:	e1dc      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='0') {led_dsp[pos] = ZERO; return;}
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b30      	cmp	r3, #48	; 0x30
 8001d02:	d106      	bne.n	8001d12 <displayChar+0x52>
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	49c2      	ldr	r1, [pc, #776]	; (8002014 <displayChar+0x354>)
 8001d0a:	4bc3      	ldr	r3, [pc, #780]	; (8002018 <displayChar+0x358>)
 8001d0c:	0052      	lsls	r2, r2, #1
 8001d0e:	52d1      	strh	r1, [r2, r3]
 8001d10:	e1d1      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='1') {led_dsp[pos] = ONE; return;}
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b31      	cmp	r3, #49	; 0x31
 8001d18:	d106      	bne.n	8001d28 <displayChar+0x68>
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	49bf      	ldr	r1, [pc, #764]	; (800201c <displayChar+0x35c>)
 8001d20:	4bbd      	ldr	r3, [pc, #756]	; (8002018 <displayChar+0x358>)
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	52d1      	strh	r1, [r2, r3]
 8001d26:	e1c6      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='2') {led_dsp[pos] = TWO; return;}
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b32      	cmp	r3, #50	; 0x32
 8001d2e:	d106      	bne.n	8001d3e <displayChar+0x7e>
 8001d30:	1dbb      	adds	r3, r7, #6
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	49ba      	ldr	r1, [pc, #744]	; (8002020 <displayChar+0x360>)
 8001d36:	4bb8      	ldr	r3, [pc, #736]	; (8002018 <displayChar+0x358>)
 8001d38:	0052      	lsls	r2, r2, #1
 8001d3a:	52d1      	strh	r1, [r2, r3]
 8001d3c:	e1bb      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='3') {led_dsp[pos] = THREE; return;}
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b33      	cmp	r3, #51	; 0x33
 8001d44:	d106      	bne.n	8001d54 <displayChar+0x94>
 8001d46:	1dbb      	adds	r3, r7, #6
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	49b6      	ldr	r1, [pc, #728]	; (8002024 <displayChar+0x364>)
 8001d4c:	4bb2      	ldr	r3, [pc, #712]	; (8002018 <displayChar+0x358>)
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	52d1      	strh	r1, [r2, r3]
 8001d52:	e1b0      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='4') {led_dsp[pos] = FOUR; return;}
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b34      	cmp	r3, #52	; 0x34
 8001d5a:	d106      	bne.n	8001d6a <displayChar+0xaa>
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	49b1      	ldr	r1, [pc, #708]	; (8002028 <displayChar+0x368>)
 8001d62:	4bad      	ldr	r3, [pc, #692]	; (8002018 <displayChar+0x358>)
 8001d64:	0052      	lsls	r2, r2, #1
 8001d66:	52d1      	strh	r1, [r2, r3]
 8001d68:	e1a5      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='5') {led_dsp[pos] = FIVE; return;}
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b35      	cmp	r3, #53	; 0x35
 8001d70:	d106      	bne.n	8001d80 <displayChar+0xc0>
 8001d72:	1dbb      	adds	r3, r7, #6
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	49ad      	ldr	r1, [pc, #692]	; (800202c <displayChar+0x36c>)
 8001d78:	4ba7      	ldr	r3, [pc, #668]	; (8002018 <displayChar+0x358>)
 8001d7a:	0052      	lsls	r2, r2, #1
 8001d7c:	52d1      	strh	r1, [r2, r3]
 8001d7e:	e19a      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='6') {led_dsp[pos] = SIX; return;}
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b36      	cmp	r3, #54	; 0x36
 8001d86:	d106      	bne.n	8001d96 <displayChar+0xd6>
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	49a8      	ldr	r1, [pc, #672]	; (8002030 <displayChar+0x370>)
 8001d8e:	4ba2      	ldr	r3, [pc, #648]	; (8002018 <displayChar+0x358>)
 8001d90:	0052      	lsls	r2, r2, #1
 8001d92:	52d1      	strh	r1, [r2, r3]
 8001d94:	e18f      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='7') {led_dsp[pos] = SEVEN; return;}
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b37      	cmp	r3, #55	; 0x37
 8001d9c:	d106      	bne.n	8001dac <displayChar+0xec>
 8001d9e:	1dbb      	adds	r3, r7, #6
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	49a4      	ldr	r1, [pc, #656]	; (8002034 <displayChar+0x374>)
 8001da4:	4b9c      	ldr	r3, [pc, #624]	; (8002018 <displayChar+0x358>)
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	52d1      	strh	r1, [r2, r3]
 8001daa:	e184      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='8') {led_dsp[pos] = EIGHT; return;}
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b38      	cmp	r3, #56	; 0x38
 8001db2:	d106      	bne.n	8001dc2 <displayChar+0x102>
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	499f      	ldr	r1, [pc, #636]	; (8002038 <displayChar+0x378>)
 8001dba:	4b97      	ldr	r3, [pc, #604]	; (8002018 <displayChar+0x358>)
 8001dbc:	0052      	lsls	r2, r2, #1
 8001dbe:	52d1      	strh	r1, [r2, r3]
 8001dc0:	e179      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='9') {led_dsp[pos] = NINE; return;}
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b39      	cmp	r3, #57	; 0x39
 8001dc8:	d106      	bne.n	8001dd8 <displayChar+0x118>
 8001dca:	1dbb      	adds	r3, r7, #6
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	499b      	ldr	r1, [pc, #620]	; (800203c <displayChar+0x37c>)
 8001dd0:	4b91      	ldr	r3, [pc, #580]	; (8002018 <displayChar+0x358>)
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	52d1      	strh	r1, [r2, r3]
 8001dd6:	e16e      	b.n	80020b6 <displayChar+0x3f6>

		if (c==' ') {led_dsp[pos] = SPACE; return;}
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d106      	bne.n	8001dee <displayChar+0x12e>
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4996      	ldr	r1, [pc, #600]	; (8002040 <displayChar+0x380>)
 8001de6:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <displayChar+0x358>)
 8001de8:	0052      	lsls	r2, r2, #1
 8001dea:	52d1      	strh	r1, [r2, r3]
 8001dec:	e163      	b.n	80020b6 <displayChar+0x3f6>

		if (c=='a') {led_dsp[pos] = A; return;}
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b61      	cmp	r3, #97	; 0x61
 8001df4:	d106      	bne.n	8001e04 <displayChar+0x144>
 8001df6:	1dbb      	adds	r3, r7, #6
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	4992      	ldr	r1, [pc, #584]	; (8002044 <displayChar+0x384>)
 8001dfc:	4b86      	ldr	r3, [pc, #536]	; (8002018 <displayChar+0x358>)
 8001dfe:	0052      	lsls	r2, r2, #1
 8001e00:	52d1      	strh	r1, [r2, r3]
 8001e02:	e158      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='b') {led_dsp[pos] = B; return;}
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b62      	cmp	r3, #98	; 0x62
 8001e0a:	d106      	bne.n	8001e1a <displayChar+0x15a>
 8001e0c:	1dbb      	adds	r3, r7, #6
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	498d      	ldr	r1, [pc, #564]	; (8002048 <displayChar+0x388>)
 8001e12:	4b81      	ldr	r3, [pc, #516]	; (8002018 <displayChar+0x358>)
 8001e14:	0052      	lsls	r2, r2, #1
 8001e16:	52d1      	strh	r1, [r2, r3]
 8001e18:	e14d      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='c') {led_dsp[pos] = C; return;}
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b63      	cmp	r3, #99	; 0x63
 8001e20:	d106      	bne.n	8001e30 <displayChar+0x170>
 8001e22:	1dbb      	adds	r3, r7, #6
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4989      	ldr	r1, [pc, #548]	; (800204c <displayChar+0x38c>)
 8001e28:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <displayChar+0x358>)
 8001e2a:	0052      	lsls	r2, r2, #1
 8001e2c:	52d1      	strh	r1, [r2, r3]
 8001e2e:	e142      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='d') {led_dsp[pos] = D; return;}
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d106      	bne.n	8001e46 <displayChar+0x186>
 8001e38:	1dbb      	adds	r3, r7, #6
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	4984      	ldr	r1, [pc, #528]	; (8002050 <displayChar+0x390>)
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <displayChar+0x358>)
 8001e40:	0052      	lsls	r2, r2, #1
 8001e42:	52d1      	strh	r1, [r2, r3]
 8001e44:	e137      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='e') {led_dsp[pos] = E; return;}
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b65      	cmp	r3, #101	; 0x65
 8001e4c:	d106      	bne.n	8001e5c <displayChar+0x19c>
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	4980      	ldr	r1, [pc, #512]	; (8002054 <displayChar+0x394>)
 8001e54:	4b70      	ldr	r3, [pc, #448]	; (8002018 <displayChar+0x358>)
 8001e56:	0052      	lsls	r2, r2, #1
 8001e58:	52d1      	strh	r1, [r2, r3]
 8001e5a:	e12c      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='f') {led_dsp[pos] = F; return;}
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b66      	cmp	r3, #102	; 0x66
 8001e62:	d106      	bne.n	8001e72 <displayChar+0x1b2>
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	497b      	ldr	r1, [pc, #492]	; (8002058 <displayChar+0x398>)
 8001e6a:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <displayChar+0x358>)
 8001e6c:	0052      	lsls	r2, r2, #1
 8001e6e:	52d1      	strh	r1, [r2, r3]
 8001e70:	e121      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='g') {led_dsp[pos] = G; return;}
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b67      	cmp	r3, #103	; 0x67
 8001e78:	d106      	bne.n	8001e88 <displayChar+0x1c8>
 8001e7a:	1dbb      	adds	r3, r7, #6
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4977      	ldr	r1, [pc, #476]	; (800205c <displayChar+0x39c>)
 8001e80:	4b65      	ldr	r3, [pc, #404]	; (8002018 <displayChar+0x358>)
 8001e82:	0052      	lsls	r2, r2, #1
 8001e84:	52d1      	strh	r1, [r2, r3]
 8001e86:	e116      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='h') {led_dsp[pos] = H; return;}
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b68      	cmp	r3, #104	; 0x68
 8001e8e:	d106      	bne.n	8001e9e <displayChar+0x1de>
 8001e90:	1dbb      	adds	r3, r7, #6
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	4972      	ldr	r1, [pc, #456]	; (8002060 <displayChar+0x3a0>)
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <displayChar+0x358>)
 8001e98:	0052      	lsls	r2, r2, #1
 8001e9a:	52d1      	strh	r1, [r2, r3]
 8001e9c:	e10b      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='i') {led_dsp[pos] = I; return;}
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b69      	cmp	r3, #105	; 0x69
 8001ea4:	d106      	bne.n	8001eb4 <displayChar+0x1f4>
 8001ea6:	1dbb      	adds	r3, r7, #6
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	496e      	ldr	r1, [pc, #440]	; (8002064 <displayChar+0x3a4>)
 8001eac:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <displayChar+0x358>)
 8001eae:	0052      	lsls	r2, r2, #1
 8001eb0:	52d1      	strh	r1, [r2, r3]
 8001eb2:	e100      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='j') {led_dsp[pos] = J; return;}
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b6a      	cmp	r3, #106	; 0x6a
 8001eba:	d106      	bne.n	8001eca <displayChar+0x20a>
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4969      	ldr	r1, [pc, #420]	; (8002068 <displayChar+0x3a8>)
 8001ec2:	4b55      	ldr	r3, [pc, #340]	; (8002018 <displayChar+0x358>)
 8001ec4:	0052      	lsls	r2, r2, #1
 8001ec6:	52d1      	strh	r1, [r2, r3]
 8001ec8:	e0f5      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='k') {led_dsp[pos] = K; return;}
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b6b      	cmp	r3, #107	; 0x6b
 8001ed0:	d106      	bne.n	8001ee0 <displayChar+0x220>
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <displayChar+0x3ac>)
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <displayChar+0x358>)
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	52d1      	strh	r1, [r2, r3]
 8001ede:	e0ea      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='l') {led_dsp[pos] = L; return;}
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b6c      	cmp	r3, #108	; 0x6c
 8001ee6:	d106      	bne.n	8001ef6 <displayChar+0x236>
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	4960      	ldr	r1, [pc, #384]	; (8002070 <displayChar+0x3b0>)
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <displayChar+0x358>)
 8001ef0:	0052      	lsls	r2, r2, #1
 8001ef2:	52d1      	strh	r1, [r2, r3]
 8001ef4:	e0df      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='m') {led_dsp[pos] = M; return;}
 8001ef6:	1dfb      	adds	r3, r7, #7
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b6d      	cmp	r3, #109	; 0x6d
 8001efc:	d106      	bne.n	8001f0c <displayChar+0x24c>
 8001efe:	1dbb      	adds	r3, r7, #6
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	495c      	ldr	r1, [pc, #368]	; (8002074 <displayChar+0x3b4>)
 8001f04:	4b44      	ldr	r3, [pc, #272]	; (8002018 <displayChar+0x358>)
 8001f06:	0052      	lsls	r2, r2, #1
 8001f08:	52d1      	strh	r1, [r2, r3]
 8001f0a:	e0d4      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='n') {led_dsp[pos] = N; return;}
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b6e      	cmp	r3, #110	; 0x6e
 8001f12:	d106      	bne.n	8001f22 <displayChar+0x262>
 8001f14:	1dbb      	adds	r3, r7, #6
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4957      	ldr	r1, [pc, #348]	; (8002078 <displayChar+0x3b8>)
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <displayChar+0x358>)
 8001f1c:	0052      	lsls	r2, r2, #1
 8001f1e:	52d1      	strh	r1, [r2, r3]
 8001f20:	e0c9      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='o') {led_dsp[pos] = O; return;}
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b6f      	cmp	r3, #111	; 0x6f
 8001f28:	d106      	bne.n	8001f38 <displayChar+0x278>
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	4939      	ldr	r1, [pc, #228]	; (8002014 <displayChar+0x354>)
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <displayChar+0x358>)
 8001f32:	0052      	lsls	r2, r2, #1
 8001f34:	52d1      	strh	r1, [r2, r3]
 8001f36:	e0be      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='p') {led_dsp[pos] = P; return;}
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b70      	cmp	r3, #112	; 0x70
 8001f3e:	d106      	bne.n	8001f4e <displayChar+0x28e>
 8001f40:	1dbb      	adds	r3, r7, #6
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	494d      	ldr	r1, [pc, #308]	; (800207c <displayChar+0x3bc>)
 8001f46:	4b34      	ldr	r3, [pc, #208]	; (8002018 <displayChar+0x358>)
 8001f48:	0052      	lsls	r2, r2, #1
 8001f4a:	52d1      	strh	r1, [r2, r3]
 8001f4c:	e0b3      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='q') {led_dsp[pos] = Q; return;}
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b71      	cmp	r3, #113	; 0x71
 8001f54:	d106      	bne.n	8001f64 <displayChar+0x2a4>
 8001f56:	1dbb      	adds	r3, r7, #6
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4949      	ldr	r1, [pc, #292]	; (8002080 <displayChar+0x3c0>)
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <displayChar+0x358>)
 8001f5e:	0052      	lsls	r2, r2, #1
 8001f60:	52d1      	strh	r1, [r2, r3]
 8001f62:	e0a8      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='r') {led_dsp[pos] = R; return;}
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b72      	cmp	r3, #114	; 0x72
 8001f6a:	d106      	bne.n	8001f7a <displayChar+0x2ba>
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4944      	ldr	r1, [pc, #272]	; (8002084 <displayChar+0x3c4>)
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <displayChar+0x358>)
 8001f74:	0052      	lsls	r2, r2, #1
 8001f76:	52d1      	strh	r1, [r2, r3]
 8001f78:	e09d      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='s') {led_dsp[pos] = S; return;}
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b73      	cmp	r3, #115	; 0x73
 8001f80:	d106      	bne.n	8001f90 <displayChar+0x2d0>
 8001f82:	1dbb      	adds	r3, r7, #6
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	4929      	ldr	r1, [pc, #164]	; (800202c <displayChar+0x36c>)
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <displayChar+0x358>)
 8001f8a:	0052      	lsls	r2, r2, #1
 8001f8c:	52d1      	strh	r1, [r2, r3]
 8001f8e:	e092      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='t') {led_dsp[pos] = T; return;}
 8001f90:	1dfb      	adds	r3, r7, #7
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b74      	cmp	r3, #116	; 0x74
 8001f96:	d106      	bne.n	8001fa6 <displayChar+0x2e6>
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	493a      	ldr	r1, [pc, #232]	; (8002088 <displayChar+0x3c8>)
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <displayChar+0x358>)
 8001fa0:	0052      	lsls	r2, r2, #1
 8001fa2:	52d1      	strh	r1, [r2, r3]
 8001fa4:	e087      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='u') {led_dsp[pos] = U; return;}
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b75      	cmp	r3, #117	; 0x75
 8001fac:	d106      	bne.n	8001fbc <displayChar+0x2fc>
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	4936      	ldr	r1, [pc, #216]	; (800208c <displayChar+0x3cc>)
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <displayChar+0x358>)
 8001fb6:	0052      	lsls	r2, r2, #1
 8001fb8:	52d1      	strh	r1, [r2, r3]
 8001fba:	e07c      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='w') {led_dsp[pos] = W; return;}
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b77      	cmp	r3, #119	; 0x77
 8001fc2:	d106      	bne.n	8001fd2 <displayChar+0x312>
 8001fc4:	1dbb      	adds	r3, r7, #6
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4931      	ldr	r1, [pc, #196]	; (8002090 <displayChar+0x3d0>)
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <displayChar+0x358>)
 8001fcc:	0052      	lsls	r2, r2, #1
 8001fce:	52d1      	strh	r1, [r2, r3]
 8001fd0:	e071      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='v') {led_dsp[pos] = V; return;}
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b76      	cmp	r3, #118	; 0x76
 8001fd8:	d106      	bne.n	8001fe8 <displayChar+0x328>
 8001fda:	1dbb      	adds	r3, r7, #6
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	492d      	ldr	r1, [pc, #180]	; (8002094 <displayChar+0x3d4>)
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <displayChar+0x358>)
 8001fe2:	0052      	lsls	r2, r2, #1
 8001fe4:	52d1      	strh	r1, [r2, r3]
 8001fe6:	e066      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='x') {led_dsp[pos] = X; return;}
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b78      	cmp	r3, #120	; 0x78
 8001fee:	d106      	bne.n	8001ffe <displayChar+0x33e>
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4928      	ldr	r1, [pc, #160]	; (8002098 <displayChar+0x3d8>)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <displayChar+0x358>)
 8001ff8:	0052      	lsls	r2, r2, #1
 8001ffa:	52d1      	strh	r1, [r2, r3]
 8001ffc:	e05b      	b.n	80020b6 <displayChar+0x3f6>
		if (c=='y') {led_dsp[pos] = Y; return;}
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b79      	cmp	r3, #121	; 0x79
 8002004:	d14c      	bne.n	80020a0 <displayChar+0x3e0>
 8002006:	1dbb      	adds	r3, r7, #6
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	4924      	ldr	r1, [pc, #144]	; (800209c <displayChar+0x3dc>)
 800200c:	4b02      	ldr	r3, [pc, #8]	; (8002018 <displayChar+0x358>)
 800200e:	0052      	lsls	r2, r2, #1
 8002010:	52d1      	strh	r1, [r2, r3]
 8002012:	e050      	b.n	80020b6 <displayChar+0x3f6>
 8002014:	00007fc0 	.word	0x00007fc0
 8002018:	2000004c 	.word	0x2000004c
 800201c:	00007ff9 	.word	0x00007ff9
 8002020:	00006ee4 	.word	0x00006ee4
 8002024:	00006ef0 	.word	0x00006ef0
 8002028:	00006ed9 	.word	0x00006ed9
 800202c:	00006ed2 	.word	0x00006ed2
 8002030:	00006ec2 	.word	0x00006ec2
 8002034:	00007ff8 	.word	0x00007ff8
 8002038:	00006ec0 	.word	0x00006ec0
 800203c:	00006ed0 	.word	0x00006ed0
 8002040:	00007fff 	.word	0x00007fff
 8002044:	00006ec8 	.word	0x00006ec8
 8002048:	00007ab0 	.word	0x00007ab0
 800204c:	00007fc6 	.word	0x00007fc6
 8002050:	00007bb0 	.word	0x00007bb0
 8002054:	00006ec6 	.word	0x00006ec6
 8002058:	00006ece 	.word	0x00006ece
 800205c:	00007ec2 	.word	0x00007ec2
 8002060:	00006ec9 	.word	0x00006ec9
 8002064:	00007bbf 	.word	0x00007bbf
 8002068:	00007fe1 	.word	0x00007fe1
 800206c:	00006d4f 	.word	0x00006d4f
 8002070:	00007fc7 	.word	0x00007fc7
 8002074:	00003f49 	.word	0x00003f49
 8002078:	00003dc9 	.word	0x00003dc9
 800207c:	00006ecc 	.word	0x00006ecc
 8002080:	00007dc0 	.word	0x00007dc0
 8002084:	00006ccc 	.word	0x00006ccc
 8002088:	00007bbe 	.word	0x00007bbe
 800208c:	00007fc1 	.word	0x00007fc1
 8002090:	000075c9 	.word	0x000075c9
 8002094:	0000774f 	.word	0x0000774f
 8002098:	0000357f 	.word	0x0000357f
 800209c:	00003b7f 	.word	0x00003b7f
		if (c=='z') {led_dsp[pos] = Z; return;}
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b7a      	cmp	r3, #122	; 0x7a
 80020a6:	d106      	bne.n	80020b6 <displayChar+0x3f6>
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <displayChar+0x3fc>)
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <displayChar+0x400>)
 80020b0:	0052      	lsls	r2, r2, #1
 80020b2:	52d1      	strh	r1, [r2, r3]
 80020b4:	46c0      	nop			; (mov r8, r8)
	}
}
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	0000f776 	.word	0x0000f776
 80020c0:	2000004c 	.word	0x2000004c

080020c4 <setDigit>:


void setDigit(uint8_t digit) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	0002      	movs	r2, r0
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	701a      	strb	r2, [r3, #0]
	switch(digit) {
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d900      	bls.n	80020da <setDigit+0x16>
 80020d8:	e07c      	b.n	80021d4 <setDigit+0x110>
 80020da:	009a      	lsls	r2, r3, #2
 80020dc:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <setDigit+0x118>)
 80020de:	18d3      	adds	r3, r2, r3
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	469f      	mov	pc, r3
		case 0:
			D0_SET;
 80020e4:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <setDigit+0x11c>)
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	03d2      	lsls	r2, r2, #15
 80020ea:	619a      	str	r2, [r3, #24]
			D1_CLR;
 80020ec:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <setDigit+0x11c>)
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	619a      	str	r2, [r3, #24]
			D2_CLR;
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <setDigit+0x120>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	619a      	str	r2, [r3, #24]
			D3_CLR;
 80020f8:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <setDigit+0x120>)
 80020fa:	2202      	movs	r2, #2
 80020fc:	619a      	str	r2, [r3, #24]
			D4_CLR;
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <setDigit+0x120>)
 8002100:	2204      	movs	r2, #4
 8002102:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8002104:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <setDigit+0x120>)
 8002106:	2208      	movs	r2, #8
 8002108:	619a      	str	r2, [r3, #24]
			break;
 800210a:	e063      	b.n	80021d4 <setDigit+0x110>
		case 1:
			D0_CLR;
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <setDigit+0x11c>)
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	619a      	str	r2, [r3, #24]
			D1_SET;
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <setDigit+0x11c>)
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	0412      	lsls	r2, r2, #16
 8002118:	619a      	str	r2, [r3, #24]
			D2_CLR;
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <setDigit+0x120>)
 800211c:	2201      	movs	r2, #1
 800211e:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <setDigit+0x120>)
 8002122:	2202      	movs	r2, #2
 8002124:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8002126:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <setDigit+0x120>)
 8002128:	2204      	movs	r2, #4
 800212a:	619a      	str	r2, [r3, #24]
			D5_CLR;
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <setDigit+0x120>)
 800212e:	2208      	movs	r2, #8
 8002130:	619a      	str	r2, [r3, #24]
			break;
 8002132:	e04f      	b.n	80021d4 <setDigit+0x110>
		case 2:
			D0_CLR;
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <setDigit+0x11c>)
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	619a      	str	r2, [r3, #24]
			D1_CLR;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <setDigit+0x11c>)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	619a      	str	r2, [r3, #24]
			D2_SET;
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <setDigit+0x120>)
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0252      	lsls	r2, r2, #9
 8002146:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <setDigit+0x120>)
 800214a:	2202      	movs	r2, #2
 800214c:	619a      	str	r2, [r3, #24]
			D4_CLR;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <setDigit+0x120>)
 8002150:	2204      	movs	r2, #4
 8002152:	619a      	str	r2, [r3, #24]
			D5_CLR;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <setDigit+0x120>)
 8002156:	2208      	movs	r2, #8
 8002158:	619a      	str	r2, [r3, #24]
			break;
 800215a:	e03b      	b.n	80021d4 <setDigit+0x110>
		case 3:
			D0_CLR;
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <setDigit+0x11c>)
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	619a      	str	r2, [r3, #24]
			D1_CLR;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <setDigit+0x11c>)
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <setDigit+0x120>)
 800216a:	2201      	movs	r2, #1
 800216c:	619a      	str	r2, [r3, #24]
			D3_SET;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <setDigit+0x120>)
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	0292      	lsls	r2, r2, #10
 8002174:	619a      	str	r2, [r3, #24]
			D4_CLR;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <setDigit+0x120>)
 8002178:	2204      	movs	r2, #4
 800217a:	619a      	str	r2, [r3, #24]
			D5_CLR;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <setDigit+0x120>)
 800217e:	2208      	movs	r2, #8
 8002180:	619a      	str	r2, [r3, #24]
			break;
 8002182:	e027      	b.n	80021d4 <setDigit+0x110>
		case 4:
			D0_CLR;
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <setDigit+0x11c>)
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	619a      	str	r2, [r3, #24]
			D1_CLR;
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <setDigit+0x11c>)
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	619a      	str	r2, [r3, #24]
			D2_CLR;
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <setDigit+0x120>)
 8002192:	2201      	movs	r2, #1
 8002194:	619a      	str	r2, [r3, #24]
			D3_CLR;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <setDigit+0x120>)
 8002198:	2202      	movs	r2, #2
 800219a:	619a      	str	r2, [r3, #24]
			D4_SET;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <setDigit+0x120>)
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	02d2      	lsls	r2, r2, #11
 80021a2:	619a      	str	r2, [r3, #24]
			D5_CLR;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <setDigit+0x120>)
 80021a6:	2208      	movs	r2, #8
 80021a8:	619a      	str	r2, [r3, #24]
			break;
 80021aa:	e013      	b.n	80021d4 <setDigit+0x110>
		case 5:
			D0_CLR;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <setDigit+0x11c>)
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	619a      	str	r2, [r3, #24]
			D1_CLR;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <setDigit+0x11c>)
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	619a      	str	r2, [r3, #24]
			D2_CLR;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <setDigit+0x120>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	619a      	str	r2, [r3, #24]
			D3_CLR;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <setDigit+0x120>)
 80021c0:	2202      	movs	r2, #2
 80021c2:	619a      	str	r2, [r3, #24]
			D4_CLR;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <setDigit+0x120>)
 80021c6:	2204      	movs	r2, #4
 80021c8:	619a      	str	r2, [r3, #24]
			D5_SET;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <setDigit+0x120>)
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0312      	lsls	r2, r2, #12
 80021d0:	619a      	str	r2, [r3, #24]
			break;
 80021d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	080033d4 	.word	0x080033d4
 80021e0:	50000800 	.word	0x50000800
 80021e4:	50000c00 	.word	0x50000c00

080021e8 <LEDClr>:

void LEDClr(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	displayChar(' ', 0);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2020      	movs	r0, #32
 80021f0:	f7ff fd66 	bl	8001cc0 <displayChar>
	displayChar(' ', 1);
 80021f4:	2101      	movs	r1, #1
 80021f6:	2020      	movs	r0, #32
 80021f8:	f7ff fd62 	bl	8001cc0 <displayChar>
	displayChar(' ', 2);
 80021fc:	2102      	movs	r1, #2
 80021fe:	2020      	movs	r0, #32
 8002200:	f7ff fd5e 	bl	8001cc0 <displayChar>
	displayChar(' ', 3);
 8002204:	2103      	movs	r1, #3
 8002206:	2020      	movs	r0, #32
 8002208:	f7ff fd5a 	bl	8001cc0 <displayChar>
	displayChar(' ', 4);
 800220c:	2104      	movs	r1, #4
 800220e:	2020      	movs	r0, #32
 8002210:	f7ff fd56 	bl	8001cc0 <displayChar>
	displayChar(' ', 5);
 8002214:	2105      	movs	r1, #5
 8002216:	2020      	movs	r0, #32
 8002218:	f7ff fd52 	bl	8001cc0 <displayChar>
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <TIM15_IRQHandler>:

// LED display multiplexing
__attribute__((interrupt)) void TIM15_IRQHandler(void)	{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	if (TIM15->SR & TIM_SR_CC1IF)	{
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <TIM15_IRQHandler+0xc0>)
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d054      	beq.n	80022dc <TIM15_IRQHandler+0xb8>
		TIM15->SR &= ~TIM_SR_CC1IF;	// Clear flag
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <TIM15_IRQHandler+0xc0>)
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <TIM15_IRQHandler+0xc0>)
 8002238:	2102      	movs	r1, #2
 800223a:	438a      	bics	r2, r1
 800223c:	611a      	str	r2, [r3, #16]
			static uint8_t pos = 0;
			if (pos>5) pos = 0;
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d902      	bls.n	800224c <TIM15_IRQHandler+0x28>
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
			if (dot_enable[pos] == 1) led_dsp[pos] -= 8192;		// Subtract (ENABLE) the bit value responsible for DOT display (note: active low)
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	001a      	movs	r2, r3
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <TIM15_IRQHandler+0xc8>)
 8002254:	5c9b      	ldrb	r3, [r3, r2]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10f      	bne.n	800227c <TIM15_IRQHandler+0x58>
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	001a      	movs	r2, r3
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <TIM15_IRQHandler+0xcc>)
 8002264:	0052      	lsls	r2, r2, #1
 8002266:	5ad3      	ldrh	r3, [r2, r3]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	4921      	ldr	r1, [pc, #132]	; (80022f4 <TIM15_IRQHandler+0xd0>)
 8002270:	468c      	mov	ip, r1
 8002272:	4463      	add	r3, ip
 8002274:	b299      	uxth	r1, r3
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <TIM15_IRQHandler+0xcc>)
 8002278:	0052      	lsls	r2, r2, #1
 800227a:	52d1      	strh	r1, [r2, r3]
			GPIOB->ODR = ((0x7FFF) & led_dsp[pos]);		// 0x7FFF masks the button value on PB15
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	001a      	movs	r2, r3
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <TIM15_IRQHandler+0xcc>)
 8002284:	0052      	lsls	r2, r2, #1
 8002286:	5ad3      	ldrh	r3, [r2, r3]
 8002288:	b29b      	uxth	r3, r3
 800228a:	001a      	movs	r2, r3
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <TIM15_IRQHandler+0xd4>)
 800228e:	0452      	lsls	r2, r2, #17
 8002290:	0c52      	lsrs	r2, r2, #17
 8002292:	615a      	str	r2, [r3, #20]
			if (dot_enable[pos] == 1) led_dsp[pos] += 8192;		// Add (DISABLE) the bit value responsible for DOT display (note: active low)
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <TIM15_IRQHandler+0xc8>)
 800229c:	5c9b      	ldrb	r3, [r3, r2]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d110      	bne.n	80022c6 <TIM15_IRQHandler+0xa2>
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <TIM15_IRQHandler+0xcc>)
 80022ac:	0052      	lsls	r2, r2, #1
 80022ae:	5ad3      	ldrh	r3, [r2, r3]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0189      	lsls	r1, r1, #6
 80022ba:	468c      	mov	ip, r1
 80022bc:	4463      	add	r3, ip
 80022be:	b299      	uxth	r1, r3
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <TIM15_IRQHandler+0xcc>)
 80022c2:	0052      	lsls	r2, r2, #1
 80022c4:	52d1      	strh	r1, [r2, r3]
			setDigit(pos);
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff fefa 	bl	80020c4 <setDigit>
			pos++;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <TIM15_IRQHandler+0xc4>)
 80022da:	701a      	strb	r2, [r3, #0]

	}
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	40014000 	.word	0x40014000
 80022e8:	2000004a 	.word	0x2000004a
 80022ec:	20000044 	.word	0x20000044
 80022f0:	2000004c 	.word	0x2000004c
 80022f4:	ffffe000 	.word	0xffffe000
 80022f8:	50000400 	.word	0x50000400

080022fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <SystemInit+0x14>)
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	0512      	lsls	r2, r2, #20
 8002306:	609a      	str	r2, [r3, #8]
#endif
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <FillLEDNumber>:
volatile uint8_t brg_div = 18;

volatile uint16_t ADC_result;	// ADC result for the DEBUG purpose

// This function updates LED data array (first argument) with a number "nbr" on a given position 0 <= "pos" <= 3
void FillLEDNumber(volatile uint8_t * array, uint8_t pos, uint8_t nbr, uint8_t red, uint8_t green, uint8_t blue) {
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	46c6      	mov	lr, r8
 8002318:	b500      	push	{lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	000c      	movs	r4, r1
 8002322:	0010      	movs	r0, r2
 8002324:	0019      	movs	r1, r3
 8002326:	1cfb      	adds	r3, r7, #3
 8002328:	1c22      	adds	r2, r4, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	1cbb      	adds	r3, r7, #2
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	1c7b      	adds	r3, r7, #1
 8002334:	1c0a      	adds	r2, r1, #0
 8002336:	701a      	strb	r2, [r3, #0]

	uint8_t shift;

	if (pos>1) shift = ((pos*13)+2);
 8002338:	1cfb      	adds	r3, r7, #3
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d90c      	bls.n	800235a <FillLEDNumber+0x46>
 8002340:	1cfb      	adds	r3, r7, #3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	1c1a      	adds	r2, r3, #0
 8002346:	1892      	adds	r2, r2, r2
 8002348:	18d2      	adds	r2, r2, r3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	18d3      	adds	r3, r2, r3
 800234e:	b2da      	uxtb	r2, r3
 8002350:	230f      	movs	r3, #15
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	3202      	adds	r2, #2
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e009      	b.n	800236e <FillLEDNumber+0x5a>
	else shift = (pos*13);
 800235a:	230f      	movs	r3, #15
 800235c:	18f9      	adds	r1, r7, r3
 800235e:	1cfb      	adds	r3, r7, #3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	1c1a      	adds	r2, r3, #0
 8002364:	1892      	adds	r2, r2, r2
 8002366:	18d2      	adds	r2, r2, r3
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	700b      	strb	r3, [r1, #0]

	switch(nbr) {
 800236e:	1cbb      	adds	r3, r7, #2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b09      	cmp	r3, #9
 8002374:	d900      	bls.n	8002378 <FillLEDNumber+0x64>
 8002376:	e230      	b.n	80027da <FillLEDNumber+0x4c6>
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	4bed      	ldr	r3, [pc, #948]	; (8002730 <FillLEDNumber+0x41c>)
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	469f      	mov	pc, r3
		case 0:
			FillLEDSegment(array, (0+shift), (11+shift), red, green, blue);
 8002382:	210f      	movs	r1, #15
 8002384:	187b      	adds	r3, r7, r1
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	330b      	adds	r3, #11
 800238a:	b2da      	uxtb	r2, r3
 800238c:	1c7b      	adds	r3, r7, #1
 800238e:	781c      	ldrb	r4, [r3, #0]
 8002390:	187b      	adds	r3, r7, r1
 8002392:	7819      	ldrb	r1, [r3, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	2324      	movs	r3, #36	; 0x24
 8002398:	2508      	movs	r5, #8
 800239a:	46ac      	mov	ip, r5
 800239c:	44bc      	add	ip, r7
 800239e:	4463      	add	r3, ip
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2320      	movs	r3, #32
 80023a6:	2508      	movs	r5, #8
 80023a8:	46ac      	mov	ip, r5
 80023aa:	44bc      	add	ip, r7
 80023ac:	4463      	add	r3, ip
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	0023      	movs	r3, r4
 80023b4:	f000 fa86 	bl	80028c4 <FillLEDSegment>
			break;
 80023b8:	e210      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 1:
			FillLEDSegment(array, (2+shift), (6+shift), red, green, blue);
 80023ba:	220f      	movs	r2, #15
 80023bc:	18bb      	adds	r3, r7, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3302      	adds	r3, #2
 80023c2:	b2d9      	uxtb	r1, r3
 80023c4:	18bb      	adds	r3, r7, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3306      	adds	r3, #6
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	1c7b      	adds	r3, r7, #1
 80023ce:	781c      	ldrb	r4, [r3, #0]
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	2324      	movs	r3, #36	; 0x24
 80023d4:	2508      	movs	r5, #8
 80023d6:	46ac      	mov	ip, r5
 80023d8:	44bc      	add	ip, r7
 80023da:	4463      	add	r3, ip
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2320      	movs	r3, #32
 80023e2:	2508      	movs	r5, #8
 80023e4:	46ac      	mov	ip, r5
 80023e6:	44bc      	add	ip, r7
 80023e8:	4463      	add	r3, ip
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	0023      	movs	r3, r4
 80023f0:	f000 fa68 	bl	80028c4 <FillLEDSegment>
			break;
 80023f4:	e1f2      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 2:
			FillLEDSegment(array, (0+shift), (4+shift), red, green, blue);
 80023f6:	250f      	movs	r5, #15
 80023f8:	197b      	adds	r3, r7, r5
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	3304      	adds	r3, #4
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4698      	mov	r8, r3
 8002402:	1c7b      	adds	r3, r7, #1
 8002404:	781c      	ldrb	r4, [r3, #0]
 8002406:	197b      	adds	r3, r7, r5
 8002408:	7819      	ldrb	r1, [r3, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	2624      	movs	r6, #36	; 0x24
 800240e:	2308      	movs	r3, #8
 8002410:	18fa      	adds	r2, r7, r3
 8002412:	1993      	adds	r3, r2, r6
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	2320      	movs	r3, #32
 800241a:	2208      	movs	r2, #8
 800241c:	4694      	mov	ip, r2
 800241e:	44bc      	add	ip, r7
 8002420:	4463      	add	r3, ip
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	0023      	movs	r3, r4
 8002428:	4642      	mov	r2, r8
 800242a:	f000 fa4b 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (6+shift), (10+shift), red, green, blue);
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3306      	adds	r3, #6
 8002434:	b2d9      	uxtb	r1, r3
 8002436:	197b      	adds	r3, r7, r5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	330a      	adds	r3, #10
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4698      	mov	r8, r3
 8002440:	1c7b      	adds	r3, r7, #1
 8002442:	781c      	ldrb	r4, [r3, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	2308      	movs	r3, #8
 8002448:	18fa      	adds	r2, r7, r3
 800244a:	1993      	adds	r3, r2, r6
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	2320      	movs	r3, #32
 8002452:	2208      	movs	r2, #8
 8002454:	4694      	mov	ip, r2
 8002456:	44bc      	add	ip, r7
 8002458:	4463      	add	r3, ip
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	0023      	movs	r3, r4
 8002460:	4642      	mov	r2, r8
 8002462:	f000 fa2f 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (12+shift), (12+shift), red, green, blue);
 8002466:	197b      	adds	r3, r7, r5
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	b2d9      	uxtb	r1, r3
 800246e:	197b      	adds	r3, r7, r5
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	b2da      	uxtb	r2, r3
 8002476:	1c7b      	adds	r3, r7, #1
 8002478:	781c      	ldrb	r4, [r3, #0]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	2308      	movs	r3, #8
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	199b      	adds	r3, r3, r6
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2320      	movs	r3, #32
 8002488:	2508      	movs	r5, #8
 800248a:	46ac      	mov	ip, r5
 800248c:	44bc      	add	ip, r7
 800248e:	4463      	add	r3, ip
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	0023      	movs	r3, r4
 8002496:	f000 fa15 	bl	80028c4 <FillLEDSegment>
			break;
 800249a:	e19f      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 3:
			FillLEDSegment(array, (0+shift), (8+shift), red, green, blue);
 800249c:	250f      	movs	r5, #15
 800249e:	197b      	adds	r3, r7, r5
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3308      	adds	r3, #8
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	4698      	mov	r8, r3
 80024a8:	1c7b      	adds	r3, r7, #1
 80024aa:	781c      	ldrb	r4, [r3, #0]
 80024ac:	197b      	adds	r3, r7, r5
 80024ae:	7819      	ldrb	r1, [r3, #0]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	2624      	movs	r6, #36	; 0x24
 80024b4:	2308      	movs	r3, #8
 80024b6:	18fa      	adds	r2, r7, r3
 80024b8:	1993      	adds	r3, r2, r6
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	2320      	movs	r3, #32
 80024c0:	2208      	movs	r2, #8
 80024c2:	4694      	mov	ip, r2
 80024c4:	44bc      	add	ip, r7
 80024c6:	4463      	add	r3, ip
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	0023      	movs	r3, r4
 80024ce:	4642      	mov	r2, r8
 80024d0:	f000 f9f8 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (10+shift), red, green, blue);
 80024d4:	197b      	adds	r3, r7, r5
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	330a      	adds	r3, #10
 80024da:	b2d9      	uxtb	r1, r3
 80024dc:	197b      	adds	r3, r7, r5
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	330a      	adds	r3, #10
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4698      	mov	r8, r3
 80024e6:	1c7b      	adds	r3, r7, #1
 80024e8:	781c      	ldrb	r4, [r3, #0]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	2308      	movs	r3, #8
 80024ee:	18fa      	adds	r2, r7, r3
 80024f0:	1993      	adds	r3, r2, r6
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2320      	movs	r3, #32
 80024f8:	2208      	movs	r2, #8
 80024fa:	4694      	mov	ip, r2
 80024fc:	44bc      	add	ip, r7
 80024fe:	4463      	add	r3, ip
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	0023      	movs	r3, r4
 8002506:	4642      	mov	r2, r8
 8002508:	f000 f9dc 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (12+shift), (12+shift), red, green, blue);
 800250c:	197b      	adds	r3, r7, r5
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	b2d9      	uxtb	r1, r3
 8002514:	197b      	adds	r3, r7, r5
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	b2da      	uxtb	r2, r3
 800251c:	1c7b      	adds	r3, r7, #1
 800251e:	781c      	ldrb	r4, [r3, #0]
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	2308      	movs	r3, #8
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	199b      	adds	r3, r3, r6
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2320      	movs	r3, #32
 800252e:	2508      	movs	r5, #8
 8002530:	46ac      	mov	ip, r5
 8002532:	44bc      	add	ip, r7
 8002534:	4463      	add	r3, ip
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	0023      	movs	r3, r4
 800253c:	f000 f9c2 	bl	80028c4 <FillLEDSegment>
			break;
 8002540:	e14c      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 4:
			FillLEDSegment(array, (0+shift), (0+shift), red, green, blue);
 8002542:	1c7b      	adds	r3, r7, #1
 8002544:	781c      	ldrb	r4, [r3, #0]
 8002546:	250f      	movs	r5, #15
 8002548:	197b      	adds	r3, r7, r5
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4698      	mov	r8, r3
 800254e:	197b      	adds	r3, r7, r5
 8002550:	7819      	ldrb	r1, [r3, #0]
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	2624      	movs	r6, #36	; 0x24
 8002556:	2308      	movs	r3, #8
 8002558:	18fa      	adds	r2, r7, r3
 800255a:	1993      	adds	r3, r2, r6
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2320      	movs	r3, #32
 8002562:	2208      	movs	r2, #8
 8002564:	4694      	mov	ip, r2
 8002566:	44bc      	add	ip, r7
 8002568:	4463      	add	r3, ip
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	0023      	movs	r3, r4
 8002570:	4642      	mov	r2, r8
 8002572:	f000 f9a7 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (2+shift), (6+shift), red, green, blue);
 8002576:	197b      	adds	r3, r7, r5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3302      	adds	r3, #2
 800257c:	b2d9      	uxtb	r1, r3
 800257e:	197b      	adds	r3, r7, r5
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3306      	adds	r3, #6
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4698      	mov	r8, r3
 8002588:	1c7b      	adds	r3, r7, #1
 800258a:	781c      	ldrb	r4, [r3, #0]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	2308      	movs	r3, #8
 8002590:	18fa      	adds	r2, r7, r3
 8002592:	1993      	adds	r3, r2, r6
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	2320      	movs	r3, #32
 800259a:	2208      	movs	r2, #8
 800259c:	4694      	mov	ip, r2
 800259e:	44bc      	add	ip, r7
 80025a0:	4463      	add	r3, ip
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	0023      	movs	r3, r4
 80025a8:	4642      	mov	r2, r8
 80025aa:	f000 f98b 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (12+shift), red, green, blue);
 80025ae:	197b      	adds	r3, r7, r5
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	330a      	adds	r3, #10
 80025b4:	b2d9      	uxtb	r1, r3
 80025b6:	197b      	adds	r3, r7, r5
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	1c7b      	adds	r3, r7, #1
 80025c0:	781c      	ldrb	r4, [r3, #0]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	2308      	movs	r3, #8
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	199b      	adds	r3, r3, r6
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2320      	movs	r3, #32
 80025d0:	2508      	movs	r5, #8
 80025d2:	46ac      	mov	ip, r5
 80025d4:	44bc      	add	ip, r7
 80025d6:	4463      	add	r3, ip
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	0023      	movs	r3, r4
 80025de:	f000 f971 	bl	80028c4 <FillLEDSegment>
			break;
 80025e2:	e0fb      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 5:
			FillLEDSegment(array, (0+shift), (2+shift), red, green, blue);
 80025e4:	250f      	movs	r5, #15
 80025e6:	197b      	adds	r3, r7, r5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3302      	adds	r3, #2
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4698      	mov	r8, r3
 80025f0:	1c7b      	adds	r3, r7, #1
 80025f2:	781c      	ldrb	r4, [r3, #0]
 80025f4:	197b      	adds	r3, r7, r5
 80025f6:	7819      	ldrb	r1, [r3, #0]
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	2624      	movs	r6, #36	; 0x24
 80025fc:	2308      	movs	r3, #8
 80025fe:	18fa      	adds	r2, r7, r3
 8002600:	1993      	adds	r3, r2, r6
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2320      	movs	r3, #32
 8002608:	2208      	movs	r2, #8
 800260a:	4694      	mov	ip, r2
 800260c:	44bc      	add	ip, r7
 800260e:	4463      	add	r3, ip
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	0023      	movs	r3, r4
 8002616:	4642      	mov	r2, r8
 8002618:	f000 f954 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (4+shift), (8+shift), red, green, blue);
 800261c:	197b      	adds	r3, r7, r5
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	3304      	adds	r3, #4
 8002622:	b2d9      	uxtb	r1, r3
 8002624:	197b      	adds	r3, r7, r5
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	3308      	adds	r3, #8
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4698      	mov	r8, r3
 800262e:	1c7b      	adds	r3, r7, #1
 8002630:	781c      	ldrb	r4, [r3, #0]
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	2308      	movs	r3, #8
 8002636:	18fa      	adds	r2, r7, r3
 8002638:	1993      	adds	r3, r2, r6
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2320      	movs	r3, #32
 8002640:	2208      	movs	r2, #8
 8002642:	4694      	mov	ip, r2
 8002644:	44bc      	add	ip, r7
 8002646:	4463      	add	r3, ip
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	0023      	movs	r3, r4
 800264e:	4642      	mov	r2, r8
 8002650:	f000 f938 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (12+shift), red, green, blue);
 8002654:	197b      	adds	r3, r7, r5
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	330a      	adds	r3, #10
 800265a:	b2d9      	uxtb	r1, r3
 800265c:	197b      	adds	r3, r7, r5
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	b2da      	uxtb	r2, r3
 8002664:	1c7b      	adds	r3, r7, #1
 8002666:	781c      	ldrb	r4, [r3, #0]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	2308      	movs	r3, #8
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	199b      	adds	r3, r3, r6
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	2320      	movs	r3, #32
 8002676:	2508      	movs	r5, #8
 8002678:	46ac      	mov	ip, r5
 800267a:	44bc      	add	ip, r7
 800267c:	4463      	add	r3, ip
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	0023      	movs	r3, r4
 8002684:	f000 f91e 	bl	80028c4 <FillLEDSegment>
			break;
 8002688:	e0a8      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 6:
			FillLEDSegment(array, (0+shift), (2+shift), red, green, blue);
 800268a:	250f      	movs	r5, #15
 800268c:	197b      	adds	r3, r7, r5
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	3302      	adds	r3, #2
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4698      	mov	r8, r3
 8002696:	1c7b      	adds	r3, r7, #1
 8002698:	781c      	ldrb	r4, [r3, #0]
 800269a:	197b      	adds	r3, r7, r5
 800269c:	7819      	ldrb	r1, [r3, #0]
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	2624      	movs	r6, #36	; 0x24
 80026a2:	2308      	movs	r3, #8
 80026a4:	18fa      	adds	r2, r7, r3
 80026a6:	1993      	adds	r3, r2, r6
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2320      	movs	r3, #32
 80026ae:	2208      	movs	r2, #8
 80026b0:	4694      	mov	ip, r2
 80026b2:	44bc      	add	ip, r7
 80026b4:	4463      	add	r3, ip
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	0023      	movs	r3, r4
 80026bc:	4642      	mov	r2, r8
 80026be:	f000 f901 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (4+shift), (12+shift), red, green, blue);
 80026c2:	197b      	adds	r3, r7, r5
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3304      	adds	r3, #4
 80026c8:	b2d9      	uxtb	r1, r3
 80026ca:	197b      	adds	r3, r7, r5
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	1c7b      	adds	r3, r7, #1
 80026d4:	781c      	ldrb	r4, [r3, #0]
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	2308      	movs	r3, #8
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	199b      	adds	r3, r3, r6
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2320      	movs	r3, #32
 80026e4:	2508      	movs	r5, #8
 80026e6:	46ac      	mov	ip, r5
 80026e8:	44bc      	add	ip, r7
 80026ea:	4463      	add	r3, ip
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	0023      	movs	r3, r4
 80026f2:	f000 f8e7 	bl	80028c4 <FillLEDSegment>
			break;
 80026f6:	e071      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 7:
			FillLEDSegment(array, (0+shift), (6+shift), red, green, blue);
 80026f8:	210f      	movs	r1, #15
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	3306      	adds	r3, #6
 8002700:	b2da      	uxtb	r2, r3
 8002702:	1c7b      	adds	r3, r7, #1
 8002704:	781c      	ldrb	r4, [r3, #0]
 8002706:	187b      	adds	r3, r7, r1
 8002708:	7819      	ldrb	r1, [r3, #0]
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	2324      	movs	r3, #36	; 0x24
 800270e:	2508      	movs	r5, #8
 8002710:	46ac      	mov	ip, r5
 8002712:	44bc      	add	ip, r7
 8002714:	4463      	add	r3, ip
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2320      	movs	r3, #32
 800271c:	2508      	movs	r5, #8
 800271e:	46ac      	mov	ip, r5
 8002720:	44bc      	add	ip, r7
 8002722:	4463      	add	r3, ip
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	0023      	movs	r3, r4
 800272a:	f000 f8cb 	bl	80028c4 <FillLEDSegment>
			break;
 800272e:	e055      	b.n	80027dc <FillLEDNumber+0x4c8>
 8002730:	080033ec 	.word	0x080033ec
		case 8:
			FillLEDSegment(array, (0+shift), (12+shift), red, green, blue);
 8002734:	210f      	movs	r1, #15
 8002736:	187b      	adds	r3, r7, r1
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	b2da      	uxtb	r2, r3
 800273e:	1c7b      	adds	r3, r7, #1
 8002740:	781c      	ldrb	r4, [r3, #0]
 8002742:	187b      	adds	r3, r7, r1
 8002744:	7819      	ldrb	r1, [r3, #0]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	2324      	movs	r3, #36	; 0x24
 800274a:	2508      	movs	r5, #8
 800274c:	46ac      	mov	ip, r5
 800274e:	44bc      	add	ip, r7
 8002750:	4463      	add	r3, ip
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	2320      	movs	r3, #32
 8002758:	2508      	movs	r5, #8
 800275a:	46ac      	mov	ip, r5
 800275c:	44bc      	add	ip, r7
 800275e:	4463      	add	r3, ip
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	0023      	movs	r3, r4
 8002766:	f000 f8ad 	bl	80028c4 <FillLEDSegment>
			break;
 800276a:	e037      	b.n	80027dc <FillLEDNumber+0x4c8>
		case 9:
			FillLEDSegment(array, (0+shift), (8+shift), red, green, blue);
 800276c:	250f      	movs	r5, #15
 800276e:	197b      	adds	r3, r7, r5
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	3308      	adds	r3, #8
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4698      	mov	r8, r3
 8002778:	1c7b      	adds	r3, r7, #1
 800277a:	781c      	ldrb	r4, [r3, #0]
 800277c:	197b      	adds	r3, r7, r5
 800277e:	7819      	ldrb	r1, [r3, #0]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	2624      	movs	r6, #36	; 0x24
 8002784:	2308      	movs	r3, #8
 8002786:	18fa      	adds	r2, r7, r3
 8002788:	1993      	adds	r3, r2, r6
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2320      	movs	r3, #32
 8002790:	2208      	movs	r2, #8
 8002792:	4694      	mov	ip, r2
 8002794:	44bc      	add	ip, r7
 8002796:	4463      	add	r3, ip
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	0023      	movs	r3, r4
 800279e:	4642      	mov	r2, r8
 80027a0:	f000 f890 	bl	80028c4 <FillLEDSegment>
			FillLEDSegment(array, (10+shift), (12+shift), red, green, blue);
 80027a4:	197b      	adds	r3, r7, r5
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	330a      	adds	r3, #10
 80027aa:	b2d9      	uxtb	r1, r3
 80027ac:	197b      	adds	r3, r7, r5
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	1c7b      	adds	r3, r7, #1
 80027b6:	781c      	ldrb	r4, [r3, #0]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	2308      	movs	r3, #8
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	199b      	adds	r3, r3, r6
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2320      	movs	r3, #32
 80027c6:	2508      	movs	r5, #8
 80027c8:	46ac      	mov	ip, r5
 80027ca:	44bc      	add	ip, r7
 80027cc:	4463      	add	r3, ip
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	0023      	movs	r3, r4
 80027d4:	f000 f876 	bl	80028c4 <FillLEDSegment>
			break;
 80027d8:	e000      	b.n	80027dc <FillLEDNumber+0x4c8>
		default:
			break;
 80027da:	46c0      	nop			; (mov r8, r8)
	}
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bc04      	pop	{r2}
 80027e4:	4690      	mov	r8, r2
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e8 <FillLEDArray>:



// This function updates the entire LED data buffer (first argument)
void FillLEDArray(volatile uint8_t * array, uint8_t red, uint8_t green, uint8_t blue) {		// * array is the array to be entirely filled with LED data
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	000c      	movs	r4, r1
 80027f2:	0010      	movs	r0, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	1cfb      	adds	r3, r7, #3
 80027f8:	1c22      	adds	r2, r4, #0
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	1cbb      	adds	r3, r7, #2
 80027fe:	1c02      	adds	r2, r0, #0
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	1c7b      	adds	r3, r7, #1
 8002804:	1c0a      	adds	r2, r1, #0
 8002806:	701a      	strb	r2, [r3, #0]
	uint16_t a, b, c;
	b=0;
 8002808:	230c      	movs	r3, #12
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
	for (a=0; a<(WS_NUMBER*24); a++) {
 8002810:	230e      	movs	r3, #14
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	e045      	b.n	80028a6 <FillLEDArray+0xbe>
		getBaseLed(green, red, blue);
 800281a:	1c7b      	adds	r3, r7, #1
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	1cfb      	adds	r3, r7, #3
 8002820:	7819      	ldrb	r1, [r3, #0]
 8002822:	1cbb      	adds	r3, r7, #2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f8c2 	bl	80029b0 <getBaseLed>
		c=0;
 800282c:	230a      	movs	r3, #10
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 8002834:	e01a      	b.n	800286c <FillLEDArray+0x84>
			array[a] = b_led[b]; a++; b++;
 8002836:	200c      	movs	r0, #12
 8002838:	183b      	adds	r3, r7, r0
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	240e      	movs	r4, #14
 800283e:	193b      	adds	r3, r7, r4
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	18cb      	adds	r3, r1, r3
 8002846:	491d      	ldr	r1, [pc, #116]	; (80028bc <FillLEDArray+0xd4>)
 8002848:	5c8a      	ldrb	r2, [r1, r2]
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	193b      	adds	r3, r7, r4
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	193b      	adds	r3, r7, r4
 8002852:	3201      	adds	r2, #1
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	183b      	adds	r3, r7, r0
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	183b      	adds	r3, r7, r0
 800285c:	3201      	adds	r2, #1
 800285e:	801a      	strh	r2, [r3, #0]
			c++;
 8002860:	210a      	movs	r1, #10
 8002862:	187b      	adds	r3, r7, r1
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	187b      	adds	r3, r7, r1
 8002868:	3201      	adds	r2, #1
 800286a:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 800286c:	230a      	movs	r3, #10
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b16      	cmp	r3, #22
 8002874:	d9df      	bls.n	8002836 <FillLEDArray+0x4e>
		}
		array[a] = b_led[b]; b++;
 8002876:	200c      	movs	r0, #12
 8002878:	183b      	adds	r3, r7, r0
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	240e      	movs	r4, #14
 800287e:	193b      	adds	r3, r7, r4
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	18cb      	adds	r3, r1, r3
 8002886:	490d      	ldr	r1, [pc, #52]	; (80028bc <FillLEDArray+0xd4>)
 8002888:	5c8a      	ldrb	r2, [r1, r2]
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	183b      	adds	r3, r7, r0
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	183b      	adds	r3, r7, r0
 8002892:	3201      	adds	r2, #1
 8002894:	801a      	strh	r2, [r3, #0]
		b=0;
 8002896:	183b      	adds	r3, r7, r0
 8002898:	2200      	movs	r2, #0
 800289a:	801a      	strh	r2, [r3, #0]
	for (a=0; a<(WS_NUMBER*24); a++) {
 800289c:	193b      	adds	r3, r7, r4
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	3201      	adds	r2, #1
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	230e      	movs	r3, #14
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <FillLEDArray+0xd8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d9b3      	bls.n	800281a <FillLEDArray+0x32>
	}
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b005      	add	sp, #20
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	20000594 	.word	0x20000594
 80028c0:	0000050f 	.word	0x0000050f

080028c4 <FillLEDSegment>:
// This function updates LED data array (first argument) within specified indexes: start_idx and end_idx
void FillLEDSegment(volatile uint8_t * array, uint8_t start_idx, uint8_t end_idx, uint8_t red, uint8_t green, uint8_t blue) {
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	000c      	movs	r4, r1
 80028ce:	0010      	movs	r0, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	1cfb      	adds	r3, r7, #3
 80028d4:	1c22      	adds	r2, r4, #0
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	1cbb      	adds	r3, r7, #2
 80028da:	1c02      	adds	r2, r0, #0
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	1c7b      	adds	r3, r7, #1
 80028e0:	1c0a      	adds	r2, r1, #0
 80028e2:	701a      	strb	r2, [r3, #0]
	uint16_t a, b, c;
	b=0;
 80028e4:	230c      	movs	r3, #12
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	801a      	strh	r2, [r3, #0]
	for (a=(start_idx*24); a<=(end_idx*24); a++) {
 80028ec:	1cfb      	adds	r3, r7, #3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	230e      	movs	r3, #14
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2118      	movs	r1, #24
 80028f8:	434a      	muls	r2, r1
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	e047      	b.n	800298e <FillLEDSegment+0xca>
		getBaseLed(green, red, blue);
 80028fe:	2324      	movs	r3, #36	; 0x24
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	1c7b      	adds	r3, r7, #1
 8002906:	7819      	ldrb	r1, [r3, #0]
 8002908:	2320      	movs	r3, #32
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f84e 	bl	80029b0 <getBaseLed>
		c=0;
 8002914:	230a      	movs	r3, #10
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 800291c:	e01a      	b.n	8002954 <FillLEDSegment+0x90>
			array[a] = b_led[b]; a++; b++;
 800291e:	200c      	movs	r0, #12
 8002920:	183b      	adds	r3, r7, r0
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	240e      	movs	r4, #14
 8002926:	193b      	adds	r3, r7, r4
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	18cb      	adds	r3, r1, r3
 800292e:	491f      	ldr	r1, [pc, #124]	; (80029ac <FillLEDSegment+0xe8>)
 8002930:	5c8a      	ldrb	r2, [r1, r2]
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	193b      	adds	r3, r7, r4
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	193b      	adds	r3, r7, r4
 800293a:	3201      	adds	r2, #1
 800293c:	801a      	strh	r2, [r3, #0]
 800293e:	183b      	adds	r3, r7, r0
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	183b      	adds	r3, r7, r0
 8002944:	3201      	adds	r2, #1
 8002946:	801a      	strh	r2, [r3, #0]
			c++;
 8002948:	210a      	movs	r1, #10
 800294a:	187b      	adds	r3, r7, r1
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	187b      	adds	r3, r7, r1
 8002950:	3201      	adds	r2, #1
 8002952:	801a      	strh	r2, [r3, #0]
		while(c<23) {
 8002954:	230a      	movs	r3, #10
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	2b16      	cmp	r3, #22
 800295c:	d9df      	bls.n	800291e <FillLEDSegment+0x5a>
		}
		array[a] = b_led[b]; 	  b++;
 800295e:	200c      	movs	r0, #12
 8002960:	183b      	adds	r3, r7, r0
 8002962:	881a      	ldrh	r2, [r3, #0]
 8002964:	240e      	movs	r4, #14
 8002966:	193b      	adds	r3, r7, r4
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	18cb      	adds	r3, r1, r3
 800296e:	490f      	ldr	r1, [pc, #60]	; (80029ac <FillLEDSegment+0xe8>)
 8002970:	5c8a      	ldrb	r2, [r1, r2]
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	183b      	adds	r3, r7, r0
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	183b      	adds	r3, r7, r0
 800297a:	3201      	adds	r2, #1
 800297c:	801a      	strh	r2, [r3, #0]
		b=0;
 800297e:	183b      	adds	r3, r7, r0
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
	for (a=(start_idx*24); a<=(end_idx*24); a++) {
 8002984:	193b      	adds	r3, r7, r4
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	193b      	adds	r3, r7, r4
 800298a:	3201      	adds	r2, #1
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	230e      	movs	r3, #14
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	8819      	ldrh	r1, [r3, #0]
 8002994:	1cbb      	adds	r3, r7, #2
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	0013      	movs	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	189b      	adds	r3, r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4299      	cmp	r1, r3
 80029a2:	ddac      	ble.n	80028fe <FillLEDSegment+0x3a>
	}
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b005      	add	sp, #20
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	20000594 	.word	0x20000594

080029b0 <getBaseLed>:

// This function updates b_led[24] array
void getBaseLed(uint8_t green, uint8_t red, uint8_t blue) {		// *bld is the array to be updated
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	0004      	movs	r4, r0
 80029b8:	0008      	movs	r0, r1
 80029ba:	0011      	movs	r1, r2
 80029bc:	1dfb      	adds	r3, r7, #7
 80029be:	1c22      	adds	r2, r4, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	1dbb      	adds	r3, r7, #6
 80029c4:	1c02      	adds	r2, r0, #0
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	1d7b      	adds	r3, r7, #5
 80029ca:	1c0a      	adds	r2, r1, #0
 80029cc:	701a      	strb	r2, [r3, #0]
	uint8_t k, i;

	getBaseColour(green);
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f878 	bl	8002ac8 <getBaseColour>
	i=7;
 80029d8:	230e      	movs	r3, #14
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2207      	movs	r2, #7
 80029de:	701a      	strb	r2, [r3, #0]
	for (k=0; k<8; k++) {
 80029e0:	230f      	movs	r3, #15
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e013      	b.n	8002a12 <getBaseLed+0x62>
		b_led[k] = b_colour[i];
 80029ea:	200e      	movs	r0, #14
 80029ec:	183b      	adds	r3, r7, r0
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	240f      	movs	r4, #15
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4932      	ldr	r1, [pc, #200]	; (8002ac0 <getBaseLed+0x110>)
 80029f8:	5c89      	ldrb	r1, [r1, r2]
 80029fa:	4a32      	ldr	r2, [pc, #200]	; (8002ac4 <getBaseLed+0x114>)
 80029fc:	54d1      	strb	r1, [r2, r3]
		i--;
 80029fe:	183b      	adds	r3, r7, r0
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	183b      	adds	r3, r7, r0
 8002a04:	3a01      	subs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
	for (k=0; k<8; k++) {
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	3201      	adds	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	230f      	movs	r3, #15
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b07      	cmp	r3, #7
 8002a1a:	d9e6      	bls.n	80029ea <getBaseLed+0x3a>
	}
	getBaseColour(red);
 8002a1c:	1dbb      	adds	r3, r7, #6
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f851 	bl	8002ac8 <getBaseColour>
	i=7;
 8002a26:	230e      	movs	r3, #14
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	701a      	strb	r2, [r3, #0]
	for (k=8; k<16; k++) {
 8002a2e:	230f      	movs	r3, #15
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e013      	b.n	8002a60 <getBaseLed+0xb0>
		b_led[k] = b_colour[i];
 8002a38:	200e      	movs	r0, #14
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	240f      	movs	r4, #15
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	491e      	ldr	r1, [pc, #120]	; (8002ac0 <getBaseLed+0x110>)
 8002a46:	5c89      	ldrb	r1, [r1, r2]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <getBaseLed+0x114>)
 8002a4a:	54d1      	strb	r1, [r2, r3]
		i--;
 8002a4c:	183b      	adds	r3, r7, r0
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	3a01      	subs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
	for (k=8; k<16; k++) {
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	3201      	adds	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	d9e6      	bls.n	8002a38 <getBaseLed+0x88>
	}
	getBaseColour(blue);
 8002a6a:	1d7b      	adds	r3, r7, #5
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f82a 	bl	8002ac8 <getBaseColour>
	i=7;
 8002a74:	230e      	movs	r3, #14
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2207      	movs	r2, #7
 8002a7a:	701a      	strb	r2, [r3, #0]
	for (k=16; k<24; k++) {
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2210      	movs	r2, #16
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e013      	b.n	8002aae <getBaseLed+0xfe>
		b_led[k] = b_colour[i];
 8002a86:	200e      	movs	r0, #14
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	240f      	movs	r4, #15
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	490b      	ldr	r1, [pc, #44]	; (8002ac0 <getBaseLed+0x110>)
 8002a94:	5c89      	ldrb	r1, [r1, r2]
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <getBaseLed+0x114>)
 8002a98:	54d1      	strb	r1, [r2, r3]
		i--;
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
	for (k=16; k<24; k++) {
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	3201      	adds	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	230f      	movs	r3, #15
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b17      	cmp	r3, #23
 8002ab6:	d9e6      	bls.n	8002a86 <getBaseLed+0xd6>
	}
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b005      	add	sp, #20
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	200005ac 	.word	0x200005ac
 8002ac4:	20000594 	.word	0x20000594

08002ac8 <getBaseColour>:

// This function updates b_colour[8] array (one colour out of three/led)
void getBaseColour(uint8_t col_val) {	// *bcl is the array to be updated
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	0002      	movs	r2, r0
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	for (uint8_t j=0; j<8; j++) {
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e022      	b.n	8002b24 <getBaseColour+0x5c>
		temp = (col_val>>j);
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	230f      	movs	r3, #15
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	411a      	asrs	r2, r3
 8002aea:	210e      	movs	r1, #14
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	701a      	strb	r2, [r3, #0]
		if ((temp%2) == 0) b_colour[j] = SPI_zero;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <getBaseColour+0x44>
 8002afe:	230f      	movs	r3, #15
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <getBaseColour+0x70>)
 8002b06:	21c0      	movs	r1, #192	; 0xc0
 8002b08:	54d1      	strb	r1, [r2, r3]
 8002b0a:	e005      	b.n	8002b18 <getBaseColour+0x50>
		else b_colour[j] = SPI_one;
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <getBaseColour+0x70>)
 8002b14:	21f8      	movs	r1, #248	; 0xf8
 8002b16:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j=0; j<8; j++) {
 8002b18:	210f      	movs	r1, #15
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	3201      	adds	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	230f      	movs	r3, #15
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d9d7      	bls.n	8002ade <getBaseColour+0x16>
	}
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	200005ac 	.word	0x200005ac

08002b3c <SPI_SEND_WSBUF>:

void SPI_SEND_WSBUF(uint8_t * buf, uint16_t size) {
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	000a      	movs	r2, r1
 8002b46:	1cbb      	adds	r3, r7, #2
 8002b48:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<(WS_NUMBER*24); i++) {
 8002b4a:	230e      	movs	r3, #14
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e00c      	b.n	8002b6e <SPI_SEND_WSBUF+0x32>
		SpiLed_Send(LED_buf[i]);
 8002b54:	240e      	movs	r4, #14
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SPI_SEND_WSBUF+0x48>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f000 f814 	bl	8002b8c <SpiLed_Send>
	for(uint16_t i = 0; i<(WS_NUMBER*24); i++) {
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	881a      	ldrh	r2, [r3, #0]
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	3201      	adds	r2, #1
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	230e      	movs	r3, #14
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <SPI_SEND_WSBUF+0x4c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d9ec      	bls.n	8002b54 <SPI_SEND_WSBUF+0x18>
	}
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b005      	add	sp, #20
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	2000006c 	.word	0x2000006c
 8002b88:	0000050f 	.word	0x0000050f

08002b8c <SpiLed_Send>:

void SpiLed_Send(uint8_t data) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	0002      	movs	r2, r0
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	701a      	strb	r2, [r3, #0]
	while( !(SPI1->SR & SPI_SR_TXE) );
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <SpiLed_Send+0x28>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d0fa      	beq.n	8002b9a <SpiLed_Send+0xe>
	SPI1->DR = data;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <SpiLed_Send+0x28>)
 8002ba6:	1dfa      	adds	r2, r7, #7
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	60da      	str	r2, [r3, #12]
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40013000 	.word	0x40013000

08002bb8 <assignColour>:

// Update colour variable passed depending on a time (#define in clock.h file)
void assignColour(uint8_t ht, uint8_t hu, uint8_t * r, uint8_t * g, uint8_t * b) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60ba      	str	r2, [r7, #8]
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	240f      	movs	r4, #15
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	1c02      	adds	r2, r0, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	200e      	movs	r0, #14
 8002bcc:	183b      	adds	r3, r7, r0
 8002bce:	1c0a      	adds	r2, r1, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
	uint8_t hr = 10*(ht) + hu;	// Hour in decimal format
 8002bd2:	193b      	adds	r3, r7, r4
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	1c1a      	adds	r2, r3, #0
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	18d3      	adds	r3, r2, r3
 8002bdc:	18db      	adds	r3, r3, r3
 8002bde:	b2d9      	uxtb	r1, r3
 8002be0:	2417      	movs	r4, #23
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	183a      	adds	r2, r7, r0
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	188a      	adds	r2, r1, r2
 8002bea:	701a      	strb	r2, [r3, #0]
	*r=0; *g=0; *b=0;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
	if (hr >= 6 && hr < 12) *r = (R_T1/brg_div);
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d910      	bls.n	8002c28 <assignColour+0x70>
 8002c06:	2317      	movs	r3, #23
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b0b      	cmp	r3, #11
 8002c0e:	d80b      	bhi.n	8002c28 <assignColour+0x70>
 8002c10:	4bac      	ldr	r3, [pc, #688]	; (8002ec4 <assignColour+0x30c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	0019      	movs	r1, r3
 8002c18:	20a0      	movs	r0, #160	; 0xa0
 8002c1a:	f7fd fafd 	bl	8000218 <__divsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e060      	b.n	8002cea <assignColour+0x132>
	else if (hr >= 12 && hr < 18) *r = (R_T2/brg_div);
 8002c28:	2317      	movs	r3, #23
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b0b      	cmp	r3, #11
 8002c30:	d910      	bls.n	8002c54 <assignColour+0x9c>
 8002c32:	2317      	movs	r3, #23
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d80b      	bhi.n	8002c54 <assignColour+0x9c>
 8002c3c:	4ba1      	ldr	r3, [pc, #644]	; (8002ec4 <assignColour+0x30c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	0019      	movs	r1, r3
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f7fd fae7 	bl	8000218 <__divsi3>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e04a      	b.n	8002cea <assignColour+0x132>
	else if (hr >= 18 && hr < 21) *r = (R_T3/brg_div);
 8002c54:	2317      	movs	r3, #23
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d910      	bls.n	8002c80 <assignColour+0xc8>
 8002c5e:	2317      	movs	r3, #23
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b14      	cmp	r3, #20
 8002c66:	d80b      	bhi.n	8002c80 <assignColour+0xc8>
 8002c68:	4b96      	ldr	r3, [pc, #600]	; (8002ec4 <assignColour+0x30c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	0019      	movs	r1, r3
 8002c70:	20aa      	movs	r0, #170	; 0xaa
 8002c72:	f7fd fad1 	bl	8000218 <__divsi3>
 8002c76:	0003      	movs	r3, r0
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e034      	b.n	8002cea <assignColour+0x132>
	else if (hr >= 21 && hr < 23) *r = (R_T4/brg_div);
 8002c80:	2317      	movs	r3, #23
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b14      	cmp	r3, #20
 8002c88:	d910      	bls.n	8002cac <assignColour+0xf4>
 8002c8a:	2317      	movs	r3, #23
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b16      	cmp	r3, #22
 8002c92:	d80b      	bhi.n	8002cac <assignColour+0xf4>
 8002c94:	4b8b      	ldr	r3, [pc, #556]	; (8002ec4 <assignColour+0x30c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	209b      	movs	r0, #155	; 0x9b
 8002c9e:	f7fd fabb 	bl	8000218 <__divsi3>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e01e      	b.n	8002cea <assignColour+0x132>
	else if (hr >= 23 && hr < 5) *r = (R_T5/brg_div);
 8002cac:	2317      	movs	r3, #23
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b16      	cmp	r3, #22
 8002cb4:	d90a      	bls.n	8002ccc <assignColour+0x114>
 8002cb6:	2317      	movs	r3, #23
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d805      	bhi.n	8002ccc <assignColour+0x114>
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <assignColour+0x30c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e00e      	b.n	8002cea <assignColour+0x132>
	else if (hr >= 5 && hr < 6) *r = (R_T6/brg_div);
 8002ccc:	2317      	movs	r3, #23
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d909      	bls.n	8002cea <assignColour+0x132>
 8002cd6:	2317      	movs	r3, #23
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d804      	bhi.n	8002cea <assignColour+0x132>
 8002ce0:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <assignColour+0x30c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]

	if (hr >= 6 && hr < 12) *g = (G_T1/brg_div);
 8002cea:	2317      	movs	r3, #23
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d910      	bls.n	8002d16 <assignColour+0x15e>
 8002cf4:	2317      	movs	r3, #23
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b0b      	cmp	r3, #11
 8002cfc:	d80b      	bhi.n	8002d16 <assignColour+0x15e>
 8002cfe:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <assignColour+0x30c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	0019      	movs	r1, r3
 8002d06:	205f      	movs	r0, #95	; 0x5f
 8002d08:	f7fd fa86 	bl	8000218 <__divsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e05a      	b.n	8002dcc <assignColour+0x214>
	else if (hr >= 12 && hr < 18) *g = (G_T2/brg_div);
 8002d16:	2317      	movs	r3, #23
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b0b      	cmp	r3, #11
 8002d1e:	d910      	bls.n	8002d42 <assignColour+0x18a>
 8002d20:	2317      	movs	r3, #23
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b11      	cmp	r3, #17
 8002d28:	d80b      	bhi.n	8002d42 <assignColour+0x18a>
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <assignColour+0x30c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	0019      	movs	r1, r3
 8002d32:	209b      	movs	r0, #155	; 0x9b
 8002d34:	f7fd fa70 	bl	8000218 <__divsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e044      	b.n	8002dcc <assignColour+0x214>
	else if (hr >= 18 && hr < 21) *g = (G_T3/brg_div);
 8002d42:	2317      	movs	r3, #23
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b11      	cmp	r3, #17
 8002d4a:	d910      	bls.n	8002d6e <assignColour+0x1b6>
 8002d4c:	2317      	movs	r3, #23
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b14      	cmp	r3, #20
 8002d54:	d80b      	bhi.n	8002d6e <assignColour+0x1b6>
 8002d56:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <assignColour+0x30c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	2032      	movs	r0, #50	; 0x32
 8002d60:	f7fd fa5a 	bl	8000218 <__divsi3>
 8002d64:	0003      	movs	r3, r0
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e02e      	b.n	8002dcc <assignColour+0x214>
	else if (hr >= 21 && hr < 23) *g = (G_T4/brg_div);
 8002d6e:	2317      	movs	r3, #23
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b14      	cmp	r3, #20
 8002d76:	d90a      	bls.n	8002d8e <assignColour+0x1d6>
 8002d78:	2317      	movs	r3, #23
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b16      	cmp	r3, #22
 8002d80:	d805      	bhi.n	8002d8e <assignColour+0x1d6>
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <assignColour+0x30c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e01e      	b.n	8002dcc <assignColour+0x214>
	else if (hr >= 23 && hr < 5) *g = (G_T5/brg_div);
 8002d8e:	2317      	movs	r3, #23
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b16      	cmp	r3, #22
 8002d96:	d90a      	bls.n	8002dae <assignColour+0x1f6>
 8002d98:	2317      	movs	r3, #23
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d805      	bhi.n	8002dae <assignColour+0x1f6>
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <assignColour+0x30c>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e00e      	b.n	8002dcc <assignColour+0x214>
	else if (hr >= 5 && hr < 6) *g = (G_T6/brg_div);
 8002dae:	2317      	movs	r3, #23
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d909      	bls.n	8002dcc <assignColour+0x214>
 8002db8:	2317      	movs	r3, #23
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d804      	bhi.n	8002dcc <assignColour+0x214>
 8002dc2:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <assignColour+0x30c>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]

	if (hr >= 6 && hr < 12) *b = (B_T1/brg_div);
 8002dcc:	2317      	movs	r3, #23
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d90a      	bls.n	8002dec <assignColour+0x234>
 8002dd6:	2317      	movs	r3, #23
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0b      	cmp	r3, #11
 8002dde:	d805      	bhi.n	8002dec <assignColour+0x234>
 8002de0:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <assignColour+0x30c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e067      	b.n	8002ebc <assignColour+0x304>
	else if (hr >= 12 && hr < 18) *b = (B_T2/brg_div);
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b0b      	cmp	r3, #11
 8002df4:	d90a      	bls.n	8002e0c <assignColour+0x254>
 8002df6:	2317      	movs	r3, #23
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b11      	cmp	r3, #17
 8002dfe:	d805      	bhi.n	8002e0c <assignColour+0x254>
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <assignColour+0x30c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e057      	b.n	8002ebc <assignColour+0x304>
	else if (hr >= 18 && hr < 21) *b = (B_T3/brg_div);
 8002e0c:	2317      	movs	r3, #23
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b11      	cmp	r3, #17
 8002e14:	d910      	bls.n	8002e38 <assignColour+0x280>
 8002e16:	2317      	movs	r3, #23
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b14      	cmp	r3, #20
 8002e1e:	d80b      	bhi.n	8002e38 <assignColour+0x280>
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <assignColour+0x30c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	0019      	movs	r1, r3
 8002e28:	202d      	movs	r0, #45	; 0x2d
 8002e2a:	f7fd f9f5 	bl	8000218 <__divsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e041      	b.n	8002ebc <assignColour+0x304>
	else if (hr >= 21 && hr < 23) *b = (B_T4/brg_div);
 8002e38:	2317      	movs	r3, #23
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b14      	cmp	r3, #20
 8002e40:	d910      	bls.n	8002e64 <assignColour+0x2ac>
 8002e42:	2317      	movs	r3, #23
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b16      	cmp	r3, #22
 8002e4a:	d80b      	bhi.n	8002e64 <assignColour+0x2ac>
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <assignColour+0x30c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	0019      	movs	r1, r3
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	f7fd f9df 	bl	8000218 <__divsi3>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e02b      	b.n	8002ebc <assignColour+0x304>
	else if (hr >= 23 || hr < 5) *b = (B_T5/brg_div);
 8002e64:	2317      	movs	r3, #23
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b16      	cmp	r3, #22
 8002e6c:	d804      	bhi.n	8002e78 <assignColour+0x2c0>
 8002e6e:	2317      	movs	r3, #23
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d80b      	bhi.n	8002e90 <assignColour+0x2d8>
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <assignColour+0x30c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	0019      	movs	r1, r3
 8002e80:	20aa      	movs	r0, #170	; 0xaa
 8002e82:	f7fd f9c9 	bl	8000218 <__divsi3>
 8002e86:	0003      	movs	r3, r0
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e015      	b.n	8002ebc <assignColour+0x304>
	else if (hr >= 5 && hr < 6) *b = (B_T6/brg_div);
 8002e90:	2317      	movs	r3, #23
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d910      	bls.n	8002ebc <assignColour+0x304>
 8002e9a:	2317      	movs	r3, #23
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d80b      	bhi.n	8002ebc <assignColour+0x304>
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <assignColour+0x30c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	0019      	movs	r1, r3
 8002eac:	20aa      	movs	r0, #170	; 0xaa
 8002eae:	f7fd f9b3 	bl	8000218 <__divsi3>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	701a      	strb	r2, [r3, #0]
}
 8002eba:	e7ff      	b.n	8002ebc <assignColour+0x304>
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b007      	add	sp, #28
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	20000024 	.word	0x20000024

08002ec8 <ADCCompress>:

uint8_t ADCCompress (uint16_t adc) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	0002      	movs	r2, r0
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	801a      	strh	r2, [r3, #0]

	if (adc > 0 && adc < 1801) return 2;		// Much light
 8002ed4:	1dbb      	adds	r3, r7, #6
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <ADCCompress+0x24>
 8002edc:	1dbb      	adds	r3, r7, #6
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	23e1      	movs	r3, #225	; 0xe1
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d801      	bhi.n	8002eec <ADCCompress+0x24>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e06c      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 1800 && adc < 2101) return 3;
 8002eec:	1dbb      	adds	r3, r7, #6
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	23e1      	movs	r3, #225	; 0xe1
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d906      	bls.n	8002f06 <ADCCompress+0x3e>
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <ADCCompress+0x108>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d801      	bhi.n	8002f06 <ADCCompress+0x3e>
 8002f02:	2303      	movs	r3, #3
 8002f04:	e05f      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 2100 && adc < 2401) return 5;
 8002f06:	1dbb      	adds	r3, r7, #6
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <ADCCompress+0x108>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d907      	bls.n	8002f20 <ADCCompress+0x58>
 8002f10:	1dbb      	adds	r3, r7, #6
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	2396      	movs	r3, #150	; 0x96
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d801      	bhi.n	8002f20 <ADCCompress+0x58>
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	e052      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 2400 && adc < 2701) return 7;
 8002f20:	1dbb      	adds	r3, r7, #6
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	2396      	movs	r3, #150	; 0x96
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d906      	bls.n	8002f3a <ADCCompress+0x72>
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <ADCCompress+0x10c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d801      	bhi.n	8002f3a <ADCCompress+0x72>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e045      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 2700 && adc < 3001) return 8;
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <ADCCompress+0x10c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d906      	bls.n	8002f52 <ADCCompress+0x8a>
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <ADCCompress+0x110>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d801      	bhi.n	8002f52 <ADCCompress+0x8a>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	e039      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 3000 && adc < 3301) return 10;
 8002f52:	1dbb      	adds	r3, r7, #6
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <ADCCompress+0x110>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d906      	bls.n	8002f6a <ADCCompress+0xa2>
 8002f5c:	1dbb      	adds	r3, r7, #6
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <ADCCompress+0x114>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d801      	bhi.n	8002f6a <ADCCompress+0xa2>
 8002f66:	230a      	movs	r3, #10
 8002f68:	e02d      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 3300 && adc < 3601) return 12;
 8002f6a:	1dbb      	adds	r3, r7, #6
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <ADCCompress+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d907      	bls.n	8002f84 <ADCCompress+0xbc>
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	881a      	ldrh	r2, [r3, #0]
 8002f78:	23e1      	movs	r3, #225	; 0xe1
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d801      	bhi.n	8002f84 <ADCCompress+0xbc>
 8002f80:	230c      	movs	r3, #12
 8002f82:	e020      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 3600 && adc < 3901) return 14;
 8002f84:	1dbb      	adds	r3, r7, #6
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	23e1      	movs	r3, #225	; 0xe1
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d906      	bls.n	8002f9e <ADCCompress+0xd6>
 8002f90:	1dbb      	adds	r3, r7, #6
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <ADCCompress+0x118>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d801      	bhi.n	8002f9e <ADCCompress+0xd6>
 8002f9a:	230e      	movs	r3, #14
 8002f9c:	e013      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 3900 && adc < 4201) return 20;	// No light
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <ADCCompress+0x118>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d906      	bls.n	8002fb6 <ADCCompress+0xee>
 8002fa8:	1dbb      	adds	r3, r7, #6
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <ADCCompress+0x11c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d801      	bhi.n	8002fb6 <ADCCompress+0xee>
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	e007      	b.n	8002fc6 <ADCCompress+0xfe>
	if (adc > 4200) return 22;
 8002fb6:	1dbb      	adds	r3, r7, #6
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <ADCCompress+0x11c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <ADCCompress+0xfc>
 8002fc0:	2316      	movs	r3, #22
 8002fc2:	e000      	b.n	8002fc6 <ADCCompress+0xfe>

	return 16;	// If LDR malfunction, return default (16)
 8002fc4:	2310      	movs	r3, #16
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	00000834 	.word	0x00000834
 8002fd4:	00000a8c 	.word	0x00000a8c
 8002fd8:	00000bb8 	.word	0x00000bb8
 8002fdc:	00000ce4 	.word	0x00000ce4
 8002fe0:	00000f3c 	.word	0x00000f3c
 8002fe4:	00001068 	.word	0x00001068

08002fe8 <loveyou>:


void loveyou(char * msg) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
	// Display heart
	FillLEDArray(LED_buf, 0, 0, 0);
 8002ff0:	4846      	ldr	r0, [pc, #280]	; (800310c <loveyou+0x124>)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	f7ff fbf6 	bl	80027e8 <FillLEDArray>
	FillLEDSegment(LED_buf, 14, 14, 30, 0, 0);
 8002ffc:	4843      	ldr	r0, [pc, #268]	; (800310c <loveyou+0x124>)
 8002ffe:	2300      	movs	r3, #0
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	231e      	movs	r3, #30
 8003008:	220e      	movs	r2, #14
 800300a:	210e      	movs	r1, #14
 800300c:	f7ff fc5a 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 16, 16, 30, 0, 0);
 8003010:	483e      	ldr	r0, [pc, #248]	; (800310c <loveyou+0x124>)
 8003012:	2300      	movs	r3, #0
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	2300      	movs	r3, #0
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	231e      	movs	r3, #30
 800301c:	2210      	movs	r2, #16
 800301e:	2110      	movs	r1, #16
 8003020:	f7ff fc50 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 20, 20, 30, 0, 0);
 8003024:	4839      	ldr	r0, [pc, #228]	; (800310c <loveyou+0x124>)
 8003026:	2300      	movs	r3, #0
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	231e      	movs	r3, #30
 8003030:	2214      	movs	r2, #20
 8003032:	2114      	movs	r1, #20
 8003034:	f7ff fc46 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 22, 24, 30, 0, 0);
 8003038:	4834      	ldr	r0, [pc, #208]	; (800310c <loveyou+0x124>)
 800303a:	2300      	movs	r3, #0
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2300      	movs	r3, #0
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	231e      	movs	r3, #30
 8003044:	2218      	movs	r2, #24
 8003046:	2116      	movs	r1, #22
 8003048:	f7ff fc3c 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 24, 24, 30, 0, 0);
 800304c:	482f      	ldr	r0, [pc, #188]	; (800310c <loveyou+0x124>)
 800304e:	2300      	movs	r3, #0
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2300      	movs	r3, #0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	231e      	movs	r3, #30
 8003058:	2218      	movs	r2, #24
 800305a:	2118      	movs	r1, #24
 800305c:	f7ff fc32 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 26, 26, 30, 0, 0);
 8003060:	482a      	ldr	r0, [pc, #168]	; (800310c <loveyou+0x124>)
 8003062:	2300      	movs	r3, #0
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2300      	movs	r3, #0
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	231e      	movs	r3, #30
 800306c:	221a      	movs	r2, #26
 800306e:	211a      	movs	r1, #26
 8003070:	f7ff fc28 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 29, 29, 30, 0, 0);
 8003074:	4825      	ldr	r0, [pc, #148]	; (800310c <loveyou+0x124>)
 8003076:	2300      	movs	r3, #0
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	231e      	movs	r3, #30
 8003080:	221d      	movs	r2, #29
 8003082:	211d      	movs	r1, #29
 8003084:	f7ff fc1e 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 31, 33, 30, 0, 0);
 8003088:	4820      	ldr	r0, [pc, #128]	; (800310c <loveyou+0x124>)
 800308a:	2300      	movs	r3, #0
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	231e      	movs	r3, #30
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	211f      	movs	r1, #31
 8003098:	f7ff fc14 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 35, 35, 30, 0, 0);
 800309c:	481b      	ldr	r0, [pc, #108]	; (800310c <loveyou+0x124>)
 800309e:	2300      	movs	r3, #0
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	2300      	movs	r3, #0
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	231e      	movs	r3, #30
 80030a8:	2223      	movs	r2, #35	; 0x23
 80030aa:	2123      	movs	r1, #35	; 0x23
 80030ac:	f7ff fc0a 	bl	80028c4 <FillLEDSegment>
	FillLEDSegment(LED_buf, 39, 39, 30, 0, 0);
 80030b0:	4816      	ldr	r0, [pc, #88]	; (800310c <loveyou+0x124>)
 80030b2:	2300      	movs	r3, #0
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	231e      	movs	r3, #30
 80030bc:	2227      	movs	r2, #39	; 0x27
 80030be:	2127      	movs	r1, #39	; 0x27
 80030c0:	f7ff fc00 	bl	80028c4 <FillLEDSegment>
	SPI_SEND_WSBUF(LED_buf, sizeof(LED_buf));
 80030c4:	23a2      	movs	r3, #162	; 0xa2
 80030c6:	00da      	lsls	r2, r3, #3
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <loveyou+0x124>)
 80030ca:	0011      	movs	r1, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff fd35 	bl	8002b3c <SPI_SEND_WSBUF>
	// Scroll loveyou message
	if(msg != NULL) ScrollLed(msg, 400, sizeof(msg));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <loveyou+0xfe>
 80030d8:	23c8      	movs	r3, #200	; 0xc8
 80030da:	0059      	lsls	r1, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7fe fccb 	bl	8001a7c <ScrollLed>
	ScrollLed("love you", 300, sizeof("love you"));
 80030e6:	2396      	movs	r3, #150	; 0x96
 80030e8:	0059      	lsls	r1, r3, #1
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <loveyou+0x128>)
 80030ec:	2209      	movs	r2, #9
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7fe fcc4 	bl	8001a7c <ScrollLed>
	ScrollLed("you are the best", 300, sizeof("you are the best"));
 80030f4:	2396      	movs	r3, #150	; 0x96
 80030f6:	0059      	lsls	r1, r3, #1
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <loveyou+0x12c>)
 80030fa:	2211      	movs	r2, #17
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fe fcbd 	bl	8001a7c <ScrollLed>

}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	2000006c 	.word	0x2000006c
 8003110:	080033b4 	.word	0x080033b4
 8003114:	080033c0 	.word	0x080033c0

08003118 <welcomeStrip>:

void welcomeStrip(uint8_t * buf) {
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b087      	sub	sp, #28
 800311c:	af02      	add	r7, sp, #8
 800311e:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 8003120:	230e      	movs	r3, #14
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2200      	movs	r2, #0
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	e01b      	b.n	8003162 <welcomeStrip+0x4a>
		FillLEDSegment(buf, i, i, 30, 30, 0);
 800312a:	240e      	movs	r4, #14
 800312c:	193b      	adds	r3, r7, r4
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b2d9      	uxtb	r1, r3
 8003132:	193b      	adds	r3, r7, r4
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	231e      	movs	r3, #30
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	231e      	movs	r3, #30
 8003144:	f7ff fbbe 	bl	80028c4 <FillLEDSegment>
		SPI_SEND_WSBUF(buf, sizeof(buf));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2104      	movs	r1, #4
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fcf5 	bl	8002b3c <SPI_SEND_WSBUF>
		delay_ms(20);
 8003152:	2014      	movs	r0, #20
 8003154:	f7fe f9e6 	bl	8001524 <delay_ms>
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 8003158:	193b      	adds	r3, r7, r4
 800315a:	881a      	ldrh	r2, [r3, #0]
 800315c:	193b      	adds	r3, r7, r4
 800315e:	3201      	adds	r2, #1
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	230e      	movs	r3, #14
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	2b35      	cmp	r3, #53	; 0x35
 800316a:	d9de      	bls.n	800312a <welcomeStrip+0x12>
	}
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 800316c:	230c      	movs	r3, #12
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2200      	movs	r2, #0
 8003172:	801a      	strh	r2, [r3, #0]
 8003174:	e01b      	b.n	80031ae <welcomeStrip+0x96>
		FillLEDSegment(buf, i, i, 30, 0, 30);
 8003176:	240c      	movs	r4, #12
 8003178:	193b      	adds	r3, r7, r4
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b2d9      	uxtb	r1, r3
 800317e:	193b      	adds	r3, r7, r4
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	231e      	movs	r3, #30
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2300      	movs	r3, #0
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	231e      	movs	r3, #30
 8003190:	f7ff fb98 	bl	80028c4 <FillLEDSegment>
		SPI_SEND_WSBUF(buf, sizeof(buf));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2104      	movs	r1, #4
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff fccf 	bl	8002b3c <SPI_SEND_WSBUF>
		delay_ms(20);
 800319e:	2014      	movs	r0, #20
 80031a0:	f7fe f9c0 	bl	8001524 <delay_ms>
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	881a      	ldrh	r2, [r3, #0]
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	3201      	adds	r2, #1
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	230c      	movs	r3, #12
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	2b35      	cmp	r3, #53	; 0x35
 80031b6:	d9de      	bls.n	8003176 <welcomeStrip+0x5e>
	}
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 80031b8:	230a      	movs	r3, #10
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2200      	movs	r2, #0
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	e01b      	b.n	80031fa <welcomeStrip+0xe2>
		FillLEDSegment(buf, i, i, 0, 30, 30);
 80031c2:	240a      	movs	r4, #10
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b2d9      	uxtb	r1, r3
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	231e      	movs	r3, #30
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	231e      	movs	r3, #30
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	f7ff fb72 	bl	80028c4 <FillLEDSegment>
		SPI_SEND_WSBUF(buf, sizeof(buf));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2104      	movs	r1, #4
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff fca9 	bl	8002b3c <SPI_SEND_WSBUF>
		delay_ms(20);
 80031ea:	2014      	movs	r0, #20
 80031ec:	f7fe f99a 	bl	8001524 <delay_ms>
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	881a      	ldrh	r2, [r3, #0]
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	3201      	adds	r2, #1
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	230a      	movs	r3, #10
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	2b35      	cmp	r3, #53	; 0x35
 8003202:	d9de      	bls.n	80031c2 <welcomeStrip+0xaa>
	}
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 8003204:	2308      	movs	r3, #8
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2200      	movs	r2, #0
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	e01b      	b.n	8003246 <welcomeStrip+0x12e>
		FillLEDSegment(buf, i, i, 0, 0, 0);
 800320e:	2408      	movs	r4, #8
 8003210:	193b      	adds	r3, r7, r4
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b2d9      	uxtb	r1, r3
 8003216:	193b      	adds	r3, r7, r4
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	2300      	movs	r3, #0
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	2300      	movs	r3, #0
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	f7ff fb4c 	bl	80028c4 <FillLEDSegment>
		SPI_SEND_WSBUF(buf, sizeof(buf));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2104      	movs	r1, #4
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fc83 	bl	8002b3c <SPI_SEND_WSBUF>
		delay_ms(20);
 8003236:	2014      	movs	r0, #20
 8003238:	f7fe f974 	bl	8001524 <delay_ms>
	for (uint16_t i=0; i<WS_NUMBER; i++) {
 800323c:	193b      	adds	r3, r7, r4
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	193b      	adds	r3, r7, r4
 8003242:	3201      	adds	r2, #1
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	2308      	movs	r3, #8
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	2b35      	cmp	r3, #53	; 0x35
 800324e:	d9de      	bls.n	800320e <welcomeStrip+0xf6>
	}


}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b005      	add	sp, #20
 8003256:	bd90      	pop	{r4, r7, pc}

08003258 <ADC1_COMP_IRQHandler>:

// LED brightness ADC measurement
__attribute__((interrupt)) void ADC1_COMP_IRQHandler(void)	{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	ADC1->ISR |= ADC_ISR_EOC;	// Clear end of conversion flag
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <ADC1_COMP_IRQHandler+0x34>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <ADC1_COMP_IRQHandler+0x34>)
 8003262:	2104      	movs	r1, #4
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
	ADC_result = ADC1->DR;
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <ADC1_COMP_IRQHandler+0x34>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	b29a      	uxth	r2, r3
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <ADC1_COMP_IRQHandler+0x38>)
 8003270:	801a      	strh	r2, [r3, #0]
	brg_div = ADCCompress(ADC_result);
 8003272:	4b07      	ldr	r3, [pc, #28]	; (8003290 <ADC1_COMP_IRQHandler+0x38>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fe25 	bl	8002ec8 <ADCCompress>
 800327e:	0003      	movs	r3, r0
 8003280:	001a      	movs	r2, r3
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <ADC1_COMP_IRQHandler+0x3c>)
 8003284:	701a      	strb	r2, [r3, #0]

}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40012400 	.word	0x40012400
 8003290:	20000590 	.word	0x20000590
 8003294:	20000024 	.word	0x20000024

08003298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003298:	480d      	ldr	r0, [pc, #52]	; (80032d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800329a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800329c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800329e:	e003      	b.n	80032a8 <LoopCopyDataInit>

080032a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80032a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032a6:	3104      	adds	r1, #4

080032a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032a8:	480b      	ldr	r0, [pc, #44]	; (80032d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <LoopForever+0xe>)
  adds r2, r0, r1
 80032ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80032ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80032b0:	d3f6      	bcc.n	80032a0 <CopyDataInit>
  ldr r2, =_sbss
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80032b4:	e002      	b.n	80032bc <LoopFillZerobss>

080032b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80032b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ba:	3204      	adds	r2, #4

080032bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <LoopForever+0x16>)
  cmp r2, r3
 80032be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80032c0:	d3f9      	bcc.n	80032b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032c2:	f7ff f81b 	bl	80022fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032c6:	f000 f811 	bl	80032ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ca:	f7fe f9c9 	bl	8001660 <main>

080032ce <LoopForever>:

LoopForever:
    b LoopForever
 80032ce:	e7fe      	b.n	80032ce <LoopForever>
  ldr   r0, =_estack
 80032d0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80032d4:	0800341c 	.word	0x0800341c
  ldr r0, =_sdata
 80032d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80032dc:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80032e0:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80032e4:	200005b4 	.word	0x200005b4

080032e8 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032e8:	e7fe      	b.n	80032e8 <CEC_IRQHandler>
	...

080032ec <__libc_init_array>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	2600      	movs	r6, #0
 80032f0:	4d0c      	ldr	r5, [pc, #48]	; (8003324 <__libc_init_array+0x38>)
 80032f2:	4c0d      	ldr	r4, [pc, #52]	; (8003328 <__libc_init_array+0x3c>)
 80032f4:	1b64      	subs	r4, r4, r5
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	42a6      	cmp	r6, r4
 80032fa:	d109      	bne.n	8003310 <__libc_init_array+0x24>
 80032fc:	2600      	movs	r6, #0
 80032fe:	f000 f821 	bl	8003344 <_init>
 8003302:	4d0a      	ldr	r5, [pc, #40]	; (800332c <__libc_init_array+0x40>)
 8003304:	4c0a      	ldr	r4, [pc, #40]	; (8003330 <__libc_init_array+0x44>)
 8003306:	1b64      	subs	r4, r4, r5
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	42a6      	cmp	r6, r4
 800330c:	d105      	bne.n	800331a <__libc_init_array+0x2e>
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	00b3      	lsls	r3, r6, #2
 8003312:	58eb      	ldr	r3, [r5, r3]
 8003314:	4798      	blx	r3
 8003316:	3601      	adds	r6, #1
 8003318:	e7ee      	b.n	80032f8 <__libc_init_array+0xc>
 800331a:	00b3      	lsls	r3, r6, #2
 800331c:	58eb      	ldr	r3, [r5, r3]
 800331e:	4798      	blx	r3
 8003320:	3601      	adds	r6, #1
 8003322:	e7f2      	b.n	800330a <__libc_init_array+0x1e>
 8003324:	08003414 	.word	0x08003414
 8003328:	08003414 	.word	0x08003414
 800332c:	08003414 	.word	0x08003414
 8003330:	08003418 	.word	0x08003418

08003334 <memset>:
 8003334:	0003      	movs	r3, r0
 8003336:	1812      	adds	r2, r2, r0
 8003338:	4293      	cmp	r3, r2
 800333a:	d100      	bne.n	800333e <memset+0xa>
 800333c:	4770      	bx	lr
 800333e:	7019      	strb	r1, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	e7f9      	b.n	8003338 <memset+0x4>

08003344 <_init>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334a:	bc08      	pop	{r3}
 800334c:	469e      	mov	lr, r3
 800334e:	4770      	bx	lr

08003350 <_fini>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr
